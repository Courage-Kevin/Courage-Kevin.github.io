[{"title":"Java基础知识总结","url":"/2018/02/05/Java基础知识总结/","content":"Java基础知识整理\n<!--more-->\n# 基础部分\n## Java编译运行过程\n1. 编译期：java源文件，经编译生成.class文件\n2. 运行期：JVM加载.class文件，并运行class\n3. 特点：跨平台，一次编译到处使用\n\n## 名词释义\n1. JVM：java虚拟机，作用就是加载.class文件，运行.class文件\n2. JRE： java开发环境，除了包含JVM外，还包含java程序运行所必须的环境\n3. JDK：java开发工具包，除了包含JRE外，还包含编译，运行等命令工具3. \n\n## 数据类型\n| **byte类型**     | **8位**  | **范围：-128~127**               |\n| ---------------- | -------- | --------------------------------|\n| **short 类型**   | **16位** | **范围：-32768~32767**           |\n| **char  类型**   | **16位** | **范围：\\u0000~\\u65535**         |\n| **int类型**      | **32位** | **范围：-2147483648~2147483647** |\n| **long 类型**    | **64位** | **范围：很大很大 2^63**           |\n| **float 类型**   | **32位** |                                  |\n| **double 类型**  | **64位** |                                  |\n| **boolean 类型** | **8位**  |                                  |\n\n\n## 基本类型自动转换\n1. 从小到大依次为：byte < short < int < long < float < double\n2. 自动类型转换：小类型转大类型 （小杯子往大杯子倒水）\n3. 强制类型转换：大类型转小类型 （大杯子往小杯子倒数）\n\n## 运算符\n1. 算数：    +，-，*，/，%，++，--\n2. 关系：>,<,>=,<=,==,!=,boolean\n3. 逻辑：&&，||，!boolean\n4. 赋值：=，+=，-=，*=，/=，%=\n5. 字符连接运算符：+\n6. 条件/三目运算：boolean?数1:数2;\n\n## 分支结构\n1. If\n2. If…else\n3. If…elss     if\n4. Switch…case\n\n## 循环\n1. while循环\n2. do...while循环\n3. for循环\n\n\n\n## 数组\n1. 数组的定义：int [ ] arr =new int [ 10 ] \n2. 数组的初始化：int [ ] arr = new int [ ] \n3. 数组的访问：通过数组名.length可以获取数组的长度，也就是数组内元素的个数通过索引来访问数组元素，下标从0开始，最大到数组长度-1\n4. 数组遍历\n   ```java\n   int[] arr = new int[10];\n   \n   for (int i = 0; i < arr.length; i++) {\n       arr[3] = (int) (Math.random() * 100);\n   }\n   \n   for (int i = 0; i < arr.length; i++) {\n       System.out.println(arr[i]);    //正序输出\n   }\n   \n   for (int i = arr.length - 1; i >= 0; i--) {\n       System.out.println(arr[i]);    //倒序输出\n   }\n   ```\n\n## 访问修饰符\n| **private**   | **同类可见**               | **可以修饰变量、方法**           | **注意：不能修饰类(外部类)** |\n| ------------- | -------------------------- | -------------------------------- | ---------------------------- |\n| **default**   | **同包同类可见**           | **可以修饰类、接口、变量、方法** |                              |\n| **protected** | **同包同类和所有子类可见** | **可以修饰变量、方法**           | **注意不能修饰类(外部类)**   |\n| **public**    | **所有类可见**             | **可以修饰类、接口、变量、方法** |                              |\n\n\n\n## 非访问修饰符\n为了实现某一些功能，java也提供了许多非访问修饰符\n1. static修饰符：被static修饰的变量和方法叫做静态变量和静态方法\n   * 静态变量：static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，他的静态变量只有一份拷贝\n   * 静态方法：static关键字用来声明独立于对象的静态方法，静态方法不能使用类的非静态变量(静态方法只能使用类的静态变量)   \n2. final修饰符：\n   * final变量：不能被重新赋值\n   * final方法：final修饰的方法可以被子类继承，但是不能被子类修改\n   * final类：  final类不能被继承，没有类能够继承final类的任何特征\n3. abstract修饰符：\n   * 抽象类：抽象类不能用来实例化对象，目的：是为了将来对该类进行扩充。\n   * 抽象方法：继承抽象类的子类必须实现父类的所有抽象方法，除非这个子类也是抽象类，\n   * 注意：如果一个类包含若干个抽象方法，那么该类必须声明为抽象类，抽象类不可以包含抽象方法。\n4. 抽象加单总结：\n   * 抽象方法的意义：在于将方法的设计和方法的实现分离。\n   * 抽象类需要被继承，抽象类定义的抽象方法子类必须重写。\n   * 抽象类不能创建对象，但是可以包含构造方法，成员属性，普通方法。\n\n\n# 面向对象\n## 什么是类？\n* 类是一个模板，包含对象的属性，方法。 \n* 我们把它理解为造汽车的图纸，图纸包含了制造汽车的各个部件的尺寸，参数等。\n\n## 什么是对象？\n* 对象是类的一个实例。\n* 我们可以对象理解为根据图纸制造出来的汽车。\n    \n> 汽车就好比一个对象，图纸就好比是一个类，有了图纸才能设计出汽车，换而言之也就是有了类才能创建对象（也叫实例）。\n\n## 面向对象的特征","tags":["基础知识"],"categories":["Java基础知识"]}]