<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Courage-Kevin 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://courage-kevin.github.io/"/>
  <updated>2020-02-06T08:54:37.865Z</updated>
  <id>https://courage-kevin.github.io/</id>
  
  <author>
    <name>Courage-Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java常用API小Demo</title>
    <link href="https://courage-kevin.github.io/2020/02/06/Java%E5%B8%B8%E7%94%A8API%E5%B0%8FDemo/"/>
    <id>https://courage-kevin.github.io/2020/02/06/Java%E5%B8%B8%E7%94%A8API%E5%B0%8FDemo/</id>
    <published>2020-02-06T08:28:18.000Z</published>
    <updated>2020-02-06T08:54:37.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h1><p>&emsp;获取给定位置对应的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            0123456789012345</span></span><br><span class="line">String str = <span class="string">"thinking in java"</span>;</span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">10</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断回文            0 1 2 3  5 6 7 8</span></span><br><span class="line">String line = <span class="string">"上海自来水自来海上"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;line.length()/<span class="number">2</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(line.charAt(i) !=</span><br><span class="line">   line.charAt(line.length()-<span class="number">1</span>-i)</span><br><span class="line">) &#123;</span><br><span class="line">System.out.print(<span class="string">"不"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"是回文!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h1><p>&emsp;获取给定字符串在当前字符串中的位置，若当前字符串中不含有给定内容则返回值为-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexOfDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            0123456789012345</span></span><br><span class="line">String str = <span class="string">"thinking in java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = str.indexOf(<span class="string">"in"</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定位置开始检索第一次出现指定内容的位置</span></span><br><span class="line">index = str.indexOf(<span class="string">"in"</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检索最后一次出现指定内容的位置</span></span><br><span class="line">index = str.lastIndexOf(<span class="string">"in"</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lenght"><a href="#lenght" class="headerlink" title="lenght"></a>lenght</h1><p>&emsp;获取当前字符串的长度(字符个数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LengthDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"我爱java"</span>;</span><br><span class="line"><span class="keyword">int</span> len = str.length();</span><br><span class="line">System.out.println(<span class="string">"len:"</span>+len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="startsWith-endsWith"><a href="#startsWith-endsWith" class="headerlink" title="startsWith,endsWith"></a>startsWith,endsWith</h1><p>&emsp;判断字符串是否是以给定的字符串开始或结尾的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartsWithDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"thinking in java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> starts = str.startsWith(<span class="string">"thin"</span>);</span><br><span class="line">System.out.println(starts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> ends= str.endsWith(<span class="string">"ava"</span>);</span><br><span class="line">System.out.println(ends);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>&emsp;String是不变对象。JVM对String有一个优化，即:常量池,当使用字面量形式创建字符串对象时，JVM会将其缓存在常量池中，当再次使用该字面量创建字符串对象时即重用对象，避免内存中堆积大量内容一样的字符串对象，减少内存开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字面量  直接量</span></span><br><span class="line">String s1 = <span class="string">"123abc"</span>;</span><br><span class="line">String s2 = <span class="string">"123abc"</span>;</span><br><span class="line">String s3 = <span class="string">"123abc"</span>;</span><br><span class="line"><span class="comment">//s2,s3重用了s1创建的对象</span></span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line">System.out.println(s1==s3);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 字符串为不变对象</span></span><br><span class="line"><span class="comment"> * 即:字符串一旦创建，内容是不可以改变的，若想</span></span><br><span class="line"><span class="comment"> * 改变内容一定会创建新对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(s1);<span class="comment">//123abc!</span></span><br><span class="line">System.out.println(s2);<span class="comment">//123abc</span></span><br><span class="line">System.out.println(s1==s2);<span class="comment">//不再相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里发挥了编译器的一个特性:</span></span><br><span class="line"><span class="comment"> * 编译器在编译源代码时，若发现一个计算表达式</span></span><br><span class="line"><span class="comment"> * 参与运算的内容是确定值时，会在编译期间直接</span></span><br><span class="line"><span class="comment"> * 进行计算，并将计算结果编译到class文件中。避免</span></span><br><span class="line"><span class="comment"> * JVM每次执行程序时再做运算，从而提高性能。</span></span><br><span class="line"><span class="comment"> * 如下代码，编译器编译后改为了:</span></span><br><span class="line"><span class="comment"> * String s4 = "123abc";</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String s4 = <span class="string">"123"</span>+<span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s4);<span class="comment">//123abc</span></span><br><span class="line">System.out.println(s2==s4);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String s5 = <span class="string">"123"</span>;</span><br><span class="line">String s6 = s5 + <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s6);<span class="comment">//123abc</span></span><br><span class="line">System.out.println(s2==s6);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h1><p>&emsp;截取指定范围内的字符串 String substring(int start,int end)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubStringDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            01234567890</span></span><br><span class="line">String str = <span class="string">"www.tedu.cn"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * java api中有一个特点，通常使用两个数字表示</span></span><br><span class="line"><span class="comment"> * 范围时，都是"含头不含尾"的.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String sub = str.substring(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(sub);<span class="comment">//tedu</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一个参数的为从指定位置截取到字符串末尾</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sub = str.substring(<span class="number">4</span>);</span><br><span class="line">System.out.println(sub);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ToUpperCase"><a href="#ToUpperCase" class="headerlink" title="ToUpperCase"></a>ToUpperCase</h1><p>&emsp;将当前字符串中的英文部分转换为全大写或全小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToUpperCaseDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"我爱Java"</span>;</span><br><span class="line"></span><br><span class="line">String upper = str.toUpperCase();</span><br><span class="line">System.out.println(upper);</span><br><span class="line"></span><br><span class="line">String lower = str.toLowerCase();</span><br><span class="line">System.out.println(lower);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h1><p>&emsp;去除当前字符串两边的空白字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrimDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"  hello"</span>;</span><br><span class="line">String trim = str.trim();</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(trim);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h1><p>&emsp;字符串提供了一组重载的valueOf方法。可以将其他类型转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">123</span>;</span><br><span class="line">String str = String.valueOf(d);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//任何内容和字符串连接结果也能转换为字符串</span></span><br><span class="line">str = d + <span class="string">""</span>;</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dou = <span class="number">123.123</span>;</span><br><span class="line">String str2 = String.valueOf(dou);</span><br><span class="line">System.out.println(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="trim-1"><a href="#trim-1" class="headerlink" title="trim"></a>trim</h1><p>&emsp;去除当前字符串两边的空白字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrimDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"  hello"</span>;</span><br><span class="line">String trim = str.trim();</span><br><span class="line">System.out.println(str);</span><br><span class="line">System.out.println(trim);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Matches"><a href="#Matches" class="headerlink" title="Matches"></a>Matches</h1><p>&emsp;字符串支持正则表达式方法一: 使用给定的正则表达式验证当前字符串是否符合格式要求,符合则返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String email = <span class="string">"fancq@tedu.cn"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 邮箱的正则表达式</span></span><br><span class="line"><span class="comment"> * \w+@[a-zA-Z0-9]+(\.[a-zA-Z]+)+</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String regex = <span class="string">"\\w+@[a-zA-Z0-9]+(\\.[a-zA-Z]+)+"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = email.matches(regex);</span><br><span class="line"><span class="keyword">if</span>(match) &#123;</span><br><span class="line">System.out.println(<span class="string">"是邮箱!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"不是邮箱!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h1><p>&emsp;字符串支持正则表达式方法三:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"abc123def456ghi"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将当前字符串中的数字部分替换为"#NUMBER#"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">"#NUMBER#"</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h1><p>&emsp; 字符串支持正则表达式方法二: 将当前字符串中按照满足正则表达式的部分进行拆分，并将拆分出的每部分以一个字符串数组形式返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"abc123def456ghi"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 按照数字部分拆分，得到所有的字母部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] arr = str.split(<span class="string">"[0-9]+"</span>);</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果连续匹配了两次要拆分的内容时，中间会拆分</span></span><br><span class="line"><span class="comment"> * 出一个空字符串，但是若在字符串末尾连续匹配则</span></span><br><span class="line"><span class="comment"> * 所有拆分出的空字符串都会被忽略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str = <span class="string">"abc,,,def,ghi,,,,,,,,,,,,,,,,,,,"</span>;</span><br><span class="line">arr = str.split(<span class="string">","</span>);</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><ol><li>StringBuilder是专门设计用来编辑字符串内容的API。由于String不适合频繁修改，所以在实际开发中如果有经常，修改字符串的操作时，可以使用StringBuilder来完成。</li><li>StringBuilder内部维护一个可变的字符数组，所以修改的过程中资源开销小。并且提供了对应的操作:增，删，改，插</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"好好学习java"</span>;</span><br><span class="line"><span class="comment">//默认方式创建内部表示一个空字符串:""</span></span><br><span class="line"><span class="comment">//StringBuilder builder = new StringBuilder();</span></span><br><span class="line"><span class="comment">//创建时表示给定字符串内容</span></span><br><span class="line">StringBuffer builder = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 好好学习java</span></span><br><span class="line"><span class="comment"> * 好好学习java,为了找个好工作!</span></span><br><span class="line"><span class="comment"> * append:将指定内容追加到当前字符串末尾</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.append(<span class="string">",为了找个好工作!"</span>);</span><br><span class="line">str = builder.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 好好学习java,为了找个好工作!</span></span><br><span class="line"><span class="comment"> * 好好学习java,就是为了改变世界!</span></span><br><span class="line"><span class="comment"> * replace:将指定范围内的字符串替换为给定内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.replace(<span class="number">9</span>, <span class="number">16</span>, <span class="string">"就是为了改变世界"</span>);</span><br><span class="line">str = builder.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 好好学习java,就是为了改变世界!</span></span><br><span class="line"><span class="comment"> * ,就是为了改变世界!</span></span><br><span class="line"><span class="comment"> * delete:删除指定范围内的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.delete(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">str = builder.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ,就是为了改变世界!</span></span><br><span class="line"><span class="comment"> * 活着,就是为了改变世界!</span></span><br><span class="line"><span class="comment"> * insert:将指定内容插入到指定位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">builder.insert(<span class="number">0</span>, <span class="string">"活着"</span>);</span><br><span class="line">str = builder.toString();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="StringBuilder效率测试"><a href="#StringBuilder效率测试" class="headerlink" title="StringBuilder效率测试"></a>StringBuilder效率测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000000</span>;i++) &#123;</span><br><span class="line">builder.append(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"执行完毕!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>&emsp;包装类是为了解决基本类型不能直接参与面向对象开发的问题，其中6个数字类型的包装类都继承自java.lang.Number。其余两个直接继承自Object，Number是一个抽象类，定义了数字类型包装类公有的行为，允许在数字类型之间互转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">128</span>;</span><br><span class="line"><span class="comment">//      将基本类型转换为包装类</span></span><br><span class="line"><span class="comment">//Integer i1 = new Integer(d);</span></span><br><span class="line"><span class="comment">//Integer i2 = new Integer(d);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从基本类型转换为包装类建议使用valueOf方法:</span></span><br><span class="line">Integer i1 = Integer.valueOf(d);</span><br><span class="line">Integer i2 = Integer.valueOf(d);</span><br><span class="line"></span><br><span class="line">System.out.println(i1==i2);<span class="comment">//false</span></span><br><span class="line">System.out.println(i1.equals(i2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dou = <span class="number">1.0</span>;</span><br><span class="line">Double dou1 = Double.valueOf(dou);</span><br><span class="line">Double dou2 = Double.valueOf(dou);</span><br><span class="line">System.out.println(dou1==dou2);</span><br><span class="line">System.out.println(dou1.equals(dou2));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将包装类转换为基本类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">int</span> in = i1.intValue();</span><br><span class="line"> System.out.println(in);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> dd = i1.doubleValue();</span><br><span class="line"> System.out.println(dd);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可能出现溢出问题</span></span><br><span class="line"> <span class="keyword">byte</span> b = i1.byteValue();</span><br><span class="line"> System.out.println(b);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 数字类型的包装类都支持两个常量:</span></span><br><span class="line"><span class="comment">  * MAX_VALUE,MIN_VALUE</span></span><br><span class="line"><span class="comment">  * 用于表示其对应的基本类型数据的取值范围</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="comment">//int最大值与最小值?</span></span><br><span class="line"> <span class="keyword">int</span> imax = Integer.MAX_VALUE;</span><br><span class="line"> System.out.println(imax);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> imin = Integer.MIN_VALUE;</span><br><span class="line"> System.out.println(imin);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">long</span> lmax = Long.MAX_VALUE;</span><br><span class="line"> System.out.println(lmax);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h1><p>&emsp;JDK5发布时，推出了一个特性:自动拆装箱,允许编译器在编译源代码时将基本类型与引用类型之间互相,赋值时补全代码自动进行转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 触发了编译器自动拆箱特性:</span></span><br><span class="line"><span class="comment"> * 编译器会将下面的代码改为</span></span><br><span class="line"><span class="comment"> * int d = new Integer(1).intValue();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 触发了自动装箱特性:</span></span><br><span class="line"><span class="comment"> * 编译器会改为:</span></span><br><span class="line"><span class="comment"> * Integer i = Integer.valueOf(d);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer i = d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h1><p>&emsp;包装类提供了一个静态方法:parseXXX(String str)，可以将给定的字符串转换为对应的基本类型，前提是该字符串，内容要正确的描述基本类型可以保存的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> d = Integer.parseInt(str);</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dou = Double.parseDouble(str);</span><br><span class="line">System.out.println(dou);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Object常用方法"><a href="#Object常用方法" class="headerlink" title="Object常用方法"></a>Object常用方法</h1><p>&emsp;使用当前类测试Object常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写toString方法。</span></span><br><span class="line"><span class="comment"> * toString方法是一个非常常用的方法，很多API的操作</span></span><br><span class="line"><span class="comment"> * 都会间接调用该方法。</span></span><br><span class="line"><span class="comment"> * 方法的目的是将当前对象转换为字符串，具体返回的字符串</span></span><br><span class="line"><span class="comment"> * 格式没有固定要求，遵循的原则是返回的内容中包含当前</span></span><br><span class="line"><span class="comment"> * 对象的属性信息，可以通过该字符串的内容直观反应出当前</span></span><br><span class="line"><span class="comment"> * 对象的内容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//(1,2)</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"("</span>+x+<span class="string">","</span>+y+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object定义的equals方法的设计意图是比较两个对象的</span></span><br><span class="line"><span class="comment"> * 内容是否相同。</span></span><br><span class="line"><span class="comment"> * 如果不重写该方法，那么Object内部是用"=="比较的，</span></span><br><span class="line"><span class="comment"> * 这样就失去了equals比较的意义了。所以当我们需要调用</span></span><br><span class="line"><span class="comment"> * 一个类的equals时，该方法就应当重写。</span></span><br><span class="line"><span class="comment"> * 注:java提供的类大部分都已经重写过了。只有我们自定义</span></span><br><span class="line"><span class="comment"> * 的类需要自行重写。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * p.equals(p2)</span></span><br><span class="line"><span class="comment"> * this:p</span></span><br><span class="line"><span class="comment"> * o:p2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>==o) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> Point) &#123;</span><br><span class="line">Point p = (Point)o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.x==p.x&amp;&amp;<span class="keyword">this</span>.y==p.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//创建一个RAF用于读取原文件</span></span><br><span class="line">RandomAccessFile src</span><br><span class="line">= <span class="keyword">new</span> RandomAccessFile(<span class="string">"mv.mp4"</span>,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再创建另一个RAF用于向复制文件中写</span></span><br><span class="line">RandomAccessFile desc</span><br><span class="line">= <span class="keyword">new</span> RandomAccessFile(<span class="string">"mv_cp.mp4"</span>,<span class="string">"rw"</span>);</span><br><span class="line"><span class="comment">//用于记录每次读取到的字节</span></span><br><span class="line"><span class="keyword">int</span> d = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 循环从原文件中读取每一个字节，只要没有读取到</span></span><br><span class="line"><span class="comment"> * 文件末尾，就将读取到的字节写入到复制文件中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">while</span>( (d = src.read())  != -<span class="number">1</span>  ) &#123;</span><br><span class="line">desc.write(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"复制完毕!耗时:"</span>+(end-start)+<span class="string">"ms"</span>);</span><br><span class="line"></span><br><span class="line">src.close();</span><br><span class="line">desc.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java-io-RandomAccessFile类"><a href="#java-io-RandomAccessFile类" class="headerlink" title="java.io.RandomAccessFile类"></a>java.io.RandomAccessFile类</h1><p>&emsp; 用来读写文件数据的类，其基于指针对文件数据进行读写操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * RandomAccessFile创建有两种模式:</span></span><br><span class="line"><span class="comment"> * r:只读模式，只读取文件数据，并不会写入内容</span></span><br><span class="line"><span class="comment"> * rw:读写模式，对文件既可以读也可以写。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 常见构造方法:</span></span><br><span class="line"><span class="comment"> * RandomAccessFile(String path,String mode)</span></span><br><span class="line"><span class="comment"> * RandomAccessFile(File file,String mode)</span></span><br><span class="line"><span class="comment"> * mode:创建的模式(r,rw)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对当前目录下的raf.dat文件进行读写操作</span></span><br><span class="line"><span class="comment"> * 对于"rw"模式创建时，若指定的文件不存在时会自动</span></span><br><span class="line"><span class="comment"> * 创建出来，若为"r"只读模式时，若指定的文件不存在</span></span><br><span class="line"><span class="comment"> * 则会直接抛出异常:FileNotFoundException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"raf.dat"</span>,<span class="string">"rw"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * void write(int d)</span></span><br><span class="line"><span class="comment"> * 向文件中写入1个字节，写入的是给定的int值对应的</span></span><br><span class="line"><span class="comment"> * 2进制的"低八位"</span></span><br><span class="line"><span class="comment"> *                            vvvvvvvv</span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000000 11111111</span></span><br><span class="line"><span class="comment"> * 00000000 00000000 00000001 00000000</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 00000001 00000010</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">raf.write(<span class="number">1</span>);</span><br><span class="line">raf.write(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"写出完毕!"</span>);</span><br><span class="line"></span><br><span class="line">raf.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><p>&emsp;使用File创建一个新文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在当前目录下新建一个文件test.txt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"./test.txt"</span>);</span><br><span class="line"><span class="comment">//判断File表示的文件或目录是否已经真实存在了</span></span><br><span class="line"><span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line"><span class="comment">//将File表示的文件创建出来</span></span><br><span class="line">file.createNewFile();</span><br><span class="line">System.out.println(<span class="string">"文件创建成功!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"文件已存在!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>&emsp;删除一个文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 删除当前目录下的test.txt</span></span><br><span class="line"><span class="comment"> * "./"可以忽略不写，默认就是当前目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"test.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(file.exists()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">System.out.println(<span class="string">"文件已删除!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"文件不存在!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><p>&emsp;创建一个目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在当前目录下新建一个目录:demo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"demo"</span>);</span><br><span class="line"><span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line"><span class="comment">//创建该目录</span></span><br><span class="line">dir.mkdir();</span><br><span class="line">System.out.println(<span class="string">"目录已创建!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"目录已存在!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h1><p>&emsp;创建一个多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *在当前目录下新建目录:</span></span><br><span class="line"><span class="comment"> *./a/b/c/d/e/f</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">"./a/b/c/d/e/f"</span>);</span><br><span class="line"><span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mkdirs会将所有不存在的父目录一同创建出来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dir.mkdirs();</span><br><span class="line">System.out.println(<span class="string">"目录已创建!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"目录已存在!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;charAt&quot;&gt;&lt;a href=&quot;#charAt&quot; class=&quot;headerlink&quot; title=&quot;charAt&quot;&gt;&lt;/a&gt;charAt&lt;/h1&gt;&lt;p&gt;&amp;emsp;获取给定位置对应的字符&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java基础知识" scheme="https://courage-kevin.github.io/categories/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Http协议基础知识</title>
    <link href="https://courage-kevin.github.io/2020/02/06/Http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2020/02/06/Http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-02-06T07:59:51.000Z</published>
    <updated>2020-02-06T08:27:30.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><h2 id="什么是http协议"><a href="#什么是http协议" class="headerlink" title="什么是http协议"></a>什么是http协议</h2><p>当在上网浏览网页的时候，浏览器和服务器之间就会通过Http在Internet上进行数据的发送和接受。<br>HTTP协议规定了浏览器和服务器之间通信的方式，也可以说是通信的规则。是应用层协议，是一个基于请求/响应模式的，无状态的协议。</p><blockquote><p>具体说，HTTP协议中主要规定了两个内容：</p><ol><li>规定了浏览器该如何给服务器发送请求信息（即请求信息的格式）</li><li>同时也规定了服务器该如何给浏览器做响应信息（即响应信息的格式）   </li></ol></blockquote><hr><h2 id="Http1-0"><a href="#Http1-0" class="headerlink" title="Http1.0"></a>Http1.0</h2><blockquote><p>当连接建立之后，浏览器发送一个请求，服务器回应一个消息，之后连接就被关闭。当浏览器下一次请求的时候，需要重新建立新的连接，显然这种需要不断建立连接的通信方式开销较大。早期的web页面通常只包含HTML文件，因此即使建立连接的开销比较大，也不会有太大的影响。而现在的web页面通常包含多种资源，（图片，动画，声音），每获取一种资源，就建立一次连接。这样就增加了HTTP服务器的开销，造成了Internet上的信息阻塞。</p></blockquote><hr><h2 id="Http1-1"><a href="#Http1-1" class="headerlink" title="Http1.1"></a>Http1.1</h2><blockquote><p>因此在Http1.1版本中，给出了一个持续连接的机制，并将其作为1.1中建立连接的缺省行为，通过这种连接，浏览器可以建立一个连接之后，发送请求并得到响应，然后继续发送请求并在此得到回应，而且客户端还可以发送流水线请求，也就是说，客户端可以连续发送多个请求，而不用等待每一个响应的到来。</p></blockquote><hr><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><blockquote><ol><li>客户端与服务器端建立连接前，客户端会向服务器发送第一条消息，询问服务器端是否准备好了。第一次握手</li><li>服务器端收到客户端发来的询问之后，会给客户端发送一条消息，告诉客户端已经准备好了。第二次握手</li><li>当客户端在收到服务器端发过来的消息之后，会在此确认，客户端会在向服务器发起响应确认准备好了，第三次握手。之后建立连接</li></ol></blockquote><hr><h2 id="Http工作时遵循的基本原则-了解"><a href="#Http工作时遵循的基本原则-了解" class="headerlink" title="Http工作时遵循的基本原则(了解):"></a>Http工作时遵循的基本原则(了解):</h2><blockquote><ol><li>基于请求响应模型</li><li>一次请求只对应一次响应</li><li>只能是浏览器向服务器发送请求, 服务器只能等待浏览器的请求, 再根据请求做出回应</li></ol></blockquote><hr><h2 id="GET请求和POST请求方式的区别："><a href="#GET请求和POST请求方式的区别：" class="headerlink" title="GET请求和POST请求方式的区别："></a>GET请求和POST请求方式的区别：</h2><p>两者之间的区别主要体现在请求参数发送过程的不相同</p><blockquote><p>GET提交: 通过请求行拼接参数将数据发送给服务器<br>&emsp;1.通过地址栏携带参数, 相对不安全<br>&emsp;2.通过地址栏发送数据, 数据量不能太大(不能超过1kb或者是4kb);  </p></blockquote><blockquote><p>POST提交: 通过请求实体内容携带参数, 数据不会显示在地址栏<br>&emsp;1.参数不会出现地址栏, 相对更安全<br>&emsp;2.数据通过请求实体内容发送, 数据量理论上没有限制.</p></blockquote><hr><h2 id="服务器种类："><a href="#服务器种类：" class="headerlink" title="服务器种类："></a>服务器种类：</h2><blockquote><p>Tomcat、Resin、Jetty、Weblogic、WebSphere、JBoss</p></blockquote><blockquote><p>B/S：Browser Server 浏览器服务器模型  （不需要下载客户端的） 京东、淘宝、网页游戏。<br>优点：不需要下载客户端程序，使用浏览器可以直接访问，程序的升级操作是在服务器端进行的。<br>缺点：浏览器具有一定的局限性，页面的展示差，页面的数据需要从服务器实时获取，对网速的依赖很高</p></blockquote><blockquote><p>C/S：Client Server客户端服务器模型       （需要下载客户端的） QQ  LOL 梦幻西游 。<br>优点：客户端可以任意设计，页面的展示能力强。由于大量资源已经保存在了客户端，对服务器的交互仅仅是一些数据的变化，对于网速的依赖很低。<br>缺点：第一次使用时需要下载客户端程序，一旦程序需要升级操作，所有的客户端程序都需要升级。</p></blockquote><hr><h2 id="XML解析方式："><a href="#XML解析方式：" class="headerlink" title="XML解析方式："></a>XML解析方式：</h2><h3 id="DOM解析："><a href="#DOM解析：" class="headerlink" title="DOM解析："></a>DOM解析：</h3><blockquote><p>原理：<br>解析器将整个xml文档加载进内存，保存为一颗Document的对象树，<br>通过Document对象，得到树上的节点对象，对每个对象提供增删改查操作对应的方法<br>优点：<br>&emsp;1.可以十分方便对节点进行增删改查操作，<br>&emsp;2.解析一次即可重复使用数据由于在内存中保存了文档结构树，<br>缺点：<br>&emsp;1.如果文档较大，占用内存空间，甚至内存溢出<br>&emsp;2.将整个文档解析完才能操作，相对耗费时间，效率低</p></blockquote><h3 id="SAX解析："><a href="#SAX解析：" class="headerlink" title="SAX解析："></a>SAX解析：</h3><blockquote><p>原理：解析器逐行扫描xml文档，利用处理器接口中的方法进行解析<br>优点：<br>&emsp;1.无需将整个xml文档加载到内存，占用内存小<br>&emsp;2.由于逐行解析，遇到需要内容停下来处理，效率高<br>缺点：<br>&emsp;1.每次需要数据，都要重新解析<br>&emsp;2.只能读取数据，不能做增删改操作。   </p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Http协议&quot;&gt;&lt;a href=&quot;#Http协议&quot; class=&quot;headerlink&quot; title=&quot;Http协议&quot;&gt;&lt;/a&gt;Http协议&lt;/h1&gt;&lt;h2 id=&quot;什么是http协议&quot;&gt;&lt;a href=&quot;#什么是http协议&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="http" scheme="https://courage-kevin.github.io/categories/http/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Servlet基础知识</title>
    <link href="https://courage-kevin.github.io/2018/02/15/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2018/02/15/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2018-02-15T12:55:43.000Z</published>
    <updated>2020-02-06T09:11:14.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h2><blockquote><ol><li>Servlet本质上一段java程序</li><li>Servlet程序无法独立运行，必须放在服务器中，由服务器调用才可以执行！</li><li>Servlet的作用是：接受请求、处理请求、将结果响应给浏览器。</li></ol></blockquote><h2 id="Servlet的作用"><a href="#Servlet的作用" class="headerlink" title="Servlet的作用"></a>Servlet的作用</h2><blockquote><p>Servlet的作用就是处理请求，服务器会将接受到的请求交给Servlet处理。这个过程为：</p><ol><li>客户端发送请求至服务器端；</li><li>服务器将请求信息交给 Servlet 处理；</li><li>最终处理的结果交给服务器；</li><li>服务器将结果响应给客户端。</li></ol></blockquote><h2 id="Servlet调用过程"><a href="#Servlet调用过程" class="headerlink" title="Servlet调用过程"></a>Servlet调用过程</h2><blockquote><p><img src="/images/servlet%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="avatar"></p><ol><li>浏览器向服务器发起请求</li><li>首先会根据请求头信息获知浏览器访问的是那个虚拟主机</li><li>然后根据请求行中的路径资源获知浏览器访问的是哪一个web应用</li><li>根据请求行中的资源路径获知访问的是哪一个资源</li><li>根据获取到的资源路径到web.项目文件中去匹配真实路径，创建servlet实例并调用service方法</li><li>调用service方法前，底层会创建两个对象，Requset、response，通过request获取请求相关信息</li><li>通过response想浏览器发送响应数据，然后按照Http协议规定的格式，组织成相应消息，最后发送给浏览器</li></ol></blockquote><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><blockquote><p>&emsp;Servlet在第一次被访问时创建Servlet实例, 创建之后服务器会立即调用init方法进行初始化的操作, 创建之后, Servlet实例会一直驻留在服务器的内存中, 为后续的请求服务. 只要有请求来访问这个Servlet, 服务器就会调用service方法来处理请求, 直到服务器关闭, 或者WEB应用被移出容器, 随着WEB应用的销毁, Servlet实例也会跟着销毁, 在销毁之前服务器会调用destroy方法进行善后的处理。</p></blockquote><h2 id="请求、转发、域对象"><a href="#请求、转发、域对象" class="headerlink" title="请求、转发、域对象"></a>请求、转发、域对象</h2><blockquote><ol><li>域对象：<br>&emsp;能够在指定的范围内, 利用自身的map实现数据的共享  </li></ol></blockquote><blockquote><ol start="2"><li>请求转发：<br>&emsp;是指定服务器中的某一个资源（Servlet或JSP）在处理请求的过程中，将请求转发给一个其他的资源，让其他资源来处理请求转发只能在同一个Web应用内部的两个资源之间进行跳转, 不可以是不同的Web应用或者不同的服务器中进行跳转,请求转发是一次请求，一次响应，转发前后地址栏地址不会发生变化  </li></ol></blockquote><blockquote><ol start="3"><li>重定向：<br>&emsp;是指当用户浏览某个网址时，将其导向到另一个网址的技术。重定向和定时刷新都是两次请求两次响应，重定向和定时刷新前后，地址栏地址都会发生变化</li></ol></blockquote><blockquote><ol start="4"><li>总结:<br>定时刷新和重定向都是两次请求, 两次响应<br>定时刷新和重定向跳转前后, 地址栏地址都会发生变化。<br>定时刷新和重定向在跳转时没有限制, 既可以在同一个Web应用内部的资源之间进行跳转, 也可以在不同的Web应用或者不同的主机之间进行跳转<br>定时刷新和重定向不同的是, 重定向是立即跳转, 中间没有时间间隔, 而定时刷新可以指定多少秒之后再进行跳转, 在跳转之前, 可以输出内容到浏览器, 提示用户。</li></ol></blockquote><h3 id="EL表达式的作用"><a href="#EL表达式的作用" class="headerlink" title="EL表达式的作用:"></a>EL表达式的作用:</h3><blockquote><p>&emsp;在Web开发中, 实现很多功能的时候, 都是由Servlet接收请求、处理请求，但是处理的结果应该交给JSP显示，此时我们可以在Servlet中将请求处理的结果存入request域中，再通过转发将Request域带到JSP中，再通过EL表达式将request域中的数据取出来, 显示在网页上.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;Servlet概述&quot;&gt;&lt;a href=&quot;#Servlet概述&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Servlet基础知识" scheme="https://courage-kevin.github.io/categories/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>JDBC知识总结</title>
    <link href="https://courage-kevin.github.io/2018/02/08/Jdbc%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://courage-kevin.github.io/2018/02/08/Jdbc%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2018-02-08T14:52:05.000Z</published>
    <updated>2020-02-06T08:07:20.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h1><h2 id="概念：Java-DataBase-Connectivity-Java-数据库连接，-Java语言操作数据库"><a href="#概念：Java-DataBase-Connectivity-Java-数据库连接，-Java语言操作数据库" class="headerlink" title="概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库"></a>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</h2><ul><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><p>开发步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入驱动jar包</span></span><br><span class="line"><span class="comment">//2.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//4.定义sql语句</span></span><br><span class="line">String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line"><span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//6.执行sql</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//7.处理结果</span></span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//8.释放资源</span></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h1 id="详解各个对象："><a href="#详解各个对象：" class="headerlink" title="详解各个对象："></a>详解各个对象：</h1><ol><li>DriverManager：驱动管理对象,用于注册驱动，告诉程序该使用哪一个数据库驱动jar,获取数据库连接。</li><li>Connection：数据库连接对象:获取执行sql的对象,管理事务</li><li>Statement：执行sql的对象            </li><li>ResultSet：结果集对象,封装查询结果</li><li>PreparedStatement：执行sql的对象<ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li></ol></li></ol><h1 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h1><h2 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">//读取资源文件，获取值。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 创建Properties集合类。</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span></span><br><span class="line">        ClassLoader classLoader = JDBCUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        URL res  = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">        String path = res.getPath();</span><br><span class="line">        System.out.println(path);<span class="comment">///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span></span><br><span class="line">        <span class="comment">//2. 加载文件</span></span><br><span class="line">        <span class="comment">// pro.load(new FileReader("D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties"));</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 获取数据，赋值</span></span><br><span class="line">        url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">        password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">        <span class="comment">//4. 注册驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><pre><code class="java">    <span class="comment">/**</span><span class="comment">     * 释放资源</span><span class="comment">     * <span class="doctag">@param</span> stmt</span><span class="comment">     * <span class="doctag">@param</span> conn</span><span class="comment">     */</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span></span>{        <span class="keyword">if</span>( rs != <span class="keyword">null</span>){            <span class="keyword">try</span> {                rs.close();            } <span class="keyword">catch</span> (SQLException e) {                e.printStackTrace();            }        }        <span class="keyword">if</span>( stmt != <span class="keyword">null</span>){            <span class="keyword">try</span> {                stmt.close();            } <span class="keyword">catch</span> (SQLException e) {                e.printStackTrace();            }        }        <span class="keyword">if</span>( conn != <span class="keyword">null</span>){            <span class="keyword">try</span> {                conn.close();            } <span class="keyword">catch</span> (SQLException e) {                e.printStackTrace();            }        }    }}</code></pre><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol><p>​            </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDBC：&quot;&gt;&lt;a href=&quot;#JDBC：&quot; class=&quot;headerlink&quot; title=&quot;JDBC：&quot;&gt;&lt;/a&gt;JDBC：&lt;/h1&gt;&lt;h2 id=&quot;概念：Java-DataBase-Connectivity-Java-数据库连接，-Java语言操作数据库
      
    
    </summary>
    
    
      <category term="Jdbc基础知识" scheme="https://courage-kevin.github.io/categories/Jdbc%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识总结</title>
    <link href="https://courage-kevin.github.io/2018/02/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://courage-kevin.github.io/2018/02/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2018-02-05T15:04:33.000Z</published>
    <updated>2020-02-06T06:31:44.105Z</updated>
    
    <content type="html"><![CDATA[<p>Java基础知识整理</p><a id="more"></a><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h2 id="Java编译运行过程"><a href="#Java编译运行过程" class="headerlink" title="Java编译运行过程"></a>Java编译运行过程</h2><ol><li>编译期：java源文件，经编译生成.class文件</li><li>运行期：JVM加载.class文件，并运行class</li><li>特点：跨平台，一次编译到处使用</li></ol><h2 id="名词释义"><a href="#名词释义" class="headerlink" title="名词释义"></a>名词释义</h2><ol><li>JVM：java虚拟机，作用就是加载.class文件，运行.class文件</li><li>JRE： java开发环境，除了包含JVM外，还包含java程序运行所必须的环境</li><li>JDK：java开发工具包，除了包含JRE外，还包含编译，运行等命令工具3. </li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th><strong>byte类型</strong></th><th><strong>8位</strong></th><th><strong>范围：-128~127</strong></th></tr></thead><tbody><tr><td><strong>short 类型</strong></td><td><strong>16位</strong></td><td><strong>范围：-32768~32767</strong></td></tr><tr><td><strong>char  类型</strong></td><td><strong>16位</strong></td><td><strong>范围：\u0000~\u65535</strong></td></tr><tr><td><strong>int类型</strong></td><td><strong>32位</strong></td><td><strong>范围：-2147483648~2147483647</strong></td></tr><tr><td><strong>long 类型</strong></td><td><strong>64位</strong></td><td><strong>范围：很大很大 2^63</strong></td></tr><tr><td><strong>float 类型</strong></td><td><strong>32位</strong></td><td></td></tr><tr><td><strong>double 类型</strong></td><td><strong>64位</strong></td><td></td></tr><tr><td><strong>boolean 类型</strong></td><td><strong>8位</strong></td><td></td></tr></tbody></table><h2 id="基本类型自动转换"><a href="#基本类型自动转换" class="headerlink" title="基本类型自动转换"></a>基本类型自动转换</h2><ol><li>从小到大依次为：byte &lt; short &lt; int &lt; long &lt; float &lt; double</li><li>自动类型转换：小类型转大类型 （小杯子往大杯子倒水）</li><li>强制类型转换：大类型转小类型 （大杯子往小杯子倒数）</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li>算数：    +，-，*，/，%，++，–</li><li>关系：&gt;,&lt;,&gt;=,&lt;=,==,!=,boolean</li><li>逻辑：&amp;&amp;，||，!boolean</li><li>赋值：=，+=，-=，*=，/=，%=</li><li>字符连接运算符：+</li><li>条件/三目运算：boolean?数1:数2;</li></ol><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><ol><li>If</li><li>If…else</li><li>If…elss     if</li><li>Switch…case</li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li>while循环</li><li>do…while循环</li><li>for循环</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li>数组的定义：int [ ] arr =new int [ 10 ] </li><li>数组的初始化：int [ ] arr = new int [ ] </li><li>数组的访问：通过数组名.length可以获取数组的长度，也就是数组内元素的个数通过索引来访问数组元素，下标从0开始，最大到数组长度-1</li><li>数组遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[<span class="number">3</span>] = (<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);    <span class="comment">//正序输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(arr[i]);    <span class="comment">//倒序输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><table><thead><tr><th><strong>private</strong></th><th><strong>同类可见</strong></th><th><strong>可以修饰变量、方法</strong></th><th><strong>注意：不能修饰类(外部类)</strong></th></tr></thead><tbody><tr><td><strong>default</strong></td><td><strong>同包同类可见</strong></td><td><strong>可以修饰类、接口、变量、方法</strong></td><td></td></tr><tr><td><strong>protected</strong></td><td><strong>同包同类和所有子类可见</strong></td><td><strong>可以修饰变量、方法</strong></td><td><strong>注意不能修饰类(外部类)</strong></td></tr><tr><td><strong>public</strong></td><td><strong>所有类可见</strong></td><td><strong>可以修饰类、接口、变量、方法</strong></td><td></td></tr></tbody></table><h2 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h2><p>&emsp;为了实现某一些功能，java也提供了许多非访问修饰符</p><blockquote><p>static修饰符：</p><ol><li>static关键字修饰的变量称之为静态变量，无论一个类实例化多少对象，他的静态变量只有唯一的一个。</li><li>static关键字修饰的方法称之为静态方法，静态方法只能使用类的静态变量，不可以使用非静态变量。</li></ol></blockquote><blockquote><p>final修饰符：</p><ol><li>Final关键字可以修饰类，表示不能有子类。</li><li>Final关键字可以修饰变量，表示变量不能被修改，只能有唯一一次赋值。</li><li>Final关键字可以修饰方法，表示不能被子类覆盖重写。</li><li>Final关键字修饰引用类型变量，地址值不能变，但是对象的属性可以通过set方法改变。</li></ol></blockquote><blockquote><p>abstract修饰符：<font color=red>被abstract修饰的类和方法叫做抽象类和抽象方法</font>。</p><ol><li>抽象类：抽象类不能用来实例化对象，目的：是为了将来对该类进行扩充。</li><li>抽象方法：继承抽象类的子类必须实现父类的所有抽象方法，除非这个子类也是抽象类，</li><li>注意：如果一个类包含若干个抽象方法，那么该类必须声明为抽象类，抽象类不可以包含抽象方法。  </li></ol></blockquote><blockquote><p>抽象加单总结:</p><ol><li>抽象方法的意义：在于将方法的设计和方法的实现分离。</li><li>抽象类需要被继承，抽象类定义的抽象方法子类必须重写。</li><li>抽象类不能创建对象，但是可以包含构造方法，成员属性，普通方法。</li></ol></blockquote><hr><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>&emsp;一个事物的内部包含另外一个事物，就是一个类内部包含另外一个类，比如身体和心脏的关系，汽车和发动机的关系。</p><blockquote><h2 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h2><p>定义在类里面的类，叫做成员内部类。<br>使用成员内部类的两种方式:</p><ol><li>间接方式：在外部类的方法中，使用内部类，然后main只是调用外部类的方法。</li><li>直接方式：外部类名称.内部类名称<br>对象名 = new 外部类名称() . new 内部类名称(); (外部.内部)  </li></ol></blockquote><blockquote><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>&emsp;定在在方法里面的类，叫做局部内部类，局部内部类包含了匿名内部类。  </p></blockquote><blockquote><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>作用：如果接口的实现类，或者是父类的子类，只需要使用唯一一次，那么这种情况下，就可以省略该类的定义，改用匿名内部类。<br>定义格式：接口名称  对象名 = new 接口名称(){ //方法体中重写所有的抽象方法 }； </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Myinterface myinterface = <span class="keyword">new</span> Myinterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类方法执行"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myinterface.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h2><blockquote><p>类是一个模板，包含对象的属性，方法。<br>我们把它理解为造汽车的图纸，图纸包含了制造汽车的各个部件的尺寸，参数等。</p></blockquote><h2 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h2><blockquote><p>对象是类的一个实例。<br>我们可以对象理解为根据图纸制造出来的汽车。  </p></blockquote><h2 id="类和对象之间的关系？"><a href="#类和对象之间的关系？" class="headerlink" title="类和对象之间的关系？"></a>类和对象之间的关系？</h2><blockquote><p>汽车就好比一个对象，图纸就好比是一个类，有了图纸才能设计出汽车，换而言之也就是有了类才能创建对象（也叫实例）。  </p></blockquote><h2 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征?"></a>面向对象的特征?</h2><blockquote><p>记住并理解这重要的6个字，<font color=red><em>封装、继承、多态</em></font>&emsp;称之为面向对象的三大特征 。</p></blockquote><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><blockquote><h4 id="封装的概念："><a href="#封装的概念：" class="headerlink" title="封装的概念："></a>封装的概念：</h4><p>&emsp;面向对象的封装就是把描述一个对象的属性和行为的代码封装到一个类当中，属性用变量定义，行为用方法定义，然后运用访问修饰符，修饰成员变量及方法，就基本上实现了对象的封装。    </p></blockquote><blockquote><h4 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a>封装的好处：</h4><p>&emsp;封装的目标就是要实现软件内部的“高内聚、低耦合”，防止程序相互依赖而带来的变动的影响。解耦</p></blockquote><blockquote><h4 id="封装的总结："><a href="#封装的总结：" class="headerlink" title="封装的总结："></a>封装的总结：</h4><p>封装类，封装的就是对象的属性和行为。<br>封装方法，封装的就是具体业务逻辑功能的实现。<br>访问控制，访问修饰符（private、public….）用来封装具体的访问权限。</p></blockquote><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><blockquote><h4 id="封装的概念：-1"><a href="#封装的概念：-1" class="headerlink" title="封装的概念："></a>封装的概念：</h4><p>&emsp; 继承也是泛化（抽取共性）的过程，在开发中我们先将子类共有的属性及方法全部抽取到父类，然后通过子类去继承父类的属性及方法实现数据和方法的共享，这是类之间的一种关系，<font color=red>继承的好处就是提高了代码的可重用性和扩展性</font>。</p></blockquote><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><blockquote><h4 id="多态的概念"><a href="#多态的概念" class="headerlink" title="多态的概念"></a>多态的概念</h4><p>&emsp; 一个对象拥有多种形态，这就是多态，代码体现多态其实就是一句话，<font color=red>父类引用指向子类对象</font>  </p></blockquote><blockquote><h4 id="多态的格式和使用"><a href="#多态的格式和使用" class="headerlink" title="多态的格式和使用"></a>多态的格式和使用</h4><ol><li>父类名称  对象名称  =  new 子类名称（）；</li><li>接口名称  对象名称  =  new 实现类名称（）；</li></ol></blockquote><blockquote><h4 id="多态中访问成员变量的两种方式及规则"><a href="#多态中访问成员变量的两种方式及规则" class="headerlink" title="多态中访问成员变量的两种方式及规则"></a>多态中访问成员变量的两种方式及规则</h4><ol><li>直接通过对象名称访问成员变量：看等号左边是谁就优先用谁，没有则会往上寻找父类中是否存在该变量。</li><li>间接通过成员方法访问成员变量：看该方法属于谁就优先用谁，没有则会往上寻找父类中是否存在该变量。</li></ol></blockquote><blockquote><h4 id="多态中成员方法的访规则"><a href="#多态中成员方法的访规则" class="headerlink" title="多态中成员方法的访规则"></a>多态中成员方法的访规则</h4><ol><li>看等号右边new的是谁，就优先用谁的方法。没有则会找到父类的方法。</li></ol></blockquote><blockquote><h4 id="对比多态中成员变量和成员方法有何不同"><a href="#对比多态中成员变量和成员方法有何不同" class="headerlink" title="对比多态中成员变量和成员方法有何不同"></a>对比多态中成员变量和成员方法有何不同</h4><ol><li>成员变量：编译看左边，运行还看左边</li><li>成员方法：编译看左边，运行看右边。</li></ol></blockquote><blockquote><h4 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h4><p>&emsp; 比如Animal类有cat和dog两个子类，Animal有eat（）方法，cat和dog继承Animal也拥有了eat方法，但是狗和猫吃的东西不一样，有自己各自的方法。我们在写代码的时候  Animal  obj = new Dog();  并调用 obj.eat();  这里在编译时调用的时Animal类中的eat()方法，但是在程序运行的时候，会执行dog类中的eat()方法。new Cat();也是同理。这样就保证了等号左边的一致性，你new谁，在程序运行时，就调用谁的方法。一句话，编译看左边，运行看右边。<font color=red>多态的好处就是允许程序在运行的时候动态的创建对象，并调用对象的方法</font>。  </p></blockquote><blockquote><h4 id="对象向上转型"><a href="#对象向上转型" class="headerlink" title="对象向上转型"></a>对象向上转型</h4><p>&emsp; 父类引用指向子类对象。多态的写法就是向上转型。比如 将一个狗对象，当作父类动物对象来看待。<br>&emsp; 注意：向上转型的弊端，对象一旦向上转型为父类，那么就无法调用子类原本特有的方法。因为编译的时候根本无法通过对象点出来子类的方法，而只能调用父类的方法。</p></blockquote><blockquote><h4 id="对象的向下转型"><a href="#对象的向下转型" class="headerlink" title="对象的向下转型"></a>对象的向下转型</h4><p>&emsp; 进行还原动作，比如你将一个子类对象向上转型为父类对象，你还可以将该对象转换回来，比如将狗的实例转为动物的实例，在将动物实例转换回狗的实例 　<br>&emsp; Dog dog = (Dog) Animal();<br>&emsp; 但是如果你在向下转型的过程中，向上转型为动物对象的狗对象还原为一个猫对象，那么就回报错。一定要注意，向下转型的时候对象的原本类型是什么，可以借助 instance of 关键字。</p><h4 id="instance-of"><a href="#instance-of" class="headerlink" title="instance of"></a>instance of</h4><p>&emsp;可以判断一个父类引用的对象，本来是什么子类。可以帮助我们在写代码的过程中，安全的向下转型。</p></blockquote><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{            Animal animal = <span class="keyword">new</span> Dog();        <span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Dog){            Dog dog = (Dog) animal;            dog.eat();        }        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat){            Cat cat = (Cat) animal;            cat.eat();        }         }</code></pre><hr><h1 id="接口和抽象"><a href="#接口和抽象" class="headerlink" title="接口和抽象"></a>接口和抽象</h1><blockquote><h2 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h2><ol><li>抽象类不能直接new</li><li>必须需要子类实现抽象类</li><li>子类需要覆盖父类的抽象方法</li><li>创建子类进行使用  </li></ol></blockquote><blockquote><p>注意事项：</p><ol><li>抽象类可以有构造函数，是供子类创建对象时，初始化父类成员使用的。</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必须定义为抽象类。</li><li>抽象类的子类，必须重写子类中的所有抽象方法。否则编译报错。除非子类也是抽象类。  </li></ol></blockquote><blockquote><h2 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h2><p>&emsp;就是多个类的公共规范，接口是一种引用数据类型，最重要的内容就是其中的抽象方法（usb接口，插座）  </p></blockquote><blockquote><h2 id="接口的使用步骤"><a href="#接口的使用步骤" class="headerlink" title="接口的使用步骤"></a>接口的使用步骤</h2><ol><li>接口不能直接使用，必须有一个实现类来实现接口。</li><li>接口的实现类必须重写接口中所有的抽象方法</li><li>创建实现类对象，进行使用。<br>注意事项：如果实现类并没有重写接口中的所有方法，那么这个实现类就必须是抽象类。   </li></ol></blockquote><blockquote><h2 id="接口可以包含、常量、抽象方法、默认方法、静态方法、私有方法"><a href="#接口可以包含、常量、抽象方法、默认方法、静态方法、私有方法" class="headerlink" title="接口可以包含、常量、抽象方法、默认方法、静态方法、私有方法"></a>接口可以包含、常量、抽象方法、默认方法、静态方法、私有方法</h2><ol><li><font color=red>默认方法：就是定义在接口中的静态方法。包含public default 方法名 { 方法体 }</font>。</li></ol><ul><li>作用：可以解决接口升级的问题，因为接口中添加新的抽象方法，其实现类必须全部重写，</li><li>注意：并且可以通过接口实现类对象直接调用，也可以被接口实现类覆盖重写。</li></ul><ol start="2"><li><font color=red>静态方法：就是定义在接口中的静态方法。包含public static 方法名 { 方法体 }</font>。</li></ol><ul><li>作用：不创建对象直接调用接口中的方法。静态方法和对象无关</li><li>注意：不能通过接口实现类的对象来调用接口中的静态方法。而是直接用接口名称调用（一个类可以实现多个接口，多个接口中静态方法有可能产生冲突）（默认方法和静态方法只有在java 8会以上版本才支持）</li></ul><ol start="3"><li><font color=red>私有方法：就是在接口中定义private关键字的方法，默认接口中方法必须是public的。（私有方法只有在java 9 或以上版本才支持）</font></li></ol><ul><li>普通私有方法：解决多个默认方法之间的重复代码问题 private 返回值类型 方法名称（参数列表）{ 方法体 }</li><li>静态私有方法：解决多个静态方法之间的重复代码问题 private static 返回值类型 方法名称（参数列表）{ 方法体 }</li><li>作用：某些场景，我们需要在接口中抽取一个公有的方法，来解决两个或多个方法之间代码重复的问题，并规定只能在接口中调用，就可以通过私有方法来解决。  </li></ul><ol start="4"><li><font color=red>常量：接口当中也可以定义“成员变量”</font>。</li></ol><ul><li>类和类之间是单继承的，直接父类只有一个。</li><li>类和接口之间是多实现的，一个接口可以实现（implements）多个接口，注意处理抽象方法的冲突问题就行。</li><li>接口与接口之间是多继承的。就是一个接口可以继承（extends）多个接口，那么该接口就拥有了其他接口的全部抽象方法。  </li></ul><ol start="5"><li><font color=red>注意事项（总结）</font>。</li></ol><ul><li>接口不能有静态代码块或者构造方法。</li><li>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</li><li>如果实现类所实现的接口中，存在重复的抽象方法，那么只需要重写覆盖一次即可。</li><li>如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类必须是一个抽象类。</li><li>如果实现类实现的多个接口当中，存在重复的默认方法，那么实现类必须冲突的默认方法进行重写。</li><li>如果一个类的直接父类当中的方法，和接口当中的默认方法产生了冲突，会优先用父类的方法。（先继承，后实现的特点）。</li></ul></blockquote><hr><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ol><li>堆中存储new出来的对象(包括实例变量)</li><li>垃圾：没有任何引用所指向的对象，垃圾回收器(GC)不定时到内存中清扫垃圾，回收过程是透明的，调用System.gc()可以建议虚拟机尽快调度GC来回收</li><li>内存泄漏:不再使用的内存还没有被及时的回收、建议:对象不再使用时及时将引用设置为null</li><li>实例变量的生命周期：创建对象时存储在堆中，对象被回收时一并被回收  </li></ol></blockquote><blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ol><li>存储正在调用的方法中的局部变量(包括方法的参数)</li><li>调用方法时，会在栈中为该方法分配一块对应的栈帧，栈帧中存储局部变量(包括方法的参数)，当方法执行结束后，栈帧被清除，局部变量一并失效</li><li>局部变量的生命周期:调用方法时存储在栈中，方法结束时与栈帧一并被清除</li></ol></blockquote><blockquote><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ol><li>存储.class字节码文件(包括静态变量、方法)</li><li>方法只有一份，通过this来区分具体的对象</li></ol></blockquote><hr><h1 id="集合总结"><a href="#集合总结" class="headerlink" title="集合总结"></a>集合总结</h1><blockquote><h2 id="集合类的由来"><a href="#集合类的由来" class="headerlink" title="集合类的由来"></a>集合类的由来</h2><p> &emsp;再开发过程中，我们一般用对象来封装特有数据，对象多了就需要存储，如果对象的个数不确定，就是用集合容器进行存储。  </p></blockquote><blockquote><h2 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h2><p> &emsp;可以将集合理解为就是一个容器，因为面向对象编程会产生很多的对象，对了方便对对象的操作，所以把对象装入到集合，集合本身就是一个对象，能储存对象的对象就叫集合，存储对象的容器，就叫做集合，集合是可变长度的，数组不可变的。  </p></blockquote><blockquote><h2 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h2><p> &emsp;用于存储对象的容器，集合长度是可变的，集合中不可以存储基本数据类型值</p></blockquote><blockquote><h2 id="集合框架示意图"><a href="#集合框架示意图" class="headerlink" title="集合框架示意图"></a>集合框架示意图</h2><p><img src="/images/collection.jpg" alt="avatar"></p></blockquote><blockquote><h2 id="Collection框架介绍"><a href="#Collection框架介绍" class="headerlink" title="Collection框架介绍"></a>Collection框架介绍</h2><p>&emsp;Collection是集合框架的顶级接口，Collections是是集合框架的工具类（提供集合共有的一些api）<br>&emsp;Collection接口下有两个子接口，List接口和set接口，如上图  </p></blockquote><blockquote><h3 id="List接口：有序可重复，存储对象有顺序，可以重复"><a href="#List接口：有序可重复，存储对象有顺序，可以重复" class="headerlink" title="List接口：有序可重复，存储对象有顺序，可以重复"></a>List接口：有序可重复，存储对象有顺序，可以重复</h3><p>&emsp; Vector：最早的集合类，现在已经被ArrayList取代。底层也是数组<br>&emsp; ArrayList：底层是数组，有序、可重复、有索引，异步线程不安全、特点：查找效率高，增删效率低<br>&emsp; LinkedList：底层是双向链表，异步线程不安全，特点：增删效率高，查询效率低。不支持高效的随机元素访问。</p></blockquote><blockquote><h3 id="Set接口：无序不可重复。不可存储重复对象，如果有重复，会覆盖。"><a href="#Set接口：无序不可重复。不可存储重复对象，如果有重复，会覆盖。" class="headerlink" title="Set接口：无序不可重复。不可存储重复对象，如果有重复，会覆盖。"></a>Set接口：无序不可重复。不可存储重复对象，如果有重复，会覆盖。</h3><p>&emsp; TreeSet：底层是红黑树(自平衡的排序二叉树)，特点：有序，唯一<br>&emsp; hashSet：底层采用HashMap保存数据。特点：集合元素必须唯一，并且不可重复，无序的。<br>&emsp; LinkHashSet：LinkHashSet继承HashSet，内部是通过LinkedHashMap实现。特点：集合元素必须唯一，并且不可重复，但是有序的。</p><h3 id="Map集合："><a href="#Map集合：" class="headerlink" title="Map集合："></a>Map集合：</h3></blockquote><blockquote><h4 id="emsp-map集合的特点"><a href="#emsp-map集合的特点" class="headerlink" title="&emsp; map集合的特点:"></a>&emsp; map集合的特点:</h4><p>&emsp; map集合是一个双列集合，一个元素包含两个值，一个key，一个value<br>&emsp; map集合中的元素，key和value的数据类型可以相同，也可以不同<br>&emsp; map集合中的元素，key不允许重复，value可以重复<br>&emsp; map集合中的元素，key和value是一一对应的关系。  </p></blockquote><blockquote><h4 id="Map集合与collection集合的区别："><a href="#Map集合与collection集合的区别：" class="headerlink" title="Map集合与collection集合的区别："></a>Map集合与collection集合的区别：</h4><p>&emsp; map集合中元素是成对存在的，每个元素由键与值两个部分组成的，通过键可以找到所对应的值，称之为双列集合。<br>&emsp; collection集合中的元素是孤立存在的，向集合中存储元素采用一个个元素的方式存储，称之为单列集合。  </p></blockquote><blockquote><h4 id="Map集合常用子类："><a href="#Map集合常用子类：" class="headerlink" title="Map集合常用子类："></a>Map集合常用子类：</h4><p>&emsp; HashMap：实现了Map接口，底层是哈希表。无序集合（存储元素和取出元素的顺序有可能不一致），异步多线程，查询的速度块，<br>&emsp; LinkedHashMap：HashMap的子类，底层是哈希表+链表，是一个有序的集合，存取出元素的顺序是一直的，保证迭代的顺序。<br>&emsp; HashTable：实现了Map接口，底层也是哈希表，不允许存储空key和value，线程安全的集合，速度慢，<br>&emsp; properties：HashTable的子类，唯一一个和IO流相结合的集合  </p></blockquote><blockquote><h4 id="HashMap底层原理"><a href="#HashMap底层原理" class="headerlink" title="HashMap底层原理"></a>HashMap底层原理</h4><p>&emsp; HashMap中维持了一个数组，数组的每一个位置称之为一个桶，每一个桶维持了一个链表，一个元素根据哈希吗进行运算，根据运算的结果平均的分配到这个桶中，放用到75%的桶的时候，会进行扩容，桶的数量会增加一倍，已有元素会重新计算哈希吗重新分布，这个过程称之为rehash，默认初始容量为16，即一开始有16个桶，当用到13个桶的时候要进行扩容。由16个桶扩容为32个桶，加载因子越大，碰撞概率越大，加载因子越小，扩容和rehash操作越频繁。  </p></blockquote><blockquote><h4 id="HashMap-为什么速度快？"><a href="#HashMap-为什么速度快？" class="headerlink" title="HashMap 为什么速度快？"></a>HashMap 为什么速度快？</h4><p>&emsp; HashMap 之所以速度快，因为他使用的是散列表，根据 key 的 hashcode 值生成数组下标（通过内存地址直接查找，没有任何判断），时间复杂度完美情况下可以达到 n1（和数组相同，但是比数组用着爽多了，但是需要多出很多内存，相当于以空间换时间）  </p></blockquote><blockquote><h4 id="hashcode为什么使用31来做相乘？"><a href="#hashcode为什么使用31来做相乘？" class="headerlink" title="hashcode为什么使用31来做相乘？"></a>hashcode为什么使用31来做相乘？</h4><p>&emsp; 之所以使用 31，是因为他是一个奇素数。如果乘数是偶数，并且乘法溢出的话，信息就会丢失，因为与2相乘等价于移位运算（低位补0）。使用素数的好处并不很明显，但是习惯上使用素数来计算散列结果。 31 有个很好的性能，即用移位和减法来代    。替乘法，可以得到更好的性能： 31 * i == (i &lt;&lt; 5） - i， 现代的 JVM 可以自动完成这种优化。这个公式可以很简单的推导出来  </p></blockquote><blockquote><h2 id="集合常见方法"><a href="#集合常见方法" class="headerlink" title="集合常见方法"></a>集合常见方法</h2><p>集合容器因为内部的数据结构不同，有多种具体容器，不断的向上抽取，就形成了集合框架，集合框架的顶层接口是collections，包含集合的共性方法</p><h3 id="常见方法："><a href="#常见方法：" class="headerlink" title="常见方法："></a>常见方法：</h3><ol><li>添加 ：添加对象  boolean add（Object obj），boolean addAll</li><li>删除： boolean remove（object obj），boolean removeAll（object obj）</li><li>判断：boolean contains(Object obj），boolean containsAll(Boject ooll)，boolean ifEmpty</li><li>获取：int size()；获取集合元素集合的长度。</li></ol></blockquote><blockquote><h2 id="Iterator迭代器："><a href="#Iterator迭代器：" class="headerlink" title="Iterator迭代器："></a>Iterator迭代器：</h2><p>&emsp;专门取出集合中元素的方式，迭代器对象该对象必须依赖具体的容器，因为每一个容器的数据结构都不同，所以迭代器实在容器中进行内部实现的，对于适用容器者而言，具体的实现不重要，只要通过容器获取到该实现的迭代器的对象就可以，也就是iterator方法   </p></blockquote><blockquote><h2 id="迭代器的实现原理："><a href="#迭代器的实现原理：" class="headerlink" title="迭代器的实现原理："></a>迭代器的实现原理：</h2><p>迭代器就是实现了Iterator接口的每一个容器内部的内部对象<br>注意：在迭代器过程中，不要视同集合操作元素，容易出现异常，但是可以使用Iterator接口的子接口，ListIterator来完成在接待中对元素进行更多的操作，他可以实现在迭代过程中，完成对元素的增删改查，注意，只有list集合具备该迭代功能。   </p></blockquote><hr><h1 id="线程总结"><a href="#线程总结" class="headerlink" title="线程总结"></a>线程总结</h1><blockquote><h2 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h2><p>计算机在执行的任务就是进程,比如JVM、QQ、微信、迅雷等服务本质上也是进程</p><h2 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h2><p>进程中的小任务，多个小任务一起执行就是多线程 </p><h2 id="线程定义的三种方式"><a href="#线程定义的三种方式" class="headerlink" title="线程定义的三种方式"></a>线程定义的三种方式</h2><ol><li>继承Thread类，重写run()方法，将要执行的逻辑写入run方法，并调用start()方法</li><li>实现Runable接口，重写run()方法，通过runnable对象来构建一个Thread对象来启动线程</li><li>实现Callable<T>接口，重写call()方法.</li><li>注意：为什么以上1、2两种方式都需要重写run方法？因为Thread类也实现了Runable接口。</li></ol></blockquote><blockquote><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><ol><li>Thread.currentThread().getName()获取线程的名字</li><li>Thread.seelp(毫秒值) 线程休息一会儿</li></ol></blockquote><blockquote><h2 id="多线程的并发安全问题"><a href="#多线程的并发安全问题" class="headerlink" title="多线程的并发安全问题"></a>多线程的并发安全问题</h2><p>线程的执行不存在先后，而是相互抢占执行，抢占并不是只发生在线程执行的开始，而是发生在线程执行的每一步过程中。由于多个线程并发导致出现一些不符合常理的数据现象—多线程并发安全问题</p></blockquote><blockquote><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><p>同步代码块可以解决多线程并发安全问题,可以利用synchronize同步代码块来解决此问题<br>synchronize需要指定锁对象,锁对象必须要求是这个类的所有线程都认识<br>共享资源，类的字节码、this（需要是同一个对象，一个对象启动四个线程）<br>synchronize去修饰方法 ，同步方法的锁对象是this   </p></blockquote><blockquote><h2 id="什么是同步和异步"><a href="#什么是同步和异步" class="headerlink" title="什么是同步和异步"></a>什么是同步和异步</h2><p>一段逻辑同一时间内只能一个线程执行，称之为反之叫做异步。<br> 线程同步一定是安全的，而线程不安全一定是异步的。</p></blockquote><blockquote><h2 id="什么是死锁？如何解决死锁问题"><a href="#什么是死锁？如何解决死锁问题" class="headerlink" title="什么是死锁？如何解决死锁问题"></a>什么是死锁？如何解决死锁问题</h2><p>多个线程之间的锁形成了嵌套，导致程序无法继续运行的现象叫做死锁<br> 思考如何避免死锁？<br> &emsp;1.减少线程数量  （理论上是可以，实际开发中不现实）。<br> &emsp;2.统一锁对象<br> &emsp;3.减少锁嵌套</p></blockquote><blockquote><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><ol><li>创建状态</li><li>就绪状态</li><li>执行状态</li><li>阻塞状态 / 挂起状态   （人为阻塞 冻结状态）    </li><li>消亡状态</li></ol></blockquote><blockquote><h2 id="Sleep和wait有什么区别："><a href="#Sleep和wait有什么区别：" class="headerlink" title="Sleep和wait有什么区别："></a>Sleep和wait有什么区别：</h2><p>sleep在使用的时候需要指定休眠时间，到点自然醒。释放执行权，不释放锁。是一个静态方法，设计在了Thread类上。wait在使用的时候可以指定等待时间，也可以不指定，如果不指定等待时间就需要唤醒，释放执行权，释放锁，是一个非静态方法，设计在了Object类上。</p></blockquote><blockquote><h2 id="守护线程："><a href="#守护线程：" class="headerlink" title="守护线程："></a>守护线程：</h2><p>守护别的线程，当被守护的线程结束，守护线程无论执行完成与否都得随之结束。 Daemon<br>一个线程要么是守护线程要么是被守护的线程<br>守护线程是随着最后一个被守护线程的结束而结束。   –GC就是一个守护线程。</p></blockquote><blockquote><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>线程的优先级。1-10个等级   没有手动设置的情况下优先级默认是5。<br>理论上数字越大等级越高，这个线程抢到资源的几率越大，相邻的两个线程的优先级的差异性不明显，至少要相差5个等级才能体现的相对明显</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java基础知识整理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java基础知识" scheme="https://courage-kevin.github.io/categories/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
