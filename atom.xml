<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Courage-Kevin 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://courage-kevin.github.io/"/>
  <updated>2020-03-29T06:54:39.929Z</updated>
  <id>https://courage-kevin.github.io/</id>
  
  <author>
    <name>Courage-Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot-Thymeleaf</title>
    <link href="https://courage-kevin.github.io/2020/03/29/SpringBoot-Thymeleaf/"/>
    <id>https://courage-kevin.github.io/2020/03/29/SpringBoot-Thymeleaf/</id>
    <published>2020-03-29T05:43:24.000Z</published>
    <updated>2020-03-29T06:54:39.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Thymeleaf-模板引擎"><a href="#Thymeleaf-模板引擎" class="headerlink" title="Thymeleaf 模板引擎"></a>Thymeleaf 模板引擎</h2><blockquote><p>SpringBoot官方不推荐使用JSP,因为内嵌的Tomcat、Jetty 容器不支持以jar形式运行JSP。Spring Boot中提供了大量模板引擎，包含<code>Freemarker</code>、<code>Mastache</code>、<code>Thymeleaf</code>等。而SpringBoot官方推荐使用<code>Thymeleaf</code>作为模板引擎， 因为<code>Thymeleaf</code>提供了完美的SpringMVC的支持。</p></blockquote><blockquote><p>简单理解，就是web开发以前我们是用jsp文件，用jspl表达式来处理服务器传递过来的数据，从而去渲染页面。现在有了<code>Thymeleaf</code>我们只需要用html文件即可，不用再将html文件改成jsp文件。当然我们也要学习Thymeleaf的一些语法</p></blockquote><h2 id="引入Thymeleaf"><a href="#引入Thymeleaf" class="headerlink" title="引入Thymeleaf"></a>引入Thymeleaf</h2><p>springBoot中要使用Thymeleaf，先引入依赖。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h2><p>我们该如何使用呢？很简单，我们先看一下源码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>( prefix = <span class="string">"spring.thymeleaf"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure></div><p>通过上面分析发现，将HTML页面放到 classpath:/templates/目录下，Thymeleaf就能自动渲染。   </p><p>let’s do it！</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// localhost:8080/success 即可访问到success.html页面</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>( <span class="string">"/success"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html页面加上以下名称空间, 使用Thymeleaf时就有语法提示 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>thymeleaf模板文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>success!!!!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="使用Thymeleaf引入公共的页面"><a href="#使用Thymeleaf引入公共的页面" class="headerlink" title="使用Thymeleaf引入公共的页面"></a>使用Thymeleaf引入公共的页面</h2><p>在项目的页面中，我们经常会公用头部导航、底部公司信息等等，那使用Thymeleaf如何去做到JSP中include的这种功能呢？这就需要用Thymeleaf的语法了，直接上演示代码吧，也很简单</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- th:fragment 声明公共代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"header_common"</span>&gt;</span></span><br><span class="line">       fragment声明的公共头部导航组件</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在标签元素上定义id也可以声明公共代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header_common_id"</span>&gt;</span></span><br><span class="line">        id声明的公共头部导航组件</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在标签元素上定义class也声明公共代码片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header_common_class"</span>&gt;</span></span><br><span class="line">        class声明的公共头部导航组件</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fragment方式获取公共组件 header是文件名...(header.html)  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"header :: header_common"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- id方式获取公共组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:replace</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:insert</span>=<span class="string">"header :: #header_common_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class方式获取公共组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"header :: .header_common_class"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>简单总结：</p><ol><li>先<code>th:fragment</code>、<code>id</code>、<code>class</code>定义好公共的组件</li><li>在需要的页面中通过<code>th:replace</code>或者<code>th:insert</code>引入，这两个的区别是：<ul><li><code>th:replace</code>在渲染页面的时候不会保留<code>&lt;h2&gt;</code>这个标签的标题样式，直接帮你变成div</li><li><code>th:insert</code>则会帮你保留标题样式。</li></ul></li></ol><h2 id="使用Thymeleaf获取服务端数据"><a href="#使用Thymeleaf获取服务端数据" class="headerlink" title="使用Thymeleaf获取服务端数据"></a>使用Thymeleaf获取服务端数据</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>( <span class="string">"/success"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">1</span>));  <span class="comment">//自己建个User对象</span></span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"snow"</span>, <span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">"bill"</span>, <span class="number">1</span>));</span><br><span class="line">        map.put(<span class="string">"userList"</span>,userList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>th:each</code> 循环取出userList中的User对象，并将User对象的属性渲染到表格中</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>thymeleaf模板success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user : $&#123;userList&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.gender==1?'女':'男'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>差不多就这么用吧，使用起来也没什么特别难的地方，主要搞清楚他的语法规则即可。</p><h2 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h2><p>参考 <code>Thymeleaf</code> 官方文档 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence" target="_blank" rel="noopener">:10 Attribute Precedence</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Thymeleaf-模板引擎&quot;&gt;&lt;a href=&quot;#Thymeleaf-模板引擎&quot; class=&quot;headerlink&quot; title=&quot;Thymeleaf 模板引擎&quot;&gt;&lt;/a&gt;Thymeleaf 模板引擎&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SpringBoo
      
    
    </summary>
    
    
    
      <category term="springboot" scheme="https://courage-kevin.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="https://courage-kevin.github.io/2020/03/21/SpringBoot%E5%AD%A6%E4%B9%A0/"/>
    <id>https://courage-kevin.github.io/2020/03/21/SpringBoot%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-03-21T14:13:45.000Z</published>
    <updated>2020-03-26T14:07:09.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="Java框架演变"><a href="#Java框架演变" class="headerlink" title="Java框架演变"></a>Java框架演变</h2><ol><li>SSH（structs2、spring、hibernate）</li><li>SSM（springmvc、spring、mybatis）</li><li>SpringBoot：约定大约配置的概念</li></ol><h2 id="IOC-amp-DI"><a href="#IOC-amp-DI" class="headerlink" title="IOC&amp;DI"></a>IOC&amp;DI</h2><ol><li>Inversion of Control：控制反转</li><li>Dependency Injection：依赖注入</li></ol><h2 id="Springboot版本号"><a href="#Springboot版本号" class="headerlink" title="Springboot版本号"></a>Springboot版本号</h2><p>例如：2.2.1.RELEASE<br>2.主版本<br>2.次版本    新特性    发布新特性    要保证兼容<br>1.增量版本    bug修复<br>RELEASE    发布版本、里程碑版本</p><h2 id="springboot创建项目"><a href="#springboot创建项目" class="headerlink" title="springboot创建项目"></a>springboot创建项目</h2><ol><li>官网创建</li><li>idea创建</li><li>maven创建</li></ol><h2 id="springboot热部署"><a href="#springboot热部署" class="headerlink" title="springboot热部署"></a>springboot热部署</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>开闭原则(OCP) Open Closed Principle：对软件、函数、类的扩展是开放的，对修改是封闭的。</p><p>修改：修改原来的代码，可能会因为某处改动，从而引起多个bug、这个bug又会引起其余的bug，这叫做修改。<br>扩展：不修改原来的代码，只在原来基础上进行扩展，新增业务模块、类，来替代原来的类，这叫做扩展。</p><p>面向抽象编程才能更好的实现OCP原则</p><p>java中的抽象：interface abstract  不依赖于某一个具体的类，而是去依赖抽象。</p><h2 id="DI-IOC-过程"><a href="#DI-IOC-过程" class="headerlink" title="DI IOC 过程"></a>DI IOC 过程</h2><p>interface<br>设计模式：工厂模式<br>IOC/DI</p><p>=&gt;面向抽象=&gt;OCP=&gt;可维护的代码</p><h2 id="重点理论"><a href="#重点理论" class="headerlink" title="重点理论"></a>重点理论</h2><ol><li>单纯的interface可以统一方法的调用，但是不能统一对象的实例化。</li><li>面向对象    实例化方法，调用方法。</li><li>只有一段代码中没有new的出现，才能保持代码的相对稳定，才能逐步实现OCP。</li><li>上面的这句话只是表象，实质是一段代码如果要保持稳定，就不应该负责对象的实例化。</li><li>对象实例化是不可能消除的。</li><li>把对象实例化的过程，转移到其他的代码片段里。</li><li>代码中总会存在不稳定，隔离这些不稳定，保证其他的代码是稳定</li><li>变化造成了不稳定，业务需求发生变化、技术选择发生变化</li><li>配置文件属于系统外部，而不属于代码本身。</li></ol><h2 id="Spring、SpringMVC与SpringBoot的关系与区别"><a href="#Spring、SpringMVC与SpringBoot的关系与区别" class="headerlink" title="Spring、SpringMVC与SpringBoot的关系与区别"></a>Spring、SpringMVC与SpringBoot的关系与区别</h2><p>Spring: Spring Framework、Spring Boot 、 Spring Cloud 、Spring Data</p><p>SSM Spring + Spring MVC + Mybatis</p><p>Spring Framework   核心 IOC (CORE)  AOP  SpringMVC(WEB)</p><p>spring boot 其实是 Spring Framework 的应用 </p><p>为什么这么说，很多人讲spring-boot其实是简化配置，他比spring-framework更加方便，简单的几个注解就开始项目，无需要过多的xml配置，难道spring-framework中没有注解的方式完成一些配置吗？其实不是，springBoot是基于springFramework的，就是因为xml配置太繁琐，所以spring官方将spring-framework这个基础框架，抽象成一个更好用的上层框架，从而推出springboot，大家以后就用springboot就好了。</p><h2 id="什么是SpringBoot的核心优势"><a href="#什么是SpringBoot的核心优势" class="headerlink" title="什么是SpringBoot的核心优势"></a>什么是SpringBoot的核心优势</h2><p>自动配置: </p><ol><li>原理是什么</li><li>为什么要自动转配</li></ol><p>不光是要给我们自己写的类加上注解，注入到IOC容器，SpringBoot还要注入很多第三方的SDK，便于我们开发使用，所以才会有这个自动装配。看了这句话后，在想想springboot自动装配真正要解决的问题是什么？   </p><p><strong>SpringBoot比其他框架多出来一个IOC容器的概念，他就是将各种bean，不管是我们自己写的业务bean，还是一些第三方的SDK、去发现这些Bean，并把这些配置的Bean加入到IOC容器中去，这才是Springboot真正解决的问题。</strong></p><p>原理要从下面三个注解讲起。</p><p>@SpringBootApplication包含下面三个注解，其实springboot的启动类，我们理解成就是一个超级大的配置类</p><p>@EnableAutoConfiguration<br>这个注解的主要的作用就是，部分的属性是需要写入配置文件中的，允许从配置文件中去更改bean的相关属性，比如支持Redis，Mysql等等，是需要在配置文件中去配置一些属性，你才能将这些第三方的bean注入到容器中，所以该注解自动装备的一般都是用来加载第三方的SKD或依赖，不是来加载你自己写的类，而@Configuration这个注解，才是来加载你自己写的一些业务bean的。</p><p>如何加载到的第三方的SDK呢？其实原理还是不变，<br>@EnableAutoConfiguration中有一个重要的注解@Import(AutoConfigurationImportSelector.class)<br>@Import注解有一个AutoConfigurationImportSelector.class的类<br>Selector类中有一个重要的方法,selectImports()就是这个方法，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">&#125;</span><br><span class="line">AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">annotationMetadata);</span><br><span class="line"><span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这个方法会加载springboot-autoconfigure这个jar包中的spring-factoris这个配置文件，这个配置文件里配置了很多第三方的配置，就是通过这样的一种机制，找到第三方包中带有@Configuration的类，然后注入到ioc容器中的。跟我们自己写一个配置类是一个道理，只不过第三方的类、源码，不可能全部都丢在自己的项目中，所以还是那句话，@Configuration一般用来加载自己写的业务bean，真正加载第三方的bean，还是得依靠@EnableAutoConfiguration这个注解！但是原理，跟自己写配置类大概是一个意思，肯定比我们复杂很多啦 哈哈.. 就这么理解吧。</p><p>@EnableXXXX这一类的注解，其实是模块装配！</p><p>@SpringBootConfiguration<br>@ComponentScan 扫描注解，将有注解的bean加入到IOC容器。</p><h2 id="把握Spring的几个重要目的，提升学习效率"><a href="#把握Spring的几个重要目的，提升学习效率" class="headerlink" title="把握Spring的几个重要目的，提升学习效率"></a>把握Spring的几个重要目的，提升学习效率</h2><p>OCP —&gt; IOC</p><p>IOC的实现：容器  加入容器     注入</p><p>IOC的目的：<br>抽象意义：控制权交给用户<br>灵活的OCP</p><p>把对象注入到容器中去最主要的几种方式</p><ol><li>XML</li><li>注解</li></ol><h2 id="Stereotype-Annotations-模式注解"><a href="#Stereotype-Annotations-模式注解" class="headerlink" title="Stereotype Annotations 模式注解"></a>Stereotype Annotations 模式注解</h2><p>@Component   组件/类/bean 注入ioc容器</p><p>@Service<br>@Controller<br>@Repository<br>这三个注解和Component没有区别，</p><p>@Configuration<br>可以一次加载多个bean进入容器。</p><h2 id="Spring的实例化和依赖注入时机与延迟实例化"><a href="#Spring的实例化和依赖注入时机与延迟实例化" class="headerlink" title="Spring的实例化和依赖注入时机与延迟实例化"></a>Spring的实例化和依赖注入时机与延迟实例化</h2><blockquote><p>IOC容器 对象 实例化 注入 时机</p></blockquote><p>默认立即/提前实例化<br>可以设置 延迟实例化  通过@Lazy注解 </p><blockquote><p>注意，假如如果容器启动就会立即实例化A和B，但是我们想让B延迟加载，可以在B类上添加@Lazy，但A依赖B  B添加@Lazy注解，但是A没有添加，springboot会忽略B的延迟加载，也就是说如果想让B延迟加载，那么还需要在A上添加@Lazy注解</p></blockquote><h2 id="成员变量注入、Setter注入与构造注入"><a href="#成员变量注入、Setter注入与构造注入" class="headerlink" title="成员变量注入、Setter注入与构造注入"></a>成员变量注入、Setter注入与构造注入</h2><p>三种注入方式：</p><ol><li>属性注入（最常用）</li><li>构造方法注入</li><li>set方法注入</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>( <span class="string">"/v1/banner"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerController</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过属性注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Diana diana;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数注入</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    public BannerController(Diana diana)&#123;</span></span><br><span class="line"><span class="comment">//        this.diana = diana;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过set方法注入</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    public void setDiana(Diana diana) &#123;</span></span><br><span class="line"><span class="comment">//        this.diana = diana;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>( <span class="string">"/test"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        diana.r();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,post,snow"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Spring中一个接口多个实现类的处理"><a href="#Spring中一个接口多个实现类的处理" class="headerlink" title="Spring中一个接口多个实现类的处理"></a>Spring中一个接口多个实现类的处理</h2><h3 id="Autowired被动注入方式"><a href="#Autowired被动注入方式" class="headerlink" title="@Autowired被动注入方式"></a>@Autowired被动注入方式</h3><ol><li><p>byType<br> 当注入一个Skill类型的skill，他会先找实现了Skill接口的bean<br> 当找不到任何一个bean则报错<br> 当找到一个bean，直接注入<br> 当找到多个bean，并不一定会报错</p></li><li><p>byName<br> 当byType的方式找到多个实现了Skill接口的bean时，就会启动byName的机制<br> 从而自动判断后，帮你注入你需要的bean</p></li></ol><h3 id="Autowired主动注入方式"><a href="#Autowired主动注入方式" class="headerlink" title="@Autowired主动注入方式"></a>@Autowired主动注入方式</h3><p>看似注入的是Iralia，实则注入的是Daina，这就是主动注入方式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"Daina"</span>)</span><br><span class="line"><span class="keyword">private</span> Skill Iralia;</span><br></pre></td></tr></table></figure></div><h3 id="面向对象中变化的应对方案"><a href="#面向对象中变化的应对方案" class="headerlink" title="面向对象中变化的应对方案"></a>面向对象中变化的应对方案</h3><ol><li>制定一个接口，然后用多个实现类实现同一个interface   （策略模式，多个策略选择一个策略）</li><li>只有一个类，通过类的属性，来达到对应变化</li></ol><p>两个类同时实现Skill接口，在注入的时候，Spring如何知道，注入的到底是哪一个实例？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diana</span> <span class="keyword">implements</span> <span class="title">Skill</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Diana</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello diana"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana Q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana W"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana R"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Iralia</span> <span class="keyword">implements</span> <span class="title">Skill</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Iralia</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Iralia"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Iralia Q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Iralia W"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Iralia E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Iralia R"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">q</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">w</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">e</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">r</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当注入一个Skill类型的diana，则会调用diana的r方法</span></span><br><span class="line"><span class="comment">// 当注入一个Skill类型的iralia，则会调用iralia的r方法</span></span><br><span class="line"><span class="comment">// 当然在真实的开发中，这种写法很少，因为都是面向接口编程，不可能依赖某一个具体的对象,也违反了OCP原则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当注入一个Skill类型的skill，他会先找实现了Skill接口的bean</span></span><br><span class="line"><span class="comment">// 当找不到任何一个bean则报错</span></span><br><span class="line"><span class="comment">// 当找到一个bean，直接注入</span></span><br><span class="line"><span class="comment">// 当找到多个bean，并不一定会报错</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>( <span class="string">"/v1/banner"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Autowired</span></span><br><span class="line">    <span class="comment">// private Skill diana;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Autowired</span></span><br><span class="line">    <span class="comment">// private Skill iralia;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Skill skill;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>( <span class="string">"/test"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// diana.r();</span></span><br><span class="line">        <span class="comment">// iralia.r();</span></span><br><span class="line">        skill.r();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,post,snow"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="ComponentScan包扫描机制"><a href="#ComponentScan包扫描机制" class="headerlink" title="@ComponentScan包扫描机制"></a>@ComponentScan包扫描机制</h2><p>springboot的@SpringbootApplication注解会默然扫描该类同包及子包下所有的注解<br>如果需要扫描别的包，则需要用到@ComponentScan注解。<br>@@ComponentScan(“xxx.xxx.xxx”)</p><h2 id="策略模式的变化模式"><a href="#策略模式的变化模式" class="headerlink" title="策略模式的变化模式"></a>策略模式的变化模式</h2><ol><li>通过切换byname 切换bean</li><li>通过@Qualifier 指定bean </li><li>有选择的注入一个bean，注释掉某个bean上的@Component注解</li><li>@Primary 优先注入</li></ol><h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p>满足条件，才会将bean加入IOC容器，不满足则不会加入IOC容器中去</p><p>@Conditional + Conditional(接口)   可以用来编写自定义条件注解</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(DianaCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Skill</span> <span class="title">diana</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Diana(<span class="string">"戴安娜"</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>( IreliaCondition<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Skill</span> <span class="title">iralia</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iralia();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写一个条件类，实现Condition接口，</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DianaCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写方法，返回true则注入，返回false则不注入。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....判断是否注入到容器的逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="SpringBoot内置的成品条件注解"><a href="#SpringBoot内置的成品条件注解" class="headerlink" title="SpringBoot内置的成品条件注解"></a>SpringBoot内置的成品条件注解</h2><p>@ConditionalOnProperty</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yml  hero.condition = diana</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"hero.condition"</span>,havingValue = <span class="string">"diana"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Skill <span class="title">diana</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Diana(<span class="string">"戴安娜"</span>, <span class="number">20</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h2 id="增强型SpringBoot"><a href="#增强型SpringBoot" class="headerlink" title="增强型SpringBoot"></a>增强型SpringBoot</h2><p>全局异常处理类<br>@ControllerAdvice 标注该类为一个异常处理类<br>@ExceptionHandler(value = Exception.class)   捕获所有Exception类型的异常会执行该注解下的方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionAdvice</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">handleException</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>Throwable</p><p>Error  系统级错误</p><p>Exception  异常<br>    checkedException  编译时异常，强制要求处理，比如try catch 或继续抛出异常、或记录日志、或返回到前端<br>    RuntimeException  运行时异常   unchecked</p><p>异常可以处理时，定义为checkedException<br>异常无能为力时，定义为RuntimeException</p><h3 id="已知异常-amp-未知异常"><a href="#已知异常-amp-未知异常" class="headerlink" title="已知异常&amp;未知异常"></a>已知异常&amp;未知异常</h3><ol><li><p>已知异常：比如判断业务逻辑，知道为某个对象或数据为空时，主动抛出的异常</p></li><li><p>未知异常：对于前端开发者和用户、都是无意义的，服务端开发者代码逻辑有问题，只需要自己知道就好了。打印到控制台，或者保存到日志中去</p></li></ol><p>全局异常处理Demo</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Integer code;</span><br><span class="line">    <span class="keyword">protected</span> Integer httpStatusCode=<span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承自定义的HttpException</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForbiddenException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForbiddenException</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承自定义的HttpException </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span> <span class="keyword">extends</span> <span class="title">HttpException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.httpStatusCode = <span class="number">404</span>;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// response对象，需要序列化到前端的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnifyResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> String request;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnifyResponse</span><span class="params">(Integer code, String message, String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get set 方法、</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionAdvice</span>  </span>&#123;</span><br><span class="line">    <span class="comment">// 拦截所有Exception的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    @<span class="title">ResponseStatus</span>(<span class="title">code</span> </span>= HttpStatus.INTERNAL_SERVER_ERROR)  <span class="comment">// 状态码改为500.但是不够灵活，需要使用ResponseEntity</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UnifyResponse <span class="title">handleException</span><span class="params">(HttpServletRequest req, Exception e)</span></span>&#123;</span><br><span class="line">        String requestUrl = req.getRequestURI();</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        UnifyResponse unifyResponse = <span class="keyword">new</span> UnifyResponse(<span class="number">9999</span>, <span class="string">"服务器异常"</span>, method + <span class="string">""</span> + requestUrl);</span><br><span class="line">        <span class="keyword">return</span> unifyResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截所有自定义的Http异常   可以灵活的设置异常的状态码</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>( value = HttpException<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">UnifyResponse</span>&gt; <span class="title">handleHttpException</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">HttpException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        String requestUrl = req.getRequestURI();</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        UnifyResponse unifyResponse = <span class="keyword">new</span> UnifyResponse(e.getCode(), <span class="string">"xxxxxx"</span>, method + <span class="string">""</span> + requestUrl);</span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_JSON);</span><br><span class="line">        HttpStatus httpStatus = HttpStatus.resolve(e.getHttpStatusCode());</span><br><span class="line">        ResponseEntity&lt;UnifyResponse&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(unifyResponse, headers, httpStatus);</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>封装好这些异常处理之后，在处理业务逻辑的时候，只需要new不同自定义异常对象即可</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>( <span class="string">"/test"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        skill.r();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ForbiddenException(<span class="number">10001</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="为什么需要将异常信息写在配置文件里"><a href="#为什么需要将异常信息写在配置文件里" class="headerlink" title="为什么需要将异常信息写在配置文件里_"></a>为什么需要将异常信息写在配置文件里_</h3><p><strong>开发细节优化：这些code码是传递给前端用于判断请求或业务是否执行成功的，有一点，如果我们将这些code以硬编码的形式传递返回给前端是没有任何问题的，但是，但是，如果后期要修改这些code，那么项目维护起来还是有点费劲的，又或者如果我们要做国际化，那是不可能的，最好的方式，还是将这些code的定义，单独写到配置文件中来管理。</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">snow.codes[10000]</span>= <span class="string">通用错误   #中文需要进一步处理，不然到前端会出现乱码，之后会继续解决这个问题</span></span><br><span class="line"><span class="meta">snow.codes[10001]</span>= <span class="string">this is error   #英文就没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意配置文件中不需要给属性加""号，不然返回给前端的数据会变为转义后 `\ this is error \` 这种形式</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>( prefix = <span class="string">"snow"</span> )   <span class="comment">// 获取配置文件中前缀为snow的属性</span></span><br><span class="line"><span class="meta">@PropertySource</span>( value = <span class="string">"classpath:config/exception-code.properties"</span> )  <span class="comment">// 和自己定义的配置文件关联</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//加入到IOC容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionCodeConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据配置文件中的数据结构设置为map数据接口</span></span><br><span class="line">    <span class="comment">// 数据格式    100001 = "通用参数异常"  10000="用户名不存在" 就是 key-value格式的</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; codes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Integer, String&gt; <span class="title">getCodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> codes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCodes</span><span class="params">(Map&lt;Integer, String&gt; codes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codes = codes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据传入的code值，获得message消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        String message = codes.get(code);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 硬编码形式</span></span><br><span class="line">UnifyResponse unifyResponse = <span class="keyword">new</span> UnifyResponse(e.getCode(), <span class="string">"xxxxxx"</span>, method + <span class="string">""</span> + requestUrl);</span><br><span class="line"><span class="comment">//配置文件动态获取 @Autowired ExceptionCodeConfiguration 这个对象</span></span><br><span class="line">UnifyResponse unifyResponse = <span class="keyword">new</span> UnifyResponse(e.getCode(), codeConfiguration.getMessage(e.getCode()), method + <span class="string">""</span> + requestUrl);</span><br></pre></td></tr></table></figure></div><p>思想总结：</p><ol><li>配置文件和类对应起来，在代码中操作配置文件，就相当于在操作一个类，更加方便，要用类的思想去操作配置文件。</li><li>如果业务中配置项较多的时候，建议提取成一个配置文件。</li><li>异常处理不要定义涉及到业务的具体的异常(比如订单未找到、商品未找到等等..)，太麻烦，但也不能定义的太抽象，比如Http异常..尽量定义通用的异常,粒度自己把握。根据Http状态码定义自定义异常就比较好，因为Http的状态码是有限的 哈哈。 </li><li>异常处理流程<ol><li>需要抛出异常时，新建异常类，继承Expection，传入一个code码，表某一类异常，根据code码定义配置文件，对应的message</li><li>GlobleExcepttionAdvice中统一处理，自定义异常、系统异常</li><li>建议自己处理返回给前端的状态码，不要用springboot的注解，因为不够灵活</li><li>ResponseEntity对象初始化，需要三个值<ul><li>unifyResponse(自定义返回的Response对象，httpStatus(状态码)、headers(响应头信息))</li></ul></li></ol></li></ol><h2 id="SpringBoot主动发现机制和思想"><a href="#SpringBoot主动发现机制和思想" class="headerlink" title="SpringBoot主动发现机制和思想"></a>SpringBoot主动发现机制和思想</h2><p>SpringBoot中都是通过注解的形式，自动的加载控制器，并不想其他的框架，需要在程序入口处有类似Application.register()这样的注册操作，Springboot程序在启动的时候，就会自动去发现各种注解，基于每种注解特有的意义，去自动完成一些事情。这是优点，缺点就是如果不是很熟悉这个框架，阅读代码可能会比较困难，因为你从启动类看不到任何一层一层调用的逻辑，不同的业务散落在各个包中。</p><h2 id="SpringBoot自动加载路由前缀（框架增强）"><a href="#SpringBoot自动加载路由前缀（框架增强）" class="headerlink" title="SpringBoot自动加载路由前缀（框架增强）"></a>SpringBoot自动加载路由前缀（框架增强）</h2><p>@RequestMapping() 将controller注册到容器中时需要加入路由地址，如果项目层数较深，地址会非常的长，并且有很多一样的路由前缀，每写一个controller都要重复一遍非常的麻烦，既然Spring这么强大，有没有什么机制可以自动生成路由前缀？</p><p>思路：如何可以在@RequestMapping中不加URL前缀，我们可以让配置类自动加入前缀，先拿到原来的requestMapping前缀，然后稍作修改。<br>既然用@RequestMapping()可以注册路由，那肯定有一个对应的配置类可以修改路由地址，RequestMappingHandlerMapping应运而生。我们需要写一个配置类继承RequestMappingHandlerMapping并重写其中的getMappingForMethod方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPrefixConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcRegistrations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">getRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutoPrefixUrlMapping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPrefixUrlMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;missyou.api-package&#125;"</span>) <span class="comment">//获取配置文件中的值。  yml中定义的 missyou.api-package = com.lin.missyou.api</span></span><br><span class="line">    <span class="keyword">private</span> String apiPackagePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我们所需的路由信息在handlerType中</span></span><br><span class="line">        RequestMappingInfo mappingInfo = <span class="keyword">super</span>.getMappingForMethod(method, handlerType);</span><br><span class="line">        <span class="keyword">if</span> (mappingInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String prefix = <span class="keyword">this</span>.getPrefix(handlerType);</span><br><span class="line">            <span class="comment">//合并自己提取到的prefix前缀，返回一个新的mappingInfo</span></span><br><span class="line">            RequestMappingInfo newMappingInfo = RequestMappingInfo.paths(prefix).build().combine(mappingInfo);</span><br><span class="line">            <span class="keyword">return</span> newMappingInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappingInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">(Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class="line">        String packageName = handlerType.getPackage().getName();</span><br><span class="line">        String dotPath = packageName.replaceAll(<span class="keyword">this</span>.apiPackagePath, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> dotPath.replace(<span class="string">"."</span>,<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;h2 id=&quot;Java框架演变&quot;&gt;&lt;a href=&quot;#Java框架演变&quot; cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://courage-kevin.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://courage-kevin.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>React基础知识点-时常看看</title>
    <link href="https://courage-kevin.github.io/2020/03/11/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9-%E6%97%B6%E5%B8%B8%E7%9C%8B%E7%9C%8B/"/>
    <id>https://courage-kevin.github.io/2020/03/11/React%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9-%E6%97%B6%E5%B8%B8%E7%9C%8B%E7%9C%8B/</id>
    <published>2020-03-11T13:54:48.000Z</published>
    <updated>2020-03-14T11:39:26.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="React之绑定属性"><a href="#React之绑定属性" class="headerlink" title="React之绑定属性"></a>React之绑定属性</h2><p>&emsp; 主要注意着三点就好了，其余跟html基本类似。</p><ol><li>class属性要换成className</li><li>和label中的for要换成 htmlFor</li><li>style如果写行内样式，因为是jsx语法要求传递的为一个对象，所以要用双花括号包裹，如下<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'title'</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>"<span class="attr">color</span>"<span class="attr">:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><br/><br/></li></ol><h2 id="React中引入图片的三种方式"><a href="#React中引入图片的三种方式" class="headerlink" title="React中引入图片的三种方式"></a>React中引入图片的三种方式</h2><ol><li>可以直接通过img的src属性引入远程图片url<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com/img/xxxxxxx_353asadasdsadsaa259394dea9b.png"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>可以在组件内引入本地图片,之后用ES6语法引入 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../assets/images/1.jpg'</span>;</span><br><span class="line">&lt;img src=&#123;logo&#125; /&gt;</span><br></pre></td></tr></table></figure></div></li><li>或者直接用ES5的语法简写<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">assets</span>/<span class="attr">images</span>/<span class="attr">1.jpg</span>')&#125; /&gt;</span></span><br></pre></td></tr></table></figure></div><br/><br/></li></ol><h2 id="React中循环数组数据渲染"><a href="#React中循环数组数据渲染" class="headerlink" title="React中循环数组数据渲染"></a>React中循环数组数据渲染</h2><p> &emsp; 在需要循环渲染数据的地方直接调用数组的map方法即可，没有别的花样。注意要在加key属性。有时候返回的数组中还有数据，那么直接在里层在调用map函数就好了，内层数组直接用<code>item.数组名.map()</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">state中的数据：list:['11111111111','222222222222','3333333333333']</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> &#123;</span><br><span class="line"> this.state.list.map(function(item,index)&#123;</span><br><span class="line"> return (<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;value.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">最好不要用index作为key值。可以用数组中不唯一的，例如常用的id属性，像这样。</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;value.id&#125;</span>&gt;</span>&#123;value.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React中改变this指向的三种方式"><a href="#React中改变this指向的三种方式" class="headerlink" title="React中改变this指向的三种方式"></a>React中改变this指向的三种方式</h2><p>&emsp; 一定要注意this的指向，在函数调用，组件传值中如果this指向不正确，很容易导致获取不到数据等系列bug。</p><ol><li>直接在自己定义的事件处理的函数后添加.bind(this)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getData.bind(this)&#125;</span>&gt;</span>获取数据--第一种改变this指向的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>事件处理函数后面不用.bind(this),但需要在组件的构造函数内绑定。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getMessage&#125;</span>&gt;</span>获取信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">  <span class="keyword">super</span>(props);   <span class="comment">//固定写法</span></span><br><span class="line">  <span class="keyword">this</span>.state=&#123;</span><br><span class="line">   msg:<span class="string">'我是一个home组件'</span>, </span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="comment">//第二种改变this指向的方法</span></span><br><span class="line">  <span class="keyword">this</span>.getMessage= <span class="keyword">this</span>.getMessage.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>直接使用箭头函数，这样就不需要在函数后.bind(this).也不需要造构造函数内些那么一堆重复代码。 （推荐）<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getData&#125;</span>&gt;</span>获取数据--第一种改变this指向的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setData=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><br/><br/></li></ol><h2 id="React中给方法传递参数"><a href="#React中给方法传递参数" class="headerlink" title="React中给方法传递参数"></a>React中给方法传递参数</h2><p>&emsp; 这里也要注意一下，要把当前组件this传递到方法中去，这样当你对当前组件中state里定义的数据做一些修改时，才能赋值成功，或者在调用的该方法中调用另一个方法时，才可以调用成功，不传递this的话，指向的不是当前组件，会出bug，张三为方法的第一个参数，李四为方法的第二个参数，多个参数以此类推，<font color="red">this是一定要传递的</font></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setName.bind(this,</span>'张三','李四')&#125;&gt;</span>执行方法传值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React中获取表单数据"><a href="#React中获取表单数据" class="headerlink" title="React中获取表单数据"></a>React中获取表单数据</h2><p>&ensp;思路大概如下：</p><ol><li>在表单元素上定义onchange()事件，来监听用户输入的值<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange&#125;/</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getInput&#125;</span>&gt;</span>获取input的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>在onChange事件函数里面获取表单输入的值,即通过event对象来获取用户输入的值，然后将数据setState()保存到state中<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inputChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">   <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">       username:e.target.value</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>数据已经保存到state中了，在需要的地方直接调用就好了。</li></ol><blockquote><p>注意：如果你给input标签定义value属性，记得添加onChange事件,否则会报错。添加defaultValue，可以不用添加onChange事件   </p></blockquote><p><br/><br/></p><h2 id="React中通过ref获取dom"><a href="#React中通过ref获取dom" class="headerlink" title="React中通过ref获取dom"></a>React中通过ref获取dom</h2><ol><li>给需要获取值的元素定义ref属性<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"username"</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChange&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>通过this.refs.username 获取dom节点<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> val=<span class="keyword">this</span>.refs.username.value;   <span class="comment">//这样直接就可以获取到input元素的value值</span></span><br><span class="line"></span><br><span class="line">inputChange=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">   username:val</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p><br/><br/></p><h2 id="React创建一个简单的可提交表单"><a href="#React创建一个简单的可提交表单" class="headerlink" title="React创建一个简单的可提交表单"></a>React创建一个简单的可提交表单</h2><p>&emsp; 这个表单虽然很简单，但是越往后，我们用到ES6中的语法，对多个input框绑定同一个事件就可以一次性赋值等等，这些都是需要以这些为基础的，我因为不是主要做前端，有时候可能会忘记这些什么事件定义啊，setData是阿之类的，看是看到这些基础代码，就会想起来。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReactForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            msg: <span class="string">"react表单"</span>,</span><br><span class="line">            name: <span class="string">''</span>,</span><br><span class="line">            sex: <span class="string">'1'</span>,</span><br><span class="line">            city: <span class="string">''</span>,</span><br><span class="line">            citys: [</span><br><span class="line">                <span class="string">'北京'</span>, <span class="string">'上海'</span>, <span class="string">'深圳'</span></span><br><span class="line">            ],</span><br><span class="line">            hobby: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">'title'</span>: <span class="string">"睡觉"</span>,</span><br><span class="line">                    <span class="string">'checked'</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">'title'</span>: <span class="string">"吃饭"</span>,</span><br><span class="line">                    <span class="string">'checked'</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">'title'</span>: <span class="string">"敲代码"</span>,</span><br><span class="line">                    <span class="string">'checked'</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            info: <span class="string">''</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.handleInfo = <span class="keyword">this</span>.handleInfo.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    handelSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//防止页面因提交刷新，阻止submit的提交事件。</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line"><span class="comment">// 控制台打印提交数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.name, <span class="keyword">this</span>.state.sex, <span class="keyword">this</span>.state.city, <span class="keyword">this</span>.state.hobby, <span class="keyword">this</span>.state.info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    handelName = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handelSex = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            sex: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handelCity = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            city: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handelHobby = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> hobby = <span class="keyword">this</span>.state.hobby;</span><br><span class="line">        hobby[key].checked = !hobby[key].checked;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            hobby: hobby</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleInfo(e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            info: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;form onSubmit=&#123;this.handelSubmit&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    用户名:&lt;input type="text" value=&#123;this.state.name&#125; onChange=&#123;this.handelName&#125; /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">                    </span><br><span class="line">性别:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.sex</span> == <span class="string">1&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handelSex&#125;</span> /&gt;</span></span>男</span><br><span class="line">                         &lt;input type=<span class="string">"radio"</span> value=<span class="string">"2"</span> checked=&#123;<span class="keyword">this</span>.state.sex == <span class="number">2</span>&#125; onChange=&#123;<span class="keyword">this</span>.handelSex&#125; /&gt;女&lt;br /&gt;</span><br><span class="line">                 </span><br><span class="line"> 居住城市:<span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handelCity&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;</span></span><br><span class="line"><span class="xml">                            this.state.citys.map(function (value, key) &#123;</span></span><br><span class="line"><span class="xml">                                return <span class="tag">&lt;<span class="name">option</span> <span class="attr">key</span>=<span class="string">&#123;key&#125;</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            &#125;)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">                    &lt;br /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">                 </span><br><span class="line"> 爱好:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 注意this指向</span></span><br><span class="line">                        <span class="keyword">this</span>.state.hobby.map(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;span key=&#123;key&#125;&gt;</span><br><span class="line">                                    &lt;input type=<span class="string">"checkbox"</span> checked=&#123;value.checked&#125; onChange=&#123;<span class="keyword">this</span>.handelHobby.bind(<span class="keyword">this</span>, key)&#125; /&gt; &#123;value.title&#125;</span><br><span class="line">                                &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                            )</span></span><br><span class="line"><span class="regexp">                        &#125;)</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                    &lt;br /</span>&gt;</span><br><span class="line">                  备注：&lt;textarea vlaue=&#123;<span class="keyword">this</span>.state.info&#125; onChange=&#123;<span class="keyword">this</span>.handleInfo&#125; /&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"submit"</span> defaultValue=<span class="string">"提交"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ReactForm;</span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React中巧妙获取多个input框的值"><a href="#React中巧妙获取多个input框的值" class="headerlink" title="React中巧妙获取多个input框的值"></a>React中巧妙获取多个input框的值</h2><p>&emsp;看了上面的表单，你是否觉得这有多少个表单元素，就需要定义多少个onchange函数来监听他的改变，之后都是调用setState中，改变state里的数据，如果input框的数量少也还好说，假如有100个Input框呢？那我们不得写100次… 所以我们可以采取以下的方式，来巧妙的解决这个问题,直接上代码了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      deion: <span class="string">''</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function"><span class="params">name</span> =&gt;</span> <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//  [name]表示一个可变的参数，也就是你handleChange()中传递的参数。</span></span><br><span class="line"><span class="comment">//  你传递的是name，就将event.target.value赋值给name</span></span><br><span class="line"><span class="comment">//  你传递的是deion，就将event.target.value赋值给name</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; [name]: event.target.value &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.name,)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.deion)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange(<span class="string">'name'</span>)&#125; /&gt;</span><br><span class="line">        &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange(<span class="string">'deion'</span>)&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></div><p>当然也有人写成这种方式，其实也是一个意思，也贴上来吧。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      deion: <span class="string">''</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   onInputChange(e)&#123;  </span><br><span class="line">        <span class="keyword">let</span> inputValue  = e.target.value,</span><br><span class="line">            inputName   = e.target.name;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            [inputName] : inputValue</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input name=<span class="string">"username"</span> onChange=&#123;<span class="keyword">this</span>.handleChange()&#125; /&gt;</span><br><span class="line">        &lt;input name=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange()&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React中localStorage的使用"><a href="#React中localStorage的使用" class="headerlink" title="React中localStorage的使用"></a>React中localStorage的使用</h2><p>&emsp;既然提到了localStorage，就简单讲讲吧。</p><ol><li>什么是localStorage<blockquote><p>在HTML5中，新加入了一个localStorage特性，这个特性主要是用来作为本地存储来使用的，解决了cookie存储空间不足的问题(cookie中每条cookie的存储空间为4k)，localStorage中一般浏览器支持的是5M大小，这个在不同的浏览器中localStorage会有所不同。</p></blockquote></li></ol><ol start="2"><li>localStorage的优势<blockquote><ol><li>localStorage拓展了cookie的4K限制</li><li>localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库，相比于cookie可以节约带宽，但是这个却只有在高版本的浏览器中才支持的   </li></ol></blockquote></li></ol><ol start="3"><li>localStorage的局限<blockquote><ol><li>浏览器的大小不统一，并且在IE8以上的IE版本才支持localStorage这个属性</li><li>目前所有的浏览器中都会把localStorage的值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换</li><li>localStorage在浏览器的隐私模式下面是不可读取的</li><li>localStorage本质上是对字符串的读取，如果存储内容多的话会消耗内存空间，会导致页面变卡</li><li>localStorage不能被爬虫抓取到</li></ol></blockquote></li></ol><ol start="4"><li>localStorage与sessionStorage的区别<blockquote><p>唯一一点区别就是localStorage属于永久性存储，而sessionStorage属于当会话结束的时候，sessionStorage中的键值对会被清空</p></blockquote></li></ol><p>一般像用户登录，就可以将用户的数据保存到localStorage中，还有比如实现todolist功能，你新增一个待办事项等都会用到localStorage存储数据。防止页面刷新，需要重新设置数据，或者重新发送http请求获取数据等。在react中使用也没什么好说的，两个几个函数注意一下。这代码是对localStorage的简单封装，模块化，方便在组件里写业务的时候调用。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage=&#123;</span><br><span class="line">    <span class="comment">// 将数据保存进缓存(注意，必须将数据序列化为JSON字符串)</span></span><br><span class="line">    <span class="keyword">set</span>(key,value)&#123;</span><br><span class="line">        localStorage.setItem(key,<span class="built_in">JSON</span>.stringify(value));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取出本地缓存（注意，取出本地缓存中的数据时，需要将json字符串转换成对象类型）</span></span><br><span class="line">    <span class="keyword">get</span>(key)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(key));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除本地缓存。</span></span><br><span class="line">    remove(key)&#123;</span><br><span class="line">        localStorage.removeItem(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> storage;</span><br></pre></td></tr></table></figure></div><br/><br/><br/><h2 id="React中父子组件传值"><a href="#React中父子组件传值" class="headerlink" title="React中父子组件传值"></a>React中父子组件传值</h2><p>&emsp; <strong>什么叫父子组件：组件的相互调用中，我们把调用者称为父组件，被调用者称为子组件。</strong>   </p><h3 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h3><ol><li>父组件在引用子组件的时候定义一个属性</li><li>子组件里面可以通过 <code>this.props.name</code> 获取到父组件传递过来的值。  </li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">'../children'</span></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Children name=<span class="string">'jack'</span>&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h4&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Children;</span></span><br></pre></td></tr></table></figure></div><h3 id="父组给子组件传递方法"><a href="#父组给子组件传递方法" class="headerlink" title="父组给子组件传递方法"></a>父组给子组件传递方法</h3><ol><li>父组件调用子组件的时候将方法定义在子组件上      </li><li>子组件通过this.props.run接收</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">'../children'</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">       alert(<span class="string">'我是parent组件的run方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 将run方法传递给子组件， parentFn自定义叫啥都行，子组件接收以你自定义的属性名为准</span></span><br><span class="line">            &lt;Children parentFn=&#123;<span class="keyword">this</span>.run&#125;&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">// 获取父组件传递的run方法。</span></span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.props.parentFn&#125;&gt;点击执行parent的run方法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Children;</span></span><br></pre></td></tr></table></figure></div><h3 id="将整个父组件传递给子组件"><a href="#将整个父组件传递给子组件" class="headerlink" title="将整个父组件传递给子组件"></a>将整个父组件传递给子组件</h3><ol><li>父组件调用子组件的时候将this(父组件自己)定义在子组件上 </li><li>子组件还是通过<code>this.props</code>来调用</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">'../children'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            msg:<span class="string">'我是父组件'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">       alert(<span class="string">'我是parent组件的run方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">//parent组件引用Children组件，将parent组件中的run方法传递给子组件。</span></span><br><span class="line">            &lt;Children parent=&#123;<span class="keyword">this</span>&#125;&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/* 因为将整个父组件传递过来了，所以子组件用props既可以接收方法，也可以接受参数。 */</span>&#125;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.parent.run&#125;&gt;点击执行parent的run方法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;h1&gt;  &#123;this.props.parent.state.msg&#125;  &lt;/</span>h1&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Children;</span></span><br></pre></td></tr></table></figure></div><h3 id="父组件调用子组件的数据和方法"><a href="#父组件调用子组件的数据和方法" class="headerlink" title="父组件调用子组件的数据和方法"></a>父组件调用子组件的数据和方法</h3><ol><li>父组件调用子组件时定义<code>ref</code>属性</li><li>在父组件内通过<code>this.refs.</code>来获取子组件的数据或者方法</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            hero: <span class="string">'寒冰射手'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    childrenFn()&#123;</span><br><span class="line">        alert(<span class="string">"我是子组件方法"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1&gt;我是子组件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Children;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">'../children'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChildren = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 父组件获取子组件里的数据</span></span><br><span class="line">        alert(<span class="keyword">this</span>.refs.children.state.hero);</span><br><span class="line">        <span class="comment">// 父组件调用子组件里的方法</span></span><br><span class="line">        <span class="keyword">this</span>.refs.children.childrenFn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">           </span><br><span class="line">            &lt;div&gt;</span><br><span class="line">&#123;<span class="comment">/* 引用子组件时定义ref属性*/</span>&#125;</span><br><span class="line">                &lt;Children ref=<span class="string">'children'</span>&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.getChildren&#125;&gt;点击获取children的数据和方法&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></div><h3 id="子组件主动向父组件传递数据"><a href="#子组件主动向父组件传递数据" class="headerlink" title="子组件主动向父组件传递数据"></a>子组件主动向父组件传递数据</h3><ol><li>先在父组件内定义一个获取子组件数据的方法，供子组件调用。</li><li>在子组件调用父组件的方法即可，需要什么参数，在.bind(this, param1,param2…)即可</li><li>注意：父组件在接收参数时，时默认从param1开始的。并不会将this作为第一个参数。详细请看代码。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Children <span class="keyword">from</span> <span class="string">'../children'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个获取子组件数据的方法，供子组件调用。</span></span><br><span class="line">    getChildrenData = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)   <span class="comment">//  接收到子组件传递过来的 "盖伦"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/* 可以为子组件传递整个父组件*/</span>&#125;</span><br><span class="line">            &lt;Children parent=&#123;<span class="keyword">this</span>&#125;&gt;&lt;<span class="regexp">/Children&gt;</span></span><br><span class="line"><span class="regexp">&#123;/</span>* 也可以为子组件传递一个方法 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;Children getChildrenData=&#123;this.getChildrenData&#125;&gt;&lt;/</span>Children&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure></div></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/* 先获取父组件，在调用父组件的getChildrenData方法，传递数据给父组件 */</span>&#125;</span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.props.parent.getChildrenData.bind(<span class="keyword">this</span>,<span class="string">"盖伦"</span>)&#125;&gt;发送数据给父组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&#123;/</span>* 直接调用父组件的getChildrenData方法，传递数据给父组件 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.props.getChildrenData.bind(this,"盖伦")&#125;&gt;发送数据给父组件&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Children;</span></span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React中的生命周期函数"><a href="#React中的生命周期函数" class="headerlink" title="React中的生命周期函数"></a>React中的生命周期函数</h2><h3 id="什么是声明生命周期函数？"><a href="#什么是声明生命周期函数？" class="headerlink" title="什么是声明生命周期函数？"></a>什么是声明生命周期函数？</h3><blockquote><p>生命周期函数是组件在某一个时刻会自动执行的函数，总共有8个如下：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> componentWillMount();</span><br><span class="line"><span class="number">2.</span> render() </span><br><span class="line"><span class="number">3.</span> componentDidMount()</span><br><span class="line"><span class="number">4.</span> shouldComponentUpdate()</span><br><span class="line"><span class="number">5.</span> componentWillUpdate()</span><br><span class="line"><span class="number">6.</span> componentDidUpdate()</span><br><span class="line"><span class="number">7.</span> componentWillReceiveProps()</span><br><span class="line"><span class="number">8.</span> componentWillUnmount()</span><br></pre></td></tr></table></figure></div><p> <strong>一: 挂载阶段 (Mounting) 执行的生命周期函数：</strong></p><blockquote><ol><li>UNSAFE_componentWillMount() == componentWillMount() 组件将要挂载阶段自动执行</li><li>render() 渲染页面内容时自动执行</li><li>componentDidMount() 组件挂载完成自动执行</li><li>页面第一次加载的时候生命周期函数的执行顺序…<img src="/images/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B01.png" alt="avatar"></li></ol></blockquote><p><strong>二: 更新阶段 (updation) 执行的生命周期函数：</strong>props更新和states更新会执行的生命周期函数</p><blockquote><ol><li>shouldComponentUpdate()  数据需要更新吗？需要返回true或false</li><li>UNSAFE_componentWillUpdate()  == componentWillUpdate()  更新将要更新</li><li>componentDidUpdate()  更新完成时执行</li><li>执行顺序如下<img src="/images/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B02.png" alt="avatar"></li></ol></blockquote><p> <strong>三: 其他几个声明周期函数</strong></p><blockquote><ol><li>componentWillReceiveProps()  只有子组件才有这个生命周期函数,当子组件接收到父组件传递的新的数据props会执行。</li><li>componentWillUnmount() 组件将要被移除的时候执行的函数</li></ol></blockquote><p><br/><br/></p><h2 id="React中的defaultProps和PropTypes"><a href="#React中的defaultProps和PropTypes" class="headerlink" title="React中的defaultProps和PropTypes"></a>React中的defaultProps和PropTypes</h2><blockquote><ol><li>defaultProps:父子组件传值中，如果父组件调用子组件的时候不给子组件传值，可以在子组件中使用defaultProps定义的默认值</li><li>propTypes：验证父组件传递给子组件的类型合法性</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; </span><br><span class="line">           </span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                <span class="comment">// 父组件如果没有传递title给Children,则会调用defaultProps中的默认值'标题'</span></span><br><span class="line">                <span class="comment">// 父组件如果传递了num属性过来，则会在propTypes中校验是否为num类型</span></span><br><span class="line">                &lt;h2&gt;---&#123;<span class="keyword">this</span>.props.title&#125;--- &#123;<span class="keyword">this</span>.props.num&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//defaultProps如果父组件调用子组件的时候不给子组件传值，可以在子组件中使用defaultProps定义的默认值</span></span><br><span class="line">Children.defaultProps=&#123;</span><br><span class="line">    title:<span class="string">'标题'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同行propTypes定义父组件给子组件传值的类型</span></span><br><span class="line">Header.propTypes=&#123;</span><br><span class="line">    num:PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Children;</span><br></pre></td></tr></table></figure></div><p><br/><br/></p><h2 id="React获取服务器APi接口的数据"><a href="#React获取服务器APi接口的数据" class="headerlink" title="React获取服务器APi接口的数据"></a>React获取服务器APi接口的数据</h2><p>react中没有提供专门的请求数据的模块，但是我们可以使用任何第三方请求数据模块实现请求数据，使用很简单，官方文档介绍都比较详细，这里就不贴演示代码了。</p><blockquote><ol><li>使用<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a></li><li>使用<a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="noopener">fetch-jsonp</a></li></ol></blockquote><h2 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h2><h3 id="React路由的配置"><a href="#React路由的配置" class="headerlink" title="React路由的配置"></a>React路由的配置</h3><blockquote><ol><li>找到官方文档 <a href="https://reacttraining.com/react-router/web/example/bas1" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/example/bas1</a>. </li><li>安装  yarn add  react-router-dom</li><li>找到项目的根组件引入 import { BrowserRouter as Router, Route, Link } from “react-router-dom”;</li><li>复制官网文档根组件里面的内容进行修改  （加载的组件要提前引入）</li></ol></blockquote><h3 id="React动态路由传值取值"><a href="#React动态路由传值取值" class="headerlink" title="React动态路由传值取值"></a>React动态路由传值取值</h3><ol><li><p>动态路由配置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/content/:aid"</span> component=&#123;Content&#125; /&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>对应的动态路由加载的组件里面获取传值 <code>this.props.match.params</code></p></li><li><p>常用到动态路由的场景：<br>&emsp;首页点击某个商品，获取对应的商品详情 思路：</p><blockquote><ol><li>在首页定义跳转的url路径，并携带商品的id         <code>&lt;Link to = &#39;product/:${item.id}&#39;&gt;</code></li><li>在详情页面解析url，并获取到传递到详情页面的id，  <code>this.props.match.id</code></li><li>根据id的不同动态的发送不同的请求获取商品详情数据, <code>axios.get(&quot;http://xxxxx/xxxx/&quot;+id)</code></li><li>将获取到的数据保存到变量中                     <code>setState({})</code></li><li>在页面渲染数据。                              <code>render()</code></li></ol></blockquote></li></ol><h3 id="React中路由的嵌套"><a href="#React中路由的嵌套" class="headerlink" title="React中路由的嵌套"></a>React中路由的嵌套</h3><blockquote><p>&emsp;在很多项目中，通常有一个通用的模板样式，比如头部菜单栏固定，底部公司信息固定，左边子菜单固定，只是某一个主要显示的内容区域根据你选择的功能模块不同，渲染出不同的页面信息，这就需要用到动态路由。常见的管理系统。用户管理、个人中心、等等。你点击那个页面，就跳转到那个页面。</p></blockquote><blockquote><p><code>this.props.match.url</code>可以直接匹配上一级的路由</p></blockquote><blockquote><p>比如商品下有商品列表和商品添加，就可以如下配置，在主页引入shop组件，shop组件里引入shopList和shopAdd组件。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=&#123;<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.props.match.url&#125;</span>/`</span>&#125; component=&#123;ShopList&#125; /&gt;  <span class="comment">//后面加个`/`相当于默认加载shopList页面。</span></span><br><span class="line">&lt;Route  path=&#123;<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.props.match.url&#125;</span>/add`</span>&#125; component=&#123;ShopAdd&#125; /&gt;</span><br></pre></td></tr></table></figure></div><h3 id="React路由模块化"><a href="#React路由模块化" class="headerlink" title="React路由模块化"></a>React路由模块化</h3><blockquote><p>参考<a href="https://reacttraining.com/react-router/web/example/route-config" target="_blank" rel="noopener">react-router-dom</a>的模块化功能<br>我自己的理解，路由模块化其实解决的也就是路由抽取、路由封装，统一管理的管理。</p></blockquote><blockquote><p>我们想一下，如果按照普通的路由配置，根组件配置路由规则，每就要多增加一个功能模块，对应就要多增加一条Route规则，最基础的路由是如下配置的吧！如果项目小，这样配置是没有问题的，可如果项目规模较大，这样配置，后期肯定是不好维护的。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./components/User'</span>;</span><br><span class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">'./components/Shop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;header className=<span class="string">"title"</span>&gt;</span><br><span class="line">            &lt;Link to=<span class="string">"/"</span>&gt;首页组件&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Link to="/u</span>ser<span class="string">"&gt;用户页面&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;Link to="</span>/shop<span class="string">"&gt;商户&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;/header&gt;</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">          &lt;Route exact path="</span>/<span class="string">" component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/user<span class="string">" component=&#123;User&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/shop<span class="string">" component=&#123;Shop&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>模块化后，相当于将路由的规则定义在了一个<code>routes</code>数组里，专门来存放你的路由。在<code>rander()</code>函数中去循环routes里的数据，这样你是不是就不用再改下面的代码了，直接在上面先引入组件，然后在<code>routes</code>中配置一下数据就好了。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./components/User'</span>;</span><br><span class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">'./components/Shop'</span>;</span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./components/News'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,          <span class="comment">//路由跳转路径</span></span><br><span class="line">    component: Home,    <span class="comment">//需要加载的组件</span></span><br><span class="line">    exact:<span class="literal">true</span>          <span class="comment">//知否精准匹配</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/shop"</span>,</span><br><span class="line">    component: Shop</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/user"</span>,</span><br><span class="line">    component: User</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/news"</span>,</span><br><span class="line">    component: News</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;header className=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;Link to=<span class="string">"/"</span>&gt;首页组件&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Link to="/u</span>ser<span class="string">"&gt;用户页面&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/shop<span class="string">"&gt;商户&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/news<span class="string">"&gt;新闻&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;/header&gt; </span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              routes.map((route,key)=&gt;&#123;</span></span><br><span class="line"><span class="string">                  //如果上面定义的exact为true则按如下加载配置路由</span></span><br><span class="line"><span class="string">                  if(route.exact)&#123;</span></span><br><span class="line"><span class="string">                    return &lt;Route key=&#123;key&#125; exact path=&#123;route.path&#125; component=&#123;route.component&#125;/&gt;</span></span><br><span class="line"><span class="string">                  &#125;else&#123;</span></span><br><span class="line"><span class="string">                  //如果没设置精准匹配，这样加载。</span></span><br><span class="line"><span class="string">                    return &lt;Route  key=&#123;key&#125;  path=&#123;route.path&#125; component=&#123;route.component&#125;/&gt;</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">              &#125;)</span></span><br><span class="line"><span class="string">            &#125;                </span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>上面的这种方式也并不是真正的模块化，真正的模块化是将路由定义在一个单独文件当中形成一个模块。如下，我们可以一个<code>router.js</code>的路由配置文件。然后<code>export</code>出去，供外部使用，如下，在看我们的<code>App</code>根组件代码是不是清爽了很多，全部都交由<code>router.js</code>去实现了，这不就是封装、模块化的概念。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'../components/User'</span>;</span><br><span class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">'../components/Shop'</span>;</span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'../components/News'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      exact:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/shop"</span>,</span><br><span class="line">      component: Shop</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/news"</span>,</span><br><span class="line">      component: News</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  App.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./model/router.js'</span>; <span class="comment">//引入我们定义好的router模块。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;header className=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;Link to=<span class="string">"/"</span>&gt;首页组件&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Link to="/u</span>ser<span class="string">"&gt;用户页面&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/shop<span class="string">"&gt;商户&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/news<span class="string">"&gt;新闻&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;/header&gt; </span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              routes.map((route,key)=&gt;&#123;</span></span><br><span class="line"><span class="string">                  if(route.exact)&#123;</span></span><br><span class="line"><span class="string">                    return &lt;Route key=&#123;key&#125; exact path=&#123;route.path&#125; component=&#123;route.component&#125;/&gt;</span></span><br><span class="line"><span class="string">                  &#125;else&#123;</span></span><br><span class="line"><span class="string">                    return &lt;Route  key=&#123;key&#125;  path=&#123;route.path&#125; component=&#123;route.component&#125;/&gt;</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">              &#125;)</span></span><br><span class="line"><span class="string">            &#125;                 </span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>最后说一下<code>模块化嵌套路由</code>，比如User组件下有UserAdd和UserList，我们来看一下如何模块化配置吧，具体原理，可以简单理解为，把父组件的路由当做React中的父组件，子路由当做子组件，父组件如何给子组件传值？ 是不是在引入子组件的地方定义好属性，子组件通过props来接收？对的，在模块化嵌套路由中，也是这种思路实现的，只不过写法得照react-route-dom这样规定的写。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../components/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'../components/User'</span>;</span><br><span class="line">    <span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">'../components/User/UserList'</span>;</span><br><span class="line">    <span class="keyword">import</span> UserAdd <span class="keyword">from</span> <span class="string">'../components/User/UserAdd'</span>;</span><br><span class="line">    <span class="keyword">import</span> UserEdit <span class="keyword">from</span> <span class="string">'../components/User/UserEdit'</span>;</span><br><span class="line"><span class="keyword">import</span> Shop <span class="keyword">from</span> <span class="string">'../components/Shop'</span>;</span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'../components/News'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      exact:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/shop"</span>,</span><br><span class="line">      component: Shop</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User,  </span><br><span class="line">      routes:[   <span class="comment">/*嵌套路由,你的子路由，就要在User下在定义一个routes数组*/</span></span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">"/user/"</span>,</span><br><span class="line">          component: UserList</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">"/user/add"</span>,</span><br><span class="line">          component: UserAdd</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">"/user/edit"</span>,</span><br><span class="line">          component: UserEdit</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/news"</span>,</span><br><span class="line">      component: News</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./model/router.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;header className=<span class="string">"title"</span>&gt;</span><br><span class="line">                &lt;Link to=<span class="string">"/"</span>&gt;首页组件&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Link to="/u</span>ser<span class="string">"&gt;用户页面&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/shop<span class="string">"&gt;商户&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/news<span class="string">"&gt;新闻&lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;/header&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              routes.map((route,key)=&gt;&#123;</span></span><br><span class="line"><span class="string">                  if(route.exact)&#123;</span></span><br><span class="line"><span class="string">                    return &lt;Route key=&#123;key&#125; exact path=&#123;route.path&#125;                     </span></span><br><span class="line"><span class="string">                    render=&#123;props =&gt; (</span></span><br><span class="line"><span class="string">                        // route.component是一级路由，routes是嵌套路由</span></span><br><span class="line"><span class="string">                      &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /&gt;</span></span><br><span class="line"><span class="string">                    )&#125;</span></span><br><span class="line"><span class="string">                    /&gt;</span></span><br><span class="line"><span class="string">                  &#125;else&#123;</span></span><br><span class="line"><span class="string">                    return &lt;Route  key=&#123;key&#125;  path=&#123;route.path&#125; </span></span><br><span class="line"><span class="string">                    render=&#123;props =&gt; (</span></span><br><span class="line"><span class="string">                      &lt;route.component &#123;...props&#125; routes=&#123;route.routes&#125; /&gt;</span></span><br><span class="line"><span class="string">                    )&#125;</span></span><br><span class="line"><span class="string">                    /&gt;</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">              &#125;)</span></span><br><span class="line"><span class="string">            &#125;            </span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure></div><p>还有一些关于react的知识，后续再整理吧…<br>关与React我觉得GitHub这篇写的总结还比较好。有兴趣可以看看   —&gt;    <a href="https://github.com/bailicangdu/react-pxq" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&quot;React之绑定属性&quot;&gt;&lt;a href=&quot;#React之绑定属性&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="React" scheme="https://courage-kevin.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://courage-kevin.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>CSS技巧总结</title>
    <link href="https://courage-kevin.github.io/2020/03/04/CSS%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://courage-kevin.github.io/2020/03/04/CSS%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-04T15:14:19.000Z</published>
    <updated>2020-03-04T15:41:07.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS技巧总结"><a href="#CSS技巧总结" class="headerlink" title="CSS技巧总结"></a>CSS技巧总结</h1><h2 id="CSS控制缩略缺省显示…"><a href="#CSS控制缩略缺省显示…" class="headerlink" title="CSS控制缩略缺省显示…"></a>CSS控制缩略缺省显示…</h2><p>比如有些时候，因为文字太长，影响了页面的样式，可以使用如下的css样式。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">width: <span class="number">150</span>rpx; <span class="comment">// 因为设置了overflow：hidden属性，控制显示长度，不设置的话，无法出现...省略的效果，</span></span><br><span class="line">text-align: center;<span class="comment">// 文字居中显示</span></span><br><span class="line">overflow: hidden; <span class="comment">// 必要</span></span><br><span class="line">white-space: nowrap; <span class="comment">// 必要 控制不换行</span></span><br><span class="line">text-overflow: ellipsis;<span class="comment">// 必要 控制省略部分以...结束</span></span><br></pre></td></tr></table></figure></div><p>小程序拓展：Lin-UI有对WXS的支持，可以直接这样使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 先引入wxs</span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">"../../miniprogram_npm/lin-ui/filter/string.wxs"</span> <span class="attr">module</span>=<span class="string">"strWxs"</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 然后在需要的地方写上一小段表达式，这样就不需要去写Css啦。</span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"spu-text"</span>&gt;</span></span><br><span class="line">  &#123;&#123;item.title.length&gt;8 ? strWxs.substring(item.title,0,7)+"..." : item.title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS技巧总结&quot;&gt;&lt;a href=&quot;#CSS技巧总结&quot; class=&quot;headerlink&quot; title=&quot;CSS技巧总结&quot;&gt;&lt;/a&gt;CSS技巧总结&lt;/h1&gt;&lt;h2 id=&quot;CSS控制缩略缺省显示…&quot;&gt;&lt;a href=&quot;#CSS控制缩略缺省显示…&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="css" scheme="https://courage-kevin.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>SKU和SPU</title>
    <link href="https://courage-kevin.github.io/2020/03/02/SKU%E5%92%8CSPU/"/>
    <id>https://courage-kevin.github.io/2020/03/02/SKU%E5%92%8CSPU/</id>
    <published>2020-03-02T14:29:53.000Z</published>
    <updated>2020-03-02T14:58:24.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SKU和SPU到底是个啥？"><a href="#SKU和SPU到底是个啥？" class="headerlink" title="SKU和SPU到底是个啥？"></a>SKU和SPU到底是个啥？</h1><ul><li>SKU(stock keeping unit):库存量单位</li><li>SPU(standard product unit):标准化产品单元</li></ul><p><strong>帮你去记忆，SKU和SPU的区别就是一个K，一个P的区别！</strong><br>英文和我一样记不住这么长单词的这么理解吧，K(库存)，P(product)所以SKU就是和库存相关的一个概念。   </p><h2 id="SKU"><a href="#SKU" class="headerlink" title="SKU"></a>SKU</h2><p>装逼一点的说法，就是库存量单位。   </p><p>用人话讲就是你上网买东西，是不是要先确定买什么商品？选好商品后再来机型、再选自己喜欢的颜色、配置、尺寸等等等，等选好后你发现，你要的这个颜色的机型没货了…..   </p><p>话说到这里大家应该知道什么是SKU了吗？其实就是电商重通过商品不同的属性，来计算库存，同一件商品搭配不同的属性，就会有很多很多种组合，这些组合，称之为SKU。一台mac有灰色、白色、这就是两个SKU。 对照下图自己脑补… 有多少种组合就有多少个SKU。可以找些女装商品去试试…数清楚有多少种组合了，你就彻底知道什么叫SKU了。<br><img src="/images/sku.png" alt="avatar">  </p><h2 id="SPU"><a href="#SPU" class="headerlink" title="SPU"></a>SPU</h2><p>装逼一点的说法，就是标准化产品单元</p><p>用人话讲，就是商品，只是这个商品加了一个标准化，还是用刚刚的例子，比如你要去买一个手机，你能确定是买苹果，还是买华为？华为Mate10、华为Mate20、iphone100 plus、iphone250 plus、这些都叫标准化产品，即华为、苹果是一个品牌，加上具体的机型，就是一个SPU，你不能说华为手机就是一个SPU，而是要加上确切的型号，组合成一个SPU，你上网买手机，你选的iphone100plus，人给你发个iphone5你乐意吗？不都是苹果手机吗？（杠精别说话…）不乐意吧。所以一个商品加上标准的型号，就可以称之为一个SPU，而加上颜色，内存大小、送手机壳、送充电器、等等这些又可以组合成多个SKU。了解了吗？<br><img src="/images/spu.png" alt="avatar">  </p><p>总结：<br>    SKU，确定库存、多重组合<br>    SPU，单个商品，具体型号，组成一个单品。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SKU和SPU到底是个啥？&quot;&gt;&lt;a href=&quot;#SKU和SPU到底是个啥？&quot; class=&quot;headerlink&quot; title=&quot;SKU和SPU到底是个啥？&quot;&gt;&lt;/a&gt;SKU和SPU到底是个啥？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;SKU(stock keeping un
      
    
    </summary>
    
    
    
      <category term="sku spu" scheme="https://courage-kevin.github.io/tags/sku-spu/"/>
    
  </entry>
  
  <entry>
    <title>组件设计原则</title>
    <link href="https://courage-kevin.github.io/2020/02/29/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://courage-kevin.github.io/2020/02/29/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2020-02-29T09:20:12.000Z</published>
    <updated>2020-02-29T10:34:36.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件设计原则总结"><a href="#组件设计原则总结" class="headerlink" title="组件设计原则总结"></a>组件设计原则总结</h1><h2 id="你必须在组件的灵活性和易用性-稳定之间做出一个选择，找到一个平衡点"><a href="#你必须在组件的灵活性和易用性-稳定之间做出一个选择，找到一个平衡点" class="headerlink" title="你必须在组件的灵活性和易用性/稳定之间做出一个选择，找到一个平衡点"></a>你必须在组件的灵活性和易用性/稳定之间做出一个选择，找到一个平衡点</h2><blockquote><p>越是灵活的组件，易用性就越差，简单说就是复杂性越高；而越是简单的组件，灵活性和定制型就不够。</p></blockquote><h2 id="组件的意义是什么？"><a href="#组件的意义是什么？" class="headerlink" title="组件的意义是什么？"></a>组件的意义是什么？</h2><blockquote><p>组件从三方面：样式、骨架、业务逻辑/行为 上对代码进行封装，方便我们在日后重用/复用样式，骨架和业务逻辑。</p></blockquote><h2 id="组件必须要提供给用户的几个特点和方法"><a href="#组件必须要提供给用户的几个特点和方法" class="headerlink" title="组件必须要提供给用户的几个特点和方法"></a>组件必须要提供给用户的几个特点和方法</h2><blockquote><p>组件必须允许用户通过某种方式对组件进行<code>自定义</code>,不能自定义的组件或者说自定义程度很弱的组件不是一个好的组件设计。<code>自定义</code>性通常包括：</p><ol><li>对样式的自定义</li><li>对骨架的自定义</li><li>对业务逻辑的自定义</li></ol></blockquote><blockquote><p>从现有的技术来讲，对于以上的自定义性来讲，微信小程序有以下几个方式来支持自定义。</p><ol><li>外部样式类（样式自定义）</li><li>Slot插槽（骨架自定义）</li><li>业务逻辑(Behaior行为)</li></ol></blockquote><blockquote><p>但是业务逻辑自定义也会面临两个问题</p><ol><li>Behaior依旧繁琐</li><li>组件的业务逻辑自定义从某种程度来讲，是伪命题</li></ol></blockquote><blockquote><p>为什么是伪命题？因为组件A之所以是组件A，而不是组件B，正是由于他自己独特的业务逻辑，如果业务逻辑改变了，那么组件A可能就不应该是组件A，所以组件对于业务逻辑的自定义性是有待探讨的。</p></blockquote><h4 id="怎么样设计通用的组件呢？"><a href="#怎么样设计通用的组件呢？" class="headerlink" title="怎么样设计通用的组件呢？"></a>怎么样设计通用的组件呢？</h4><p>试想一下我们如果需要使用第三方UI框架，每一个样式都需要你去定义，会不会就失去了使用UI框架的意义，为什么要去用UI框架，无非就是为了方便，不用重复造轮子，直接用现成的就好。</p><p>那如果针对我们自己的项目，需要自定义组件的时候，怎么根据第三方库设计出更加灵活通用的组件呢？</p><ol><li>设计出合理的默认值，样式默认值，插槽默认值。</li><li>能不固定元素高和宽，就不要将高和宽写死。</li></ol><p>待总结…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件设计原则总结&quot;&gt;&lt;a href=&quot;#组件设计原则总结&quot; class=&quot;headerlink&quot; title=&quot;组件设计原则总结&quot;&gt;&lt;/a&gt;组件设计原则总结&lt;/h1&gt;&lt;h2 id=&quot;你必须在组件的灵活性和易用性-稳定之间做出一个选择，找到一个平衡点&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="UI框架" scheme="https://courage-kevin.github.io/tags/UI%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Semver</title>
    <link href="https://courage-kevin.github.io/2020/02/27/%E4%BB%80%E4%B9%88%E6%98%AFsemver/"/>
    <id>https://courage-kevin.github.io/2020/02/27/%E4%BB%80%E4%B9%88%E6%98%AFsemver/</id>
    <published>2020-02-27T15:19:23.000Z</published>
    <updated>2020-02-27T16:01:42.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Semver-语义化版本"><a href="#Semver-语义化版本" class="headerlink" title="Semver 语义化版本"></a>Semver 语义化版本</h1><br>&emsp;今天学习小程序的时候听到这个技术名词，上网查了一下，做个总结，方便查阅。<h2 id="Semver-简介"><a href="#Semver-简介" class="headerlink" title="Semver 简介"></a>Semver 简介</h2><p>&emsp;semver 是<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener"><font color=blue>语义化版本</font></a>（Semantic Versioning）规范的一个实现，目前是由npm的团队维护，实现了版本和版本范围的解析、计算、比较。</p><h2 id="semver-的两个概念"><a href="#semver-的两个概念" class="headerlink" title="semver 的两个概念"></a>semver 的两个概念</h2><ul><li>固定版本：是指例如 0.4.1、1.2.7、1.2.4-beta.0 这样表示包的特定版本的字符串。</li><li>范围版本：是对满足特定规则的版本的一种表示，例如 1.2.3-2.3.4、1.x、^0.2、&gt;1.4.</li></ul><h2 id="版本号格式"><a href="#版本号格式" class="headerlink" title="版本号格式"></a>版本号格式</h2><p>&emsp; 主版本号[MAJOR].次版本号[MINOR].修订号[PATCH]，版本号递增规则如下:</p><ol><li>主版本号：当你做了不兼容的 API 修改。</li><li>次版本号：当你做了向下兼容的功能性新增，可以理解为Feature版本。</li><li>修订号：当你做了向下兼容的问题修正，可以理解为Bug fix版本。</li></ol><h2 id="先行版本号-Pre-release-Version"><a href="#先行版本号-Pre-release-Version" class="headerlink" title="先行版本号 (Pre-release Version)"></a>先行版本号 (Pre-release Version)</h2><p>&emsp; 先行版本号可以作为发布正式版之前的版本，格式是在修订版本号后面加上一个连接号（-），再加上一连串以点（.）分割的标识符，标识符可以由英文、数字和连接号（[0-9A-Za-z-]）组成。example：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.0</span>​​<span class="number">.0</span>-alpha   内部版本</span><br><span class="line"><span class="number">1.0</span><span class="number">.0</span>-alpha<span class="number">.1</span> 公测版本</span><br><span class="line"><span class="number">1.0</span><span class="number">.1</span>-rc      正式版本的候选版本(Release candiate)</span><br><span class="line"><span class="number">1.0</span><span class="number">.0</span><span class="number">-0.3</span><span class="number">.7</span></span><br><span class="line"><span class="number">1.0</span><span class="number">.0</span>-x<span class="number">.7</span>.z<span class="number">.92</span></span><br></pre></td></tr></table></figure></div><h2 id="版本发布准则"><a href="#版本发布准则" class="headerlink" title="版本发布准则"></a>版本发布准则</h2><ol><li>标准的版本号必须采用XYZ的格式，并且X、Y 和 Z 为非负的整数，禁止在数字前方补零，版本发布需要严格递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li><li>某个软件版本发行后，任何修改都必须以新版本发行。</li><li>1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的API时，就可以发布1.0.0版本了。</li><li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较。</li></ol><h2 id="npm包依赖"><a href="#npm包依赖" class="headerlink" title="npm包依赖"></a>npm包依赖</h2><p>&emsp; 当执行npm install package -S 来安装三方包时，npm 会首先安装包的最新版本，然后将包名及版本号写入到 package.json 文件中。</p><p>比如，通过npm 安装 react 时：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"~16.2.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp; 项目对包的依赖可以使用下面的 3 种方法来表示(假设当前版本号是 16.2.0):</p><ul><li>兼容模块新发布的补丁版本：~16.2.0、16.2.x、16.2</li><li>兼容模块新发布的小版本、补丁版本：^16.2.0、16.x、16</li><li>兼容模块新发布的大版本、小版本、补丁版本：*、x</li></ul><h2 id="npm包发布"><a href="#npm包发布" class="headerlink" title="npm包发布"></a>npm包发布</h2><p>&emsp; 通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：</p><ul><li>升级补丁版本号：npm version patch</li><li>升级小版本号：npm version minor</li><li>升级大版本号：npm version major</li></ul><blockquote><p>当执行 npm publish 时，会首先将当前版本发布到 npm registry，然后更新 dist-tags.latest 的值为新版本。<br>当执行 npm publish –tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）<br>OK，现在你应该知道 npm install package@next时next代表的含义了吧  </p></blockquote><p><br><br></p><p>原作者地址：<a href="https://segmentfault.com/a/1190000014405355" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014405355</a> 、 <a href="https://www.jianshu.com/p/a7490344044f" target="_blank" rel="noopener">https://www.jianshu.com/p/a7490344044f</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Semver-语义化版本&quot;&gt;&lt;a href=&quot;#Semver-语义化版本&quot; class=&quot;headerlink&quot; title=&quot;Semver 语义化版本&quot;&gt;&lt;/a&gt;Semver 语义化版本&lt;/h1&gt;&lt;br&gt;
&amp;emsp;今天学习小程序的时候听到这个技术名词，上网查
      
    
    </summary>
    
    
      <category term="开发小知识" scheme="https://courage-kevin.github.io/categories/%E5%BC%80%E5%8F%91%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="semver" scheme="https://courage-kevin.github.io/tags/semver/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="https://courage-kevin.github.io/2020/02/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://courage-kevin.github.io/2020/02/24/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2020-02-24T13:58:58.000Z</published>
    <updated>2020-02-24T14:00:07.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="wxecce373e86f54d1e"><a href="#wxecce373e86f54d1e" class="headerlink" title="wxecce373e86f54d1e"></a>wxecce373e86f54d1e</h3><h3 id="891c8c73ae3e3b6c7992ecc7161d6e38"><a href="#891c8c73ae3e3b6c7992ecc7161d6e38" class="headerlink" title="891c8c73ae3e3b6c7992ecc7161d6e38"></a>891c8c73ae3e3b6c7992ecc7161d6e38</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h2&gt;&lt;h3 id=&quot;wxecce373e86f54d1e&quot;&gt;&lt;a href=&quot;#wxecce373e86f54d1e&quot; cla
      
    
    </summary>
    
    
    
      <category term="小程序" scheme="https://courage-kevin.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>常用命令大全</title>
    <link href="https://courage-kevin.github.io/2020/02/06/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://courage-kevin.github.io/2020/02/06/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-02-06T12:49:18.000Z</published>
    <updated>2020-02-06T13:21:14.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">说明</span>:<span class="string">Nginx命令需要在nginx.exe文件所在位置运行。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">start</span> <span class="string">nginx  启动</span></span><br><span class="line"><span class="attr">nginx</span> <span class="string">-s reload 重启</span></span><br><span class="line"><span class="attr">nginx</span> <span class="string">-s stop   nginx停止</span></span><br></pre></td></tr></table></figure></div><p><font color=red size=2>Nginx命令结束</font></p><hr><h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><h2 id="cd命令集"><a href="#cd命令集" class="headerlink" title="cd命令集"></a>cd命令集</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span>命令是linux中最基本的命令语句，必须熟练掌握</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /        返回根目录</span><br><span class="line"><span class="keyword">cd</span> ~        用户主目录</span><br><span class="line"><span class="keyword">cd</span> .        当前目录</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span>       返回到上一级目录</span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/</span>    进入到usr目录</span><br><span class="line"><span class="keyword">cd</span> –        返回上一个目录</span><br><span class="line"><span class="keyword">cd</span>          直接回家</span><br></pre></td></tr></table></figure><h2 id="ls目录和文件"><a href="#ls目录和文件" class="headerlink" title="ls目录和文件"></a>ls目录和文件</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> –l       详细格式，文件权限，时间</span><br><span class="line">ll          和<span class="keyword">ls</span> –l作用相同</span><br><span class="line"><span class="keyword">ls</span> *<span class="string">.txt</span>    查看所有的txt类型文档</span><br></pre></td></tr></table></figure><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 创建目录</span><br><span class="line"><span class="built_in">mkdir</span> a 创建 a目录</span><br><span class="line"><span class="built_in">mkdir</span> -p a/b 创建 a目录，并在a目录里创建b目录</span><br><span class="line"><span class="built_in">mkdir</span> -m <span class="number">777</span> c 创建一个权限为<span class="number">777</span>的C目录</span><br><span class="line"><span class="built_in">rmdir</span>  删除目录（如果目录里有文件，则不能用此命令）</span><br></pre></td></tr></table></figure></div><h2 id="vi创建-查看-编辑文件"><a href="#vi创建-查看-编辑文件" class="headerlink" title="vi创建/查看/编辑文件"></a>vi创建/查看/编辑文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令行：Esc切换到命令行模式。</span><br><span class="line">编辑模式：</span><br><span class="line">按i，在光标前开始编辑</span><br><span class="line">按a，在光标后开始编辑</span><br><span class="line">按o，在当前行的下一行开始编辑</span><br><span class="line">底行模式：按  shift+：冒号。</span><br><span class="line"><span class="symbol">:q!</span> 不保存退出</span><br><span class="line"><span class="symbol">:wq</span> 保存退出</span><br><span class="line"><span class="symbol">:/world</span> 从当前光标处，向上查找world关键字</span><br><span class="line"><span class="symbol">:</span>?world 从当前光标处，向后查找world关键字</span><br></pre></td></tr></table></figure></div><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rm</span> <span class="string">删除文件</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">n.txt 提示y删除n放弃</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">–f n.txt 不提示</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">–rf dirname 不提示递归删除目录下所以内容</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">–rf * 删除所有文件</span></span><br><span class="line"><span class="attr">rm</span> <span class="string">–rf /* 删除所有子目录所有和文件</span></span><br></pre></td></tr></table></figure></div><h2 id="复制和移动文件"><a href="#复制和移动文件" class="headerlink" title="复制和移动文件"></a>复制和移动文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AVRASM"><figure class="iseeu highlight /avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span>复制文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">cp</span> nginx.conf n.txt</span><br><span class="line"><span class="keyword">cp</span> –R tomcat1 tomcat2      <span class="meta">#复制整个目录</span></span><br><span class="line">mv  修改文件名，移动文件</span><br><span class="line">mv  n.txt m.txt</span><br></pre></td></tr></table></figure></div><h2 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cat</span>                 <span class="string">输出文件所有的内容</span></span><br><span class="line"><span class="attr">more</span>                <span class="string">输出文档所有的内容，分页输出，空格浏览下一屏，q退出</span></span><br><span class="line"><span class="attr">less</span>                <span class="string">用法和more相同，只是通过PgUp、PgOn键来控制</span></span><br><span class="line"><span class="attr">tail</span>                <span class="string">用于显示文件后几号，使用频繁</span></span><br><span class="line"><span class="attr">tail</span> <span class="string">-10 nginx.conf 查看nginx.conf的最后10行</span></span><br><span class="line"><span class="attr">tail</span> <span class="string">–f nginx.conf  动态查看日志，方便查看日志新增的信息</span></span><br><span class="line"><span class="meta">ctrl+c</span>              <span class="string">结束查看</span></span><br></pre></td></tr></table></figure></div><h2 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DIFF"><figure class="iseeu highlight /diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar命令位于/bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成name.tar.gz的文件。</span><br><span class="line"><span class="deletion">-c 创建一个新的tar文件</span></span><br><span class="line"><span class="deletion">-v 显示运行过程的信息</span></span><br><span class="line"><span class="deletion">-f 指定文件名</span></span><br><span class="line"><span class="deletion">-z 调用gzip压缩命令进行压缩</span></span><br><span class="line"><span class="deletion">-t 查看压缩文件的内容</span></span><br><span class="line"><span class="deletion">-x 解开tar文件</span></span><br><span class="line">tar –cvf n.tar ./*      压缩当前目录下的所有文件和目录，文件名为n.tar</span><br><span class="line">tar –xvf n.tar          解压压缩包中的文件到当前目录（如果长时间未解压成功 Ctrl+C推出）</span><br><span class="line">tar –cvzf m.tar ./*     解压m.tar文件到当前目录</span><br></pre></td></tr></table></figure></div><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> root  <span class="regexp">/etc/</span>passwd                  在文件中查找关键字root</span><br><span class="line"><span class="keyword">grep</span> root  <span class="regexp">/etc/</span>passwd  –-color         高亮显示</span><br><span class="line"><span class="keyword">grep</span> root  <span class="regexp">/etc/</span>passwd  –A5 –B5         高亮显示，A后<span class="number">5</span>行，B前<span class="number">5</span>行</span><br><span class="line"><span class="keyword">grep</span> -n root <span class="regexp">/etc/</span>passwd                查找并显示行数</span><br><span class="line"><span class="keyword">grep</span> -v root <span class="regexp">/etc/</span>passwd                 取反，查出不含root的数据</span><br></pre></td></tr></table></figure></div><h2 id="Linux防火墙"><a href="#Linux防火墙" class="headerlink" title="Linux防火墙"></a>Linux防火墙</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop       临时关闭</span><br><span class="line">service iptables start      临时开启</span><br><span class="line">chkconfig iptables on       永久开启</span><br><span class="line">chkconfig iptables off      永久关闭</span><br></pre></td></tr></table></figure></div><h2 id="查看安装版本及卸载mysql"><a href="#查看安装版本及卸载mysql" class="headerlink" title="查看安装版本及卸载mysql"></a>查看安装版本及卸载mysql</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> -i mysql</span><br></pre></td></tr></table></figure></div><h2 id="linux下查看mysql安装版本及卸载mysql"><a href="#linux下查看mysql安装版本及卸载mysql" class="headerlink" title="linux下查看mysql安装版本及卸载mysql"></a>linux下查看mysql安装版本及卸载mysql</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> -i mysql</span><br></pre></td></tr></table></figure></div><p><font color=red size=2>linux命令结束</font></p><hr><h1 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h1><h2 id="Redis解压安装指令"><a href="#Redis解压安装指令" class="headerlink" title="Redis解压安装指令"></a>Redis解压安装指令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GAUSS"><figure class="iseeu highlight /gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>            解压完之后需要mke编译redis</span><br><span class="line"><span class="built_in">Make</span> install    编译完之后需要<span class="built_in">Make</span> install 安装redis</span><br></pre></td></tr></table></figure></div><h2 id="Redis基本命令"><a href="#Redis基本命令" class="headerlink" title="Redis基本命令"></a>Redis基本命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf   启动命令:  </span><br><span class="line">redis-cli -p 端口         进入客户端: </span><br><span class="line"><span class="keyword">exit</span>                      退出客户端</span><br></pre></td></tr></table></figure></div><h2 id="编辑redis-conf"><a href="#编辑redis-conf" class="headerlink" title="编辑redis.conf"></a>编辑redis.conf</h2><blockquote><ol><li>注释IP绑定   61行附近</li><li>关闭保护模式  80行附近</li><li>开启后台启动 128行附近</li></ol></blockquote><p><font color=red size=2>Redis命令结束</font></p><hr><h1 id="Mysql命令"><a href="#Mysql命令" class="headerlink" title="Mysql命令"></a>Mysql命令</h1><h2 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql start   启动命令</span><br><span class="line">service mysql stop    停止命令</span><br><span class="line">service mysql restart 重启命令</span><br></pre></td></tr></table></figure></div><h2 id="开放Mysql对外权限"><a href="#开放Mysql对外权限" class="headerlink" title="开放Mysql对外权限"></a>开放Mysql对外权限</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> [权限] <span class="keyword">on</span> [数据库名].[表名] <span class="keyword">to</span> [<span class="string">'用户名'</span>]@[<span class="string">'web服务器的ip地址'</span>] <span class="keyword">identified</span> <span class="keyword">by</span> [<span class="string">'密码'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line">或者指定IP地址</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'192.168.1.103'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></div><h2 id="配置主库配置文件"><a href="#配置主库配置文件" class="headerlink" title="配置主库配置文件"></a>配置主库配置文件</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编辑文件:</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure></div><h2 id="搭建数据库主从的命令及步骤"><a href="#搭建数据库主从的命令及步骤" class="headerlink" title="搭建数据库主从的命令及步骤"></a>搭建数据库主从的命令及步骤</h2><h3 id="查看主库状态-操作的是主库"><a href="#查看主库状态-操作的是主库" class="headerlink" title="查看主库状态(操作的是主库)"></a>查看主库状态(操作的是主库)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure></div><h3 id="设置从库连接主库IP地址-端口-二进制文件-操作的是从库"><a href="#设置从库连接主库IP地址-端口-二进制文件-操作的是从库" class="headerlink" title="设置从库连接主库IP地址/端口/二进制文件 (操作的是从库)"></a>设置从库连接主库IP地址/端口/二进制文件 (操作的是从库)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> <span class="attribute">MASTER_HOST</span>=<span class="string">"192.168.186.132"</span>,</span><br><span class="line"><span class="attribute">MASTER_PORT</span>=3306,</span><br><span class="line"><span class="attribute">MASTER_USER</span>=<span class="string">"root"</span>,</span><br><span class="line"><span class="attribute">MASTER_PASSWORD</span>=<span class="string">"root"</span>,</span><br><span class="line"><span class="attribute">MASTER_LOG_FILE</span>=<span class="string">"mysql-bin.000001"</span>,</span><br><span class="line"><span class="attribute">MASTER_LOG_POS</span>=120</span><br></pre></td></tr></table></figure></div><h3 id="开启主从服务-操作的是从库"><a href="#开启主从服务-操作的是从库" class="headerlink" title="开启主从服务(操作的是从库)"></a>开启主从服务(操作的是从库)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">SLAVE</span>;</span><br></pre></td></tr></table></figure></div><h3 id="查看主从同步状态-操作的是从库"><a href="#查看主从同步状态-操作的是从库" class="headerlink" title="查看主从同步状态(操作的是从库)"></a>查看主从同步状态(操作的是从库)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SLAVE</span> <span class="keyword">STATUS</span>;成功数据表中会显示两个yes</span><br></pre></td></tr></table></figure></div><h3 id="如果报错了可以断开-重新执行上面的操作"><a href="#如果报错了可以断开-重新执行上面的操作" class="headerlink" title="如果报错了可以断开,重新执行上面的操作"></a>如果报错了可以断开,重新执行上面的操作</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">stop</span> <span class="literal">slave</span>  关闭主从服务</span><br></pre></td></tr></table></figure></div><h2 id="amoeba"><a href="#amoeba" class="headerlink" title="amoeba"></a>amoeba</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRYSTAL"><figure class="iseeu highlight /crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./launcher  启动命令   </span><br><span class="line"></span><br><span class="line">如果搭建一主多从需要直接克隆 需要进入/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/ 更改<span class="title">auto</span>的<span class="title">server</span>-<span class="title">uuid</span>  序列号。</span></span><br></pre></td></tr></table></figure></div><p><font color=red size=2>mysql命令结束</font></p><hr><h1 id="Mycat命令"><a href="#Mycat命令" class="headerlink" title="Mycat命令"></a>Mycat命令</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./mycat</span> start       启动</span><br><span class="line"><span class="string">./mycat</span> stop        停止</span><br><span class="line"><span class="string">./mycat</span> restart     重启</span><br><span class="line"><span class="string">./mycat</span> status      检测状态</span><br><span class="line"><span class="string">./mycat</span> dump        临时存储</span><br></pre></td></tr></table></figure><p><font color=red size=2 >mycat命令结束</font></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx命令&quot;&gt;&lt;a href=&quot;#Nginx命令&quot; class=&quot;headerlink&quot; title=&quot;Nginx命令&quot;&gt;&lt;/a&gt;Nginx命令&lt;/h1&gt;&lt;div class=&quot;highlight-wrap&quot;autocomplete=&quot;off&quot; autocor
      
    
    </summary>
    
    
      <category term="常用命令" scheme="https://courage-kevin.github.io/categories/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="常用命令" scheme="https://courage-kevin.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>SSO单点登录</title>
    <link href="https://courage-kevin.github.io/2020/02/06/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://courage-kevin.github.io/2020/02/06/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</id>
    <published>2020-02-06T12:21:00.000Z</published>
    <updated>2020-02-06T12:32:52.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h2 id="没有单点登录存在的问题"><a href="#没有单点登录存在的问题" class="headerlink" title="没有单点登录存在的问题"></a>没有单点登录存在的问题</h2><blockquote><p>在分布式项目中，我们通常会使用Nginx来分发客户请求，从而更好缓解请求对服务器的压力。通过Nginx做负载均衡后，用户的每次请求都会发往不同的服务器。如果采用Session保存用户信息，则可能导致用户登陆多次，这样友好性差。  </p></blockquote><blockquote><p>如何解决这个问题呢？ 我们可以使用单点登录这个技术。实现单点登录的方式有很多，这里只说下利用redis实现单点登录。</p></blockquote><h2 id="实现SSO方式-Redis"><a href="#实现SSO方式-Redis" class="headerlink" title="实现SSO方式-Redis"></a>实现SSO方式-Redis</h2><blockquote><ol><li>用户进行登录操作时，输入用户名和密码.</li><li>JT-WEB服务器接收用户请求时.利用httpClient技术，将用户信息发送给JT-SSO单点登录系统.</li><li>JT-SSO单点登录系统接收前台数据之后进行校验.如果用户名和密码不正确，直接提示返回。如果用户名和密码正确，首先生成加密的秘钥token，之后将user转化为JSON数据，保存到Redis中，之后将token数据返回给JT-WEB服务器.</li><li>JT-WEB接收JT-SSO单点登录系统的返回值数据.如果用户名密码不正确则友好提示给用户.</li><li>如果用户名和密码正确，将token数据保存到用户浏览器的Cookie中。</li></ol></blockquote><p><img src="/images/sso.png" alt="avatar"></p><h1 id="单点登录流程"><a href="#单点登录流程" class="headerlink" title="单点登录流程:"></a>单点登录流程:</h1><blockquote><ol><li>发送用户请求， 用户将用户名及密码发送至前台服务器 </li><li>前台服务器利用httpClent向后台SSO服务器发起请求，后台SSO服务器会对用户信息进行校验， </li><li>SSO服务器接收前台数据后进行校验，如果用户名密码不正确，直接提示返回， </li><li>如果正确生成秘钥并将user转化为JSON数据，保存到token中，将token返回给前台服务器. </li><li>前台服务器接收SSO的返回值数据没如果用户名密码不正确则友好提示用户 </li><li>如果用户名密码正确，将token数据保存到用户浏览器的Cookie中</li><li>任何一台服务器都能访问Redis，通过redis通过token， 缓存有数据，放行， 缓存没有重新登录</li></ol></blockquote><blockquote><p>为什么存在Cookie中 ， 如果客户第二次发起请求，首先前台会判断用户是否登录，因为Cookie中，任何一个前台服务器都能接受用户请求，并且能获取到Cookie信息，拿到Cookie就能拿到最重要的Token数据。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单点登录&quot;&gt;&lt;a href=&quot;#单点登录&quot; class=&quot;headerlink&quot; title=&quot;单点登录&quot;&gt;&lt;/a&gt;单点登录&lt;/h1&gt;&lt;h2 id=&quot;没有单点登录存在的问题&quot;&gt;&lt;a href=&quot;#没有单点登录存在的问题&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://courage-kevin.github.io/categories/JavaWeb/"/>
    
    
      <category term="SSO单点登录" scheme="https://courage-kevin.github.io/tags/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础知识</title>
    <link href="https://courage-kevin.github.io/2020/02/06/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2020/02/06/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-02-06T11:32:12.000Z</published>
    <updated>2020-02-06T12:10:53.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis官方简介"><a href="#Redis官方简介" class="headerlink" title="Redis官方简介"></a>Redis官方简介</h2><blockquote><p>Redis是一个开源（BSD许可），采用key-value结构进行数据存储，用作数据库，缓存和消息队列。它支持数据结构，如字符串，散列，列表，集合，带有范围查询的排序集，位图，超级日志，具有半径查询和流的地理空间索引。Redis具有内置复制，Lua脚本，LRU算法，事务和不同级别的磁盘持久性，并通过Redis Sentinel提供高可用性并使用Redis Cluster自动分区。</p></blockquote><h2 id="人话版什么是Redis"><a href="#人话版什么是Redis" class="headerlink" title="人话版什么是Redis"></a>人话版什么是Redis</h2><blockquote><ol><li>Redis就是一个数据库软件，作用是存储数据的。</li><li>Redis是一个开源的，基于K-V进行存储的内存型数据库，可以用作数据库，缓存，和消息队列。</li><li>Redis是一个Nosql（没有sql）非关系型数据库。</li><li>Redis读写效率高，平均每秒10万读写。</li><li>Redis支持丰富的数据类型String、Hash 、LIST 、Set 、SortedSet 有序集合。</li><li>Redis中操作可以添加事务的支持。</li></ol></blockquote><h2 id="应用的一些场景"><a href="#应用的一些场景" class="headerlink" title="应用的一些场景"></a>应用的一些场景</h2><blockquote><p>比如京东前端页面，基本上都是查询的操作，涉及到删除，更新，添加的操作，用户一般涉及不到后端管理这一块的操作，所以我们只需要吧这些常用的查询数据存储到NoSQL数据库中，客户端可以直接请求NoSQL数据库，如果NoSQL数据库中没有用户需要的数据，就会到关系型数据库中去查找，如果查询到，就会将关系型数据库中的数据，在添加到NoSQL数据库，从而提升性能。</p></blockquote><h2 id="Redis-持久化策略-RDB模式和AOF模式"><a href="#Redis-持久化策略-RDB模式和AOF模式" class="headerlink" title="Redis 持久化策略 RDB模式和AOF模式"></a>Redis 持久化策略 RDB模式和AOF模式</h2><h3 id="什么是RDB模式"><a href="#什么是RDB模式" class="headerlink" title="什么是RDB模式"></a>什么是RDB模式</h3><p>RDB模式是通过保存数据库中的键值对来记录数据库的状态 ，每隔一段时间就会将数据写入(Snapshot)快照， 恢复时在将快照文件直接读到内存里。</p><blockquote><p>优点:</p><ol><li>RDB备份效率是最高的.  </li><li>RDB是一个非常紧凑(compact)的文件，它保存了redis 在某个时间点上的数据集。这种文件非常适合用于进行备份和灾难恢复。</li><li>生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li><li>持久化文件大小可以控制.  </li></ol></blockquote><blockquote><p>缺点:</p><ol><li>RDB方式数据没办法做到实时持久化/秒级持久化。如果需要持久化 ， 我们可以手动执行save或者BGsave命令 ， 频繁执行成本过高.</li><li>RDB文件使用特定二进制格式保存，Redis版本迭代过程中有多个格式的RDB版本，存在老版本Redis服务无法兼容新版RDB格式的问题</li><li>数据过于集中，所有数据都存储到一个文件中 ，一定时间内做一次备份，如果redis意外挂掉的话，就会丢失最后一次快照后的所有修改(数据有丢失)</li><li>Redis作为数据库或者或者队列时不要使用RDB模式.  </li></ol></blockquote><h3 id="什么是AOF模式"><a href="#什么是AOF模式" class="headerlink" title="什么是AOF模式"></a>什么是AOF模式</h3><p> AOF 是通过保存Redis服务器所执行的写命令来记录数据库状态， (set，sadd，lpush 三个命令保存到 AOF 文件中)。</p><blockquote><p>优点:</p><ol><li>监听Redis的日志文件，监听如果发现执行了修改，删除，新增命令，立即根据这条命令把数据持久化，</li><li>AOF持久化方法提供多种的同步频率，默认是每秒同步一次 ， 可以保证数据的准确性. </li></ol></blockquote><blockquote><p>缺点:</p><ol><li>对于具有相同数据的的 Redis，AOF 文件通常会比 RDF 文件体积更大。</li><li>虽然 AOF 提供了多种同步的频率，默认情况下，每秒同步一次的频率也具有较高的性能。但在 Redis 的负载较高时，RDB 比 AOF 具好更好的性能保证。</li><li>AOF只是每次将执行命令追加到AOF文件中，RDB是用快照的形式来持久化整个Redis数据，理论上来讲，RDB模式比AOF模式更加健壮，并且AOF好像有一些BUG  </li></ol></blockquote><blockquote><p>AOF如何恢复数据:   重启 Redis 之后就会进行 AOF 文件的载入。异常修复命令：redis-check-aof –fix 进行修复</p></blockquote><h3 id="AOF-和-RDB-两种持久化方式，我们应该如何选择呢？"><a href="#AOF-和-RDB-两种持久化方式，我们应该如何选择呢？" class="headerlink" title="AOF 和 RDB 两种持久化方式，我们应该如何选择呢？"></a>AOF 和 RDB 两种持久化方式，我们应该如何选择呢？</h3><blockquote><p>如果可以接受小时间内的数据丢失，使用RDB肯定是最好的选择，定时生成快照，便于数据库备份.并且RDB模式恢复数据集的速度比AOF模式恢复的速度要快，RDB还可以避免AOF一些隐藏的BUG.否则就用AOF重写.一般情况下不建议单独使用某一种持久化机制，应该两者结合使用.</p></blockquote><h2 id="Redis的回收策略（淘汰策略）"><a href="#Redis的回收策略（淘汰策略）" class="headerlink" title="Redis的回收策略（淘汰策略）"></a>Redis的回收策略（淘汰策略）</h2><blockquote><ol><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰  </li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰  </li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰  </li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰  </li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 </li><li>no-enviction（驱逐）：禁止驱逐数据</li></ol></blockquote><h2 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis-主从复制"></a>Redis-主从复制</h2><blockquote><p>在不设置主从复制的情况下，我们对数据的操作都是在一台Redis服务器上进行操作的，也就是说读和写以及备份操作都是在一台Redis服务器上进行的，那么随着项目访问量的增加，对Redis服务器的操作也越加频繁，虽然Redis读写速度都很快，但是一定程度上也会造成一定的延时，那么为了解决访问量大的问题，通常会采取的一种方式是主从架构Master/Slave，Master 以写为主，Slave 以读为主，Master 主节点更新后根据配置，自动同步到从机Slave 节点。</p></blockquote><h2 id="Redis分片技术-主要实现扩容"><a href="#Redis分片技术-主要实现扩容" class="headerlink" title="Redis分片技术(主要实现扩容)"></a>Redis分片技术(主要实现扩容)</h2><blockquote><ul><li>思考：单台redis中使用的内存大小有限，默认的内存的大小为10M，如果使用时内存不足，如何处理?</li><li>解决：采用分片方式 ， 准备多台redis.实现内存扩容.</li><li>Redis分片的缺点:</li></ul><ol><li>安全性不好，用户可以利用客户端直接set操作，修改数据。</li><li>由于单调性的要求，节点只能增，不能减，如果redis节点宕机，整合服务不能运行. 分片没有实现高可用。</li></ol></blockquote><h3 id="Hash一致性"><a href="#Hash一致性" class="headerlink" title="Hash一致性"></a>Hash一致性</h3><blockquote><p>   角色: node(节点)   key<br>   内存:  node*n 实现内存扩容.<br><img src="/images/redishash.png" alt="avatar"></p></blockquote><h3 id="均衡性"><a href="#均衡性" class="headerlink" title="均衡性"></a>均衡性</h3><blockquote><p>说明:尽可能的让节点均匀的保存数据.<br>问题:如果没有均衡性算法，则会导致数据负载不均.<br>解决方法:引入虚拟节点的概念.通过虚拟节点动态的平衡数据.<br><img src="/images/%E5%9D%87%E8%A1%A1%E6%80%A7.png" alt="avatar"></p></blockquote><h3 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h3><blockquote><p>说明:当节点新增时，节点信息会动态的划分，实现数据的挂载.<br>原则:如果节点新增时，尽肯能的保证原有的数据保持不变!只平衡部分数据.<br>单调性中描述节点只能新增，不能减少，如果节点个数少了.则内存缺失.分片不能使用.</p></blockquote><h2 id="Redis-哨兵机制总结-主要实现高可用"><a href="#Redis-哨兵机制总结-主要实现高可用" class="headerlink" title="Redis-哨兵机制总结(主要实现高可用)"></a>Redis-哨兵机制总结(主要实现高可用)</h2><blockquote><ol><li>前提:数据必须同步，搭建redis主从.</li><li>哨兵只会监听主机的状态，通过心跳机制进行检测 ping-pong。</li><li>当哨兵发现主机3次都没有响应时，这时认为主机宕机.内部进行推选。</li><li>当哨兵通过读取主机的配置文件，发现当前的主机中有2个从机.所以哨兵推选一台从机当做现在的主节点。</li><li>当哨兵成功推选了从机当主节点时.哨兵会修改另外节点的配置文件.重新定义主从结构。</li></ol></blockquote><blockquote><p>基于Redis主从复制这一机制，存在一个问题，因为主节点Master只有一个，一旦主节点挂掉之后，从节点没法担起主节点的任务，那么整个也无法运行。如果主节点挂掉之后，从节点能够自动变成主节点，那么问题就解决了，于是哨兵模式诞生了。哨兵模式就是不定时的用过心跳检测机制，对redis进行监控，若一台主机出现问题时，哨兵会自动将该主机下的某一个从机设置为新的主，、，并让其他从机和新主机建立主从关系。(内部是用的投票机制)</p></blockquote><blockquote><p>PS：哨兵模式也存在单点故障问题，如果哨兵机器挂了，那么就无法进行监控了，解决办法是哨兵也建立集群，Redis哨兵模式是支持集群的。</p></blockquote><h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><blockquote><h3 id="为什么要搭建Redis集群"><a href="#为什么要搭建Redis集群" class="headerlink" title="为什么要搭建Redis集群?"></a>为什么要搭建Redis集群?</h3><p>分析: Redis分片主要的功能实现redis内存扩容，哨兵主要实现了redis的高可用，而使用redis集群实现分片和哨兵的全部的功能。</p></blockquote><blockquote><h3 id="脑裂现象"><a href="#脑裂现象" class="headerlink" title="脑裂现象 :"></a>脑裂现象 :</h3><p>由于在集群/推选机制中，长时间出现平票的结果.则容易出现脑裂的现象.从而导致整个推选机制出现问题(脑袋炸裂)<br>如何降低此现象的发生 : 增加主节点的数量!!  主节点的数量一般大于等于7</p></blockquote><blockquote><h3 id="Redis集群高可用推选原理"><a href="#Redis集群高可用推选原理" class="headerlink" title="Redis集群高可用推选原理"></a>Redis集群高可用推选原理</h3><ol><li>redis所有的节点都会保存redis集群中的全部主从状态信息，</li><li>子节点之间可以互相通信，如果某个节点宕机，则其他节点会通过ping-pang检测机制检查该节点是否宕机。</li><li>如果有一半的节点认为宕机，则认为主节点宕机，剩余的节点会进行推选，投票推选出链接主节点的从机，实现故障的迁移。</li></ol></blockquote><h2 id="缓存三大问题"><a href="#缓存三大问题" class="headerlink" title="缓存三大问题"></a>缓存三大问题</h2><h3 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h3><blockquote><ul><li>条件:访问一个不存在的数据</li><li>说明:当访问一个不存在的数据时，因为缓存中没有这个key，导致缓存形同虚设.最终访问后台数据库.但是数据库中没有该数据所以返回null.</li><li>隐患:如果有人恶意频繁查询一个不存在的数据，可能会导致数据库负载高导致宕机。</li><li>总结:业务系统访问一个不存在的数据，称之为缓存穿透。</li></ul></blockquote><h3 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h3><blockquote><ul><li>条件:当缓存key失效/过期/未命中时，高并发访问该key。</li><li>说明:如果给一个key设定了失效时间，当key失效时有一万的并发请求访问这个key，这时缓存失效，所有的请求都会访问后台数据库.称之为缓击穿。</li><li>场景:微博热点消息访问量很大，如果该缓存失效则会直接访问后台数据库，导致数据库负载过高。  </li></ul></blockquote><h3 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h3><blockquote><ul><li>前提:高并发访问，缓存命中较低或者失效时。</li><li>说明:假设缓存都设定了失效时间，在同一时间内缓存大量失效，如果这时用户高并发访问，缓存命中率过低，导致全部的用户访问都会访问后台真实的数据库.</li><li>场景:在高并发条件下，缓存动态更新时。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h2 id=&quot;Redis官方简介&quot;&gt;&lt;a href=&quot;#Redis官方简介&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Redis基础知识" scheme="https://courage-kevin.github.io/categories/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="redis" scheme="https://courage-kevin.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库高可用</title>
    <link href="https://courage-kevin.github.io/2020/02/06/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://courage-kevin.github.io/2020/02/06/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E5%8F%AF%E7%94%A8/</id>
    <published>2020-02-06T10:43:25.458Z</published>
    <updated>2020-02-06T11:31:01.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库备份策略"><a href="#数据库备份策略" class="headerlink" title="数据库备份策略"></a>数据库备份策略</h1><h2 id="冷备份策略"><a href="#冷备份策略" class="headerlink" title="冷备份策略"></a>冷备份策略</h2><blockquote><p>说明：定期将数据库文件进行转储.<br>缺点：<br>&emsp;1.数据库冷备份，则需要手动的人工完成.效率低<br>&emsp;2.定期数据备份，不能保证数据的安全的.仅仅能够恢复部分数据<br>&emsp;3.如果数据量比较庞大，导入导出时耗费的时间较多<br>&emsp;4.由于网络传输问题.可能会导致备份多次<br>优点：数据库冷备份是恢复数据最后有效的手段.</p></blockquote><h2 id="热备份策略"><a href="#热备份策略" class="headerlink" title="热备份策略"></a>热备份策略</h2><blockquote><p>说明： 当主数据库数据进行”更新”操作时，数据会自动的同步到slave(从数据库中)该操作可以实现数据实时备份。<br><img src="/images/databasecopy.jpg" alt="avatar"></p></blockquote><h2 id="数据备份原理"><a href="#数据备份原理" class="headerlink" title="数据备份原理"></a>数据备份原理</h2><blockquote><ol><li>当数据库主库发生数据改变时，会将改变的数据写入二进制日志文件中(主库)。</li><li>从库中会启动IO线程会实时的监控主库的二进制文件是否发生改变.如果主库的二进制改变了，则将改变的数据进行读取.读取之后，将二进制内容写入中继日志中。</li><li>从库会启动Sql线程.会读取中继日志中的消息，将它写入数据库中，最终实现数据同步。</li></ol></blockquote><h2 id="数据库双机热备"><a href="#数据库双机热备" class="headerlink" title="数据库双机热备"></a>数据库双机热备</h2><blockquote><p>  根据数据库主从的配置.当主数据库做更新操作时，从库复制备份数据.当主库宕机时，通过某些技术手段可以数据库的高可用，实现故障迁移.当用户再有写入操作时，应该将数据写入从库中.如果主库修复完成重启数据库时，主库发现从库的数据较多.则数据库备份将失效.最终导致数据不一致的问题.</p></blockquote><h3 id="双机热备意义"><a href="#双机热备意义" class="headerlink" title="双机热备意义"></a>双机热备意义</h3><blockquote><p>说明：实现数据库双机热备是实现高可用的前提，如果数据不同步则无法实现数据库高可用.一般公司都有自己的运维团队.所以负责java开发的程序员不需要手动的配置数据库主从.但是需要了解mysql数据备份策略.为以后转岗做准备。</p></blockquote><h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><h3 id="Amoeba"><a href="#Amoeba" class="headerlink" title="Amoeba"></a>Amoeba</h3><blockquote><h4 id="什么是amoeba"><a href="#什么是amoeba" class="headerlink" title="什么是amoeba?"></a>什么是amoeba?</h4><p>Amoeba是一个以MySQL为底层数据存储，并对应用提供MySQL协议接口的proxy。它集中地响应应用的请求，依据用户事先设置的规则，将SQL请求发送到特定的数据库上执行。基于此可以实现负载均衡、读写分离、高可用性等需求。与MySQL官方的MySQL Proxy相比，作者强调的是amoeba配置的方便（基于XML的配置文件，用SQLJEP语法书写规则，比基于lua脚本的MySQL Proxy简单）。</p></blockquote><blockquote><p>Amoeba相当于一个SQL请求的路由器，目的是为负载均衡、读写分离、高可用性提供机制，而不是完全实现它们。用户需要结合使用MySQL的 Replication等机制来实现副本同步等功能。amoeba对底层数据库连接管理和路由实现也采用了可插拨的机制，第三方可以开发更高级的策略类来替代作者的实现。这个程序总体上比较符合KISS原则的思想。</p></blockquote><blockquote><p>amoeba作用：<font color=red>可以实现数据库的读写操作分离，高可用。 (数据库分库分表中间件)</font><br>&nbsp; 需求分析： 如果所有的访问压力都访问一台mysql服务器.如果遇到高并发问题可能导致数据库服务器宕机影响整个服务.<br>&nbsp; 解决方案： 使用读写分离策略.提高数据库的执行效率，当用户有更新操作时，访问主数据库.当用户有读操作时访问从数据库.同时从数据库可以有多台.并且主从实现数据同步.实现读和写分离.高升数据库性能.<br><img src="/images/amoeba.png" alt="avatar"></p></blockquote><h3 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h3><blockquote><h4 id="什么是Mycat"><a href="#什么是Mycat" class="headerlink" title="什么是Mycat"></a>什么是Mycat</h4><p>官网copy了一份：</p><ol><li>一个彻底开源的，面向企业应用开发的大数据库集群</li><li>支持事务、ACID、可以替代MySQL的加强版数据库</li><li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li><li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li><li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li><li>一个新颖的数据库中间件产品  </li></ol></blockquote><blockquote><p>Mycat作用：<font color=red>能满足数据库数据大量存储， 提高了查询性能 (数据库分库分表中间件)</font>  </p></blockquote><p><img src="/images/mycat.png" alt="avatar"></p><blockquote><p>Mycat工作原理说明：</p><ol><li>后台服务器需要将数据入库时通过mycat代理服务器操作数据库.</li><li>如果是更新操作.则将数据发往主数据库，如果是读操作则将数据发送给从数据库或者空闲的主数据库.</li><li>当主数据库发生宕机后，Mycat内部有心跳检测机制.判断主库宕机后，实现故障迁移.将所有的写库操作发往第二台主库.也就是从机.</li><li>当运维人员修复主库后.Mycat还会将写操作发往主库.从而实现数据库高可用.</li></ol></blockquote><h4 id="垂直拆分和水平拆分"><a href="#垂直拆分和水平拆分" class="headerlink" title="垂直拆分和水平拆分"></a>垂直拆分和水平拆分</h4><blockquote><p>业务需求： 当公司的业务积累到一定量，数据库和数据表都有大量的数据，无论从运维/查询角度而言效率都很慢，这就是通常所说的数据库瓶颈问题。<br><font color=red>那么如何解决这一问题呢？ 核心思想：将大量的数据分别保存到不同的数据库和数据表中</font>。</p></blockquote><h4 id="数据拆分概念引入"><a href="#数据拆分概念引入" class="headerlink" title="数据拆分概念引入"></a>数据拆分概念引入</h4><blockquote><h5 id="垂直拆分："><a href="#垂直拆分：" class="headerlink" title="垂直拆分："></a>垂直拆分：</h5><p>特点：根据不同的业务，将数据表拆分到不同的数据库中.<br>规定：如果有业务关联，则尽可能拆分到一个数据库中.  </p><h5 id="水平拆分："><a href="#水平拆分：" class="headerlink" title="水平拆分："></a>水平拆分：</h5><p>特点：  按照数据量进行拆分，将一个表中的数据分别保存到不同的数据表中，分散存储  </p></blockquote><h4 id="使用Mycat实现数据库-1-高可用性-2-读写分离-3-负载均衡"><a href="#使用Mycat实现数据库-1-高可用性-2-读写分离-3-负载均衡" class="headerlink" title="使用Mycat实现数据库 1.高可用性 2.读写分离 3.负载均衡"></a>使用Mycat实现数据库 1.高可用性 2.读写分离 3.负载均衡</h4><blockquote><h5 id="数据库垂直拆分"><a href="#数据库垂直拆分" class="headerlink" title="数据库垂直拆分"></a>数据库垂直拆分</h5></blockquote><blockquote><p>&nbsp;根据功能模块(业务)将一个数据库中的表，拆分为多个数据库.降低了数据库中的数据量.提高数据库效率</p><ul><li>优点：将数据表根据功能存放到不同的数据库中，可以提高数据库的性能。</li><li>拆分策略：将具有关联意义的数据表尽可能保存到同一个数据库中.否则关联查询时不能正确关联.因为在不同的数据库中。  </li></ul></blockquote><blockquote><h5 id="数据表水平拆分"><a href="#数据表水平拆分" class="headerlink" title="数据表水平拆分"></a>数据表水平拆分</h5></blockquote><blockquote><p>&nbsp;由于单表数据表的量很大，造成了数据库查询的瓶颈.所以需要将数据表中的数据拆分到多个数据库中.降低单表的数据量。</p><ul><li>数据存取问题：由于使用数据库水平拆分，那么数据库中的数据应该按照什么规则存取呢?</li><li>问题解决：Mycat对于数据水平拆分，指定了很多策略.课上介绍一种根据Id取模运算.</li><li>原理说明：当信息入库时根据Id%分库数量=值.这个值就是数据存储的位置.同样当用户读取数据库时，也会取模快速定位数据库中的表.快速获取数据，如下图。<br><img src="/images/%E6%8B%86%E5%88%86%E7%AD%96%E7%95%A5.png" alt="avatar"></li></ul></blockquote><h1 id="数据库优化策略-重点知识"><a href="#数据库优化策略-重点知识" class="headerlink" title="数据库优化策略(重点知识)"></a>数据库优化策略(重点知识)</h1><blockquote><ol><li>优化sql语句(多表操作)  where 左连接 右连接 内连接 原则:尽可能根据主键查询,尽可能少用关联查询.</li><li>创建索引(对经常查询的数据创建索引)</li><li>添加缓存(Redis/MemCache)</li><li>定期进行数据转储(将一些查询较少的数据保存到历史表,让当前表维护可控的数据量)</li><li>分库分表(需要大量的数据库服务器)</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库备份策略&quot;&gt;&lt;a href=&quot;#数据库备份策略&quot; class=&quot;headerlink&quot; title=&quot;数据库备份策略&quot;&gt;&lt;/a&gt;数据库备份策略&lt;/h1&gt;&lt;h2 id=&quot;冷备份策略&quot;&gt;&lt;a href=&quot;#冷备份策略&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="数据库基础知识" scheme="https://courage-kevin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="mysql" scheme="https://courage-kevin.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库Mysql基础知识</title>
    <link href="https://courage-kevin.github.io/2020/02/06/%E6%95%B0%E6%8D%AE%E5%BA%93Mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2020/02/06/%E6%95%B0%E6%8D%AE%E5%BA%93Mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-02-06T09:54:11.000Z</published>
    <updated>2020-02-27T16:01:43.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h2><blockquote><p>数据库：英文为Database，简称DB，数据库是按照数据结构来组织、存储和管理数据的仓库，简而言之，数据库就是存储数据的仓库。</p></blockquote><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><blockquote><p>数据库根据存储采用的数据结构的不同可以分为许多种，其中包含早期的层次式数据库、网络式数据库。<br>目前占市场主流的是关系型数据库。当然还有非关系(NoSQL)型数据库（键值对数据库，例如：MongoDB、Redis）等其他类型的数据库</p></blockquote><h2 id="什么是关系型数据库？"><a href="#什么是关系型数据库？" class="headerlink" title="什么是关系型数据库？"></a>什么是关系型数据库？</h2><blockquote><p>底层是以二维表的及其之间的关系所组成的数据库，即是关系型数据库。例如：</p></blockquote><h2 id="常见的关系型数据库"><a href="#常见的关系型数据库" class="headerlink" title="常见的关系型数据库"></a>常见的关系型数据库</h2><blockquote><p>SQL Server      微软提供（收费、Java中使用不多）<br>Oracle            甲骨文公司（收费、功能强大、性能优异，Java中使用者很多）<br>DB2                IBM（收费、中型/大型、银行/电信等企业）<br>MySQL           瑞典MySQL AB（免费开源、小型、性能也不差、适用于中小型项目、可集群）<br>SQLite            迷你数据库，嵌入式设备中<br>…</p></blockquote><h2 id="MySQL建库、建表"><a href="#MySQL建库、建表" class="headerlink" title="MySQL建库、建表"></a>MySQL建库、建表</h2><blockquote><p>查看数据库、查看数据表：show databases；</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure></div><blockquote><p>进入数据库：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名；</span><br></pre></td></tr></table></figure></div><blockquote><p>查看当前库中的所有表：show tables；</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>；</span><br></pre></td></tr></table></figure></div><blockquote><p>创建数据库、创建数据表<br>创建数据库： </p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> 数据库名;</span><br></pre></td></tr></table></figure></div><blockquote><p>设置数据库编码：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mydb1 <span class="keyword">charset</span> utf8；</span><br></pre></td></tr></table></figure></div><blockquote><p>创建数据表：</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,                <span class="comment">-- 学生编号</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),    <span class="comment">-- 学生姓名</span></span><br><span class="line">    gender <span class="built_in">char</span>(<span class="number">1</span>),    <span class="comment">-- 学生性别</span></span><br><span class="line">    birthday <span class="built_in">date</span>,        <span class="comment">-- 出生年月</span></span><br><span class="line">    score <span class="keyword">double</span>        <span class="comment">-- 考试成绩</span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure></div><h2 id="MySQL数据类型及"><a href="#MySQL数据类型及" class="headerlink" title="MySQL数据类型及"></a>MySQL数据类型及</h2><h3 id="数值类型："><a href="#数值类型：" class="headerlink" title="数值类型："></a>数值类型：</h3><blockquote><p>MySQL中支持多种整型，其实很大程度上是相同的，只是存储值的大小范围不同而已。</p><ol><li>tinyint：   占用1个字节，相对于java中的byte</li><li>smallint： 占用2个字节，相对于java中的short</li><li>int：          占用4个字节，相对于java中的int</li><li>bigint：    占用8个字节，相对于java中的long ，其次是浮点类型即：float和double类型</li><li>float：      占用4个字节，单精度浮点类型，相对于java中的float</li><li>double：    占用8个字节，双精度浮点类型，相对于java中的double</li></ol></blockquote><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><blockquote><ol><li>char(n)  定长字符串，最长255个字符。n表示字符数，所谓的定长，是当插入的值长度小于指定的长度10（上面指定的）时, 剩余的空间会用空格填充。（这样会浪费空间）</li><li>varchar(n)变长字符串，最长不超过 65535个字节，n表示字符数，一般超过255个字节，会使用text类型。所谓的不定长，是当插入的值长度小于指定的长度10（上面指定的）时, 剩余的空间可以留给别的数据使用。（节省空间）</li><li>大文本（长文本）类型，最长65535个字节，一般超过255个字符列的会使用text。text也分多种，其中bigtext存储数据的长度约为4GB。</li></ol></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>&emsp; char、varchar、text都可以表示字符串类型，其区别在于：</p><ol><li>char在保存数 据时, 如果存入的字符串长度小于指定的长度n,后面会用空格补全。 </li><li>varchar和text保存数据时, 按数据的真实长度存储, 剩余的空间可以留给别的数据用.</li><li>char会造成空间浪费(不足指定长度的会用空格补全), 但是由于不需要计算数据的长度, 因此速度更快。（即以空间换时间）</li><li>varchar和text是节省了空间，但是存储的速度不如char快，因为要计算数据的实际长度。（即以时间换空间）</li></ol></blockquote><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><blockquote><ol><li>date：年月日    time：时分秒     datetime：年月日 时分秒    </li><li>timestamp：时间戳(实际存储的是一个时间毫秒值)，与datetime存储日期格式相同。</li><li>timestamp最大表示2038年，而datetime范围是1000~9999</li><li>timestamp在插入数、修改数据时，可以自动更新成系统当前时间(后面用到时再做讲解)</li></ol></blockquote><h2 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h2><blockquote><p>&emsp; 创建表时, 除了要给每个列指定对应的数据类型, 有时也需要给列添加约束。常见的约束有：主键约束、唯一约束、非空约束、外键约束。</p><ol><li>主键(primary key)：主键是数据表中，一行记录的唯一标识。比如学生的编号，人的身份证号, 主键的特点：唯一且不能为空，当主键为数值时，为了方便维护，可以设置主键为自增 auto_increment              </li><li>唯一(unique)：保证所约束的列必须是唯一的，即不能重复出现，例如：用户注册时，保存的用户名不可以重复。唯一约束特点是不能重复(允许为空)</li><li>非空(not null) ：保证所约束的列必须是不为空的，即在插入记录时，该列必须要赋值，例如：用户注册时，保存的密码不能为空。非空约束的特点是：不能为空值，即插入数据时该列必须得有值。</li><li>外键约束：外键是用于表和表之间关系的列</li></ol></blockquote><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><h3 id="什么是SQL语言"><a href="#什么是SQL语言" class="headerlink" title="什么是SQL语言?"></a>什么是SQL语言?</h3><blockquote><p>Structured Query Language：结构化的查询语言，SQL是操作所有关系型数据库的通用的语言</p></blockquote><h3 id="SQL语言的分类："><a href="#SQL语言的分类：" class="headerlink" title="SQL语言的分类："></a>SQL语言的分类：</h3><blockquote><ol><li>DDL – 数据库定义语言，指CREATE、ALTER、DROP等操作（ 即创建、删除、修改数据库和数据表 ）</li><li>DML – 数据操作语言，指INSERT、UPDATE、DROP等操作（ 即数据表中数据的增、删、改操作 ）</li><li>DQL  – 数据查询语言（指SELECT操作，即数据表中数据的查询操作）</li></ol></blockquote><h3 id="更新表记录（insert-update-delete）"><a href="#更新表记录（insert-update-delete）" class="headerlink" title="更新表记录（insert/update/delete）"></a>更新表记录（insert/update/delete）</h3><h4 id="insert–插入表记录"><a href="#insert–插入表记录" class="headerlink" title="insert–插入表记录"></a>insert–插入表记录</h4><blockquote><p>格式: <font color=red>insert into 表名称 values (值1, 值2,….)</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp  (字段<span class="number">1</span>，字段<span class="number">2</span>，)  <span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure></div><h4 id="update修改表记录"><a href="#update修改表记录" class="headerlink" title="update修改表记录"></a>update修改表记录</h4><blockquote><p>格式: <font color=red>update 表名称 set 列名称 = 新值 where 列名称 = 某值</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- </span></span><br><span class="line">    <span class="keyword">update</span> stu <span class="keyword">set</span> score=score+<span class="number">10</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'xxx'</span>;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'xxx'</span>;</span><br><span class="line">    <span class="keyword">update</span> stu <span class="keyword">set</span> score=<span class="keyword">ifnull</span>(score, <span class="number">0</span>)+<span class="number">10</span>;</span><br><span class="line">    注意: null值和任何值计算结果还是null, 因此, 可以通过ifnull函数将null置为零对待.</span><br></pre></td></tr></table></figure></div><h4 id="delete删除表记录"><a href="#delete删除表记录" class="headerlink" title="delete删除表记录"></a>delete删除表记录</h4><blockquote><p>格式: <font color=red>delete from 表名称 where 列名称 = 值</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> stu <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'xxx'</span>; </span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> stu;    </span><br><span class="line"><span class="comment">--若没有where子句, 则默认删除所有记录</span></span><br></pre></td></tr></table></figure></div><h4 id="select查询表记录"><a href="#select查询表记录" class="headerlink" title="select查询表记录"></a>select查询表记录</h4><blockquote><p>格式: <font color=red>select 列名称 from 表名称</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中的所有员工，显示员工姓名、薪资、奖金</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span>,sal,bonus <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> dept <span class="keyword">from</span> emp;           </span><br><span class="line">    distinct  <span class="comment">--关键字，用于剔除指定列中的重复值</span></span><br></pre></td></tr></table></figure></div><h4 id="where子句查询"><a href="#where子句查询" class="headerlink" title="where子句查询"></a>where子句查询</h4><blockquote><p>格式: <font color=red>select 列名称 from 表名称</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询薪资大于300的姓名及工资大于3000的所有员工，显示员工姓名、薪资</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">3000</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中总薪资(薪资+奖金)大于3500的所有员工，显示员工姓名、总薪资</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>, sal+bonus <span class="keyword">from</span> emp <span class="keyword">where</span> (sal+bonus)&gt;<span class="number">3000</span>; </span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>, sal+bonus <span class="keyword">as</span> 总薪资 <span class="keyword">from</span> emp <span class="keyword">where</span> (sal+bonus)&gt;<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--as用于定义别名(仅在查询的结果中作为列的表头显示)，也可以省略as</span></span><br><span class="line"><span class="comment">-- where子句中不能使用列别名（但是可以使用表别名）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中薪资在3000和4500之间的员工，显示员工姓名和薪资</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">3000</span> <span class="keyword">and</span> <span class="number">4500</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中姓名中以"刘"开头的员工，显示员工姓名。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'刘%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询emp表中姓名以"刘"开头，字数为两个字的员工，显示员工姓名。</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'刘_'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中姓名中包含"涛"字的员工，显示员工姓名。</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%涛%'</span>;</span><br><span class="line">        <span class="comment">--提示："%" 表示任意0或多个字符。"_" 表示任意一个字符</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中薪资为1400、1600、1800的员工，显示员工姓名和薪资</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">in</span>(<span class="number">1400</span>,<span class="number">1600</span>,<span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询emp表中薪资小于2000和薪资大于4000的员工，显示员工姓名、薪资。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal&lt;<span class="number">2000</span> <span class="keyword">or</span> sal &gt;<span class="number">4000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中薪资大于3000并且奖金小于600的员工，显示姓名、薪资、奖金。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,sal,bonus <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">3000</span> <span class="keyword">and</span> bonus&lt;<span class="number">600</span>;</span><br></pre></td></tr></table></figure></div><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><blockquote><p>对查询的结果进行排序使用 order by关键字。</p><ol><li>order by 排序的列 asc    升序 ↑    </li><li>order by 排序的列 dasc   降序 ↓</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对emp表中所有员工的薪资进行升序(从低到高)排序，显示姓名、薪资。</span></span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">name</span>,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">-- 对emp表中所有员工的总薪资进行降序(从高到低)排序，显示姓名、总薪资。</span></span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">name</span>, sal+bonus <span class="keyword">as</span> 总薪资 <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> (sal+bonus) <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--分组查询：对所查询的记录可以根据某一列进行分组, 分组使用group by。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将员工按照部门进行分组</span></span><br><span class="line">            <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">-- 对emp表按照部门进行分组, 并统计每个部门的人数, 显示部门和对应人数</span></span><br><span class="line">            <span class="keyword">select</span> dept 部门名称, <span class="keyword">count</span>(*) 部门人数 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">-- 对emp表按照部门进行分组, 求每个部门的最高薪资(不包含奖金)</span></span><br><span class="line">            <span class="keyword">select</span> <span class="keyword">max</span>(sal) 总薪资 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">--注意：分组之前使用聚合函数表示对查询的所有记录进行统计计算,分组之后使用聚合函数表示对每一个组中的所有记录进行统计计算。</span></span><br></pre></td></tr></table></figure></div><h4 id="聚合函数查询："><a href="#聚合函数查询：" class="headerlink" title="聚合函数查询："></a>聚合函数查询：</h4><blockquote><ol><li>max()或min() – 某列的最大值或最小值，</li><li>count() 某列的行数，</li><li>sum() 某列值之和，</li><li>avg() 某列的平均值</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中最高薪资</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">as</span> 最高薪资 <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 查询emp表中最高总薪资(薪资加奖金)</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">max</span>(sal+bonus) <span class="keyword">as</span> 最高薪资 <span class="keyword">from</span> emp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 统计emp表中薪资大于3000的员工人数</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">3000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 统计emp表中所有员工的总薪资(不包含奖金)</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(sal) <span class="keyword">as</span> 员工总薪资 <span class="keyword">from</span> emp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 统计emp表员工的平均薪资(不包含奖金)</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">as</span> 员工总薪资 <span class="keyword">from</span> emp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 重要提示：可以使用count(*)统计记录行数，多个聚合函数可以一起查询。</span></span><br><span class="line"><span class="comment">-- 例如:根据部门进行分组，统计每个部门员工人数和平均薪资</span></span><br><span class="line">        <span class="keyword">select</span> dept, <span class="keyword">count</span>(*) 员工人数, <span class="keyword">avg</span>(sal) 平均薪资 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept; </span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 聚合函数不能用在where子句中，在没有分组的情况下，聚合函数不能和其他普通字段一起查询</span></span><br><span class="line"><span class="comment">-- 错误的例如: 查询emp表中薪资最高的员工姓名。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>, <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp;<span class="comment">--结果是错的</span></span><br><span class="line"><span class="comment">-- 正确的查询：</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal=(<span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp);<span class="comment">--</span></span><br></pre></td></tr></table></figure></div><h4 id="数值函数："><a href="#数值函数：" class="headerlink" title="数值函数："></a>数值函数：</h4><blockquote><ol><li>ceil(数值) – 向上取整、</li><li>floor(数值) – 向下取整、</li><li>round(数值) – 向下取整</li><li>rand(数值) – 随机数</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  查询emp表中所有员工薪资上涨15.47%, 向上取整。</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span>,sal, <span class="keyword">ceil</span>(sal*<span class="number">1.1547</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></div><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><blockquote><ol><li>curdate() – 返回当前日期(年月日)</li><li>curtime() – 返回当前时间(时分秒)</li><li>now() – 返回当前日期+时间(年月日 时分秒)</li><li>date_add()、date_sub() – 增加/减少日期</li><li>year()、month()、day()、hour()、minute()、second()，分别用来获取日期中的年、月、日、时、分、秒</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询系统当前时间。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">now</span>();</span><br><span class="line"><span class="comment">-- 查询emp表中所有员工的年龄，显示姓名、年龄。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">year</span>(<span class="keyword">curdate</span>()) - <span class="keyword">year</span>(birthday) 年龄 <span class="keyword">from</span> emp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 查询emp表中所有在1993和1995年出生的，显示姓名、出生日期。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">name</span>,birthday <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">year</span>(birthday) <span class="keyword">between</span> <span class="number">1993</span> <span class="keyword">and</span> <span class="number">1995</span>;</span><br></pre></td></tr></table></figure></div><h3 id="外键和表关系"><a href="#外键和表关系" class="headerlink" title="外键和表关系"></a>外键和表关系</h3><h4 id="外键："><a href="#外键：" class="headerlink" title="外键："></a>外键：</h4><blockquote><p>唯一标识其他表中的一条记录，用来通知数据库两张表列与列之间的对应关系, 并让数据库帮我们维护这样关系的键就叫做外键。<br>外键作用: 确保数据库数据的完整性和一致性，添加外键: 例如:foreign key(dept_id) references dept(id)<br>例如：员工表的部门id列（dept_id）和部门表的id列具有一 一对应的关系, 其中dept_id就是外键。</p></blockquote><h4 id="表关系："><a href="#表关系：" class="headerlink" title="表关系："></a>表关系：</h4><blockquote><ol><li>一对多：一对多，反过来就是多对一，对于一对多的两张表，可以在多的一方添加列，保存一的一方的主键，从而保存两张表之间的关系</li><li>一对一：对于一对一关系的两张表，可以在任意一张表中添加列，保存另一张表的主键，从而保存两张表之间的关系</li><li>多对多：对于多对多的关系，可以拆分成两张一对多的关系，无法在两张表中添加列保存关系，但我们可以添加一张第三方的表,保存两张表的主键，从而保存两张表的关系。</li></ol></blockquote><h3 id="连接查询：将两张或者两张以上的表，按照指定条件查询，将结果显示在一张表中。"><a href="#连接查询：将两张或者两张以上的表，按照指定条件查询，将结果显示在一张表中。" class="headerlink" title="连接查询：将两张或者两张以上的表，按照指定条件查询，将结果显示在一张表中。"></a>连接查询：将两张或者两张以上的表，按照指定条件查询，将结果显示在一张表中。</h3><blockquote><p>多张表查询的语法：  <font color=red>Select 字段 from 表1,表2… where…</font><br>如果表名过长，可以为表添加别名以方便书写<font color=red>select… from A a, B b… where…</font>    </p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询部门和员工两张表</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> dept,emp;   </span><br><span class="line">    <span class="comment">---上面查询的结果中存在大量错误的数据, 如果想正确显示部门及部门对应的员工，可以通过where子句从中筛选正确的数据.</span></span><br><span class="line"><span class="comment">-- 查询部门和部门下的员工。</span></span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> dept d,emp e <span class="keyword">where</span> d.id=e.dept_id;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> dept d <span class="keyword">inner</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.id=e.dept_id;          </span><br><span class="line">    <span class="comment">--- (inner join...on...)方式也叫做内连接查询</span></span><br></pre></td></tr></table></figure></div><h3 id="外连接查询："><a href="#外连接查询：" class="headerlink" title="外连接查询："></a>外连接查询：</h3><blockquote><p>左外连接查询，显示左侧表中的所有记录，如果在右侧表中没有对应的记录，则显示为null<br>语法：<font color=red>select …from a left join b on (a.id=b.xid)</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有部门和部门下的员工，如果部门下没有员工，显示null</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.id=e.dept_id;</span><br><span class="line">以上结果会显示（左侧表）所有部门，如果某部门下没有员工，（右侧表）则显示为null</span><br></pre></td></tr></table></figure></div><h3 id="右外连接查询："><a href="#右外连接查询：" class="headerlink" title="右外连接查询："></a>右外连接查询：</h3><blockquote><p>显示右侧表中的所有记录，如果在左侧表中没有对应的记录，则显示为null<br>语法：<font color=red>select 字段 from a right join b on (a.id=b.xid)</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询部门和所有员工，如果员工没有所属部门，显示null</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept d <span class="keyword">right</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> d.id=e.dept_id;</span><br><span class="line">以上结果会显示（右侧表）所有员工，如果员工没有所属部门，（左侧表）则显示为null</span><br></pre></td></tr></table></figure></div><h3 id="子查询："><a href="#子查询：" class="headerlink" title="子查询："></a>子查询：</h3><blockquote><p>其实就是将一个查询得出的结果，作为另外一个查询的条件。<br>格式：<font color=red>select…from…where…(select…from…)</font></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---列出薪资比'xxx'高的所有员工，显示姓名、薪资      -- 先查询出'王海涛'的薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;( <span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'xxx'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">---列出与'刘沛霞'从事相同职位的所有员工，显示姓名、职位、部门。</span></span><br><span class="line"><span class="keyword">select</span> e.name, e.job, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id=d.id <span class="keyword">and</span> job=(<span class="keyword">select</span> job <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure></div><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">（左外连接）列出所有部门和部门下的员工，如果部门下没有员工, 显示为null。</span><br><span class="line"><span class="keyword">select</span> d.id, d.name, e.name, e.dept_id <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> emp e <span class="keyword">on</span> e.dept_id=d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">--（关联查询）列出在'培优部'任职的员工，假定不知道'培优部'的部门编号。</span></span><br><span class="line"><span class="keyword">select</span> e.name, e.dept_id, d.id, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id=d.id;</span><br><span class="line"><span class="comment">-- 再筛选过滤，查询部门名称为'培优部'的员工</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.id, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id=d.id <span class="keyword">and</span> d.name=<span class="string">'培优部'</span>;</span><br><span class="line"> </span><br><span class="line">（自连接查询）列出所有员工及其直接上级，显示员工姓名、上级编号，上级姓名</span><br><span class="line"><span class="comment">-- 先查询员工表（emp e1）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, topid <span class="keyword">from</span> emp e1;</span><br><span class="line"><span class="comment">-- 再查询上级表（还是员工表，emp e2）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> emp e2;</span><br><span class="line"><span class="comment">-- 最后查询员工及其员工的直接上级</span></span><br><span class="line"><span class="keyword">select</span> e1.name,e1.topid, e2.id, e2.name <span class="keyword">from</span> emp e1, emp e2 <span class="keyword">where</span> e1.topid = e2.id;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（分组、聚合函数）列出最低薪资大于1500的各种职位，显示职位和该职位最低薪资</span><br><span class="line"><span class="comment">--先查询出各种职位的最低薪资</span></span><br><span class="line"><span class="keyword">select</span> job, <span class="keyword">min</span>(sal) 最低薪资 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="comment">--提示：对分组后的记录筛选过滤请使用having替换where，并且having书写在最后</span></span><br><span class="line"><span class="comment">--再查询出最低薪资&gt;1500的职位</span></span><br><span class="line"><span class="keyword">select</span> job, <span class="keyword">min</span>(sal) 最低薪资 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="keyword">min</span>(sal)&gt;<span class="number">1500</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（分组、聚合函数查询）列出在每个部门就职的员工数量、平均工资。显示部门编号、员工数量，平均薪资。</span><br><span class="line"><span class="keyword">select</span> dept_id, <span class="keyword">count</span>(*) 员工数量, <span class="keyword">avg</span>(sal) 平均薪资 <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">（分组、关联、聚合函数查询）查出至少有一个员工的部门。显示部门编号、部门名称、部门位置、部门人数。</span><br><span class="line"><span class="comment">--先关联查询, 查询出员工和员工对应的部门</span></span><br><span class="line"><span class="keyword">select</span> d.id, d.name, d.loc, e.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id=d.id;</span><br><span class="line"><span class="comment">--再根据部门进行分组, 统计每个部门的员工数量</span></span><br><span class="line"><span class="keyword">select</span> d.id, d.name, d.loc, <span class="keyword">count</span>(*) 员工数量 <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id=d.id <span class="keyword">group</span> <span class="keyword">by</span> e.dept_id;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">（自连接查询）列出受雇日期早于直接上级的所有员工的编号、姓名、部门名称。</span><br><span class="line"><span class="comment">-- 关联查询</span></span><br><span class="line"><span class="keyword">select</span> e1.id, e1.name, d.name <span class="keyword">from</span> emp e1, emp e2, dept d <span class="keyword">where</span> e1.dept_id=d.id <span class="keyword">and</span> e1.topid=e2.id <span class="keyword">and</span> e1.hdate &lt; e2.hdate;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库概述&quot;&gt;&lt;a href=&quot;#数据库概述&quot; class=&quot;headerlink&quot; title=&quot;数据库概述&quot;&gt;&lt;/a&gt;数据库概述&lt;/h1&gt;&lt;h2 id=&quot;什么是数据库&quot;&gt;&lt;a href=&quot;#什么是数据库&quot; class=&quot;headerlink&quot; title=&quot;什
      
    
    </summary>
    
    
      <category term="数据库基础知识" scheme="https://courage-kevin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="mysql" scheme="https://courage-kevin.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://courage-kevin.github.io/2019/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://courage-kevin.github.io/2019/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-22T09:42:45.000Z</published>
    <updated>2020-03-22T11:00:50.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中的设计模式"><a href="#Java中的设计模式" class="headerlink" title="Java中的设计模式"></a>Java中的设计模式</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式中包含三个子工厂模式、</p><ul><li>简单工厂模式</li><li>抽象工厂模式</li><li>工厂方法模式</li></ul><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式是属于<code>创建型</code>模式，又叫做静态工厂方法（Static Factory Method）模式，但不属于23种GOF设计模式之一。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。   </p><p>用英雄联盟举例说明工厂模式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 青钢影-卡密尔类 分别有四个技能QWER  并实现Skill接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Camille</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Camille Q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Camille W"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Camille E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Camille R"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 皎月女神-戴安娜类 分别有四个技能QWER 并实现Skill接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diana</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana Q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana W"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Diana R"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 刀妹-艾瑞莉娅类 分别有四个技能QWER 并实现Skill接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Irelia</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Irelia Q"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Irelia W"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Irelia E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">r</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Irelia R"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// skill接口 定义四个抽象方法，在实例化对象的时候可以确保方法的调用时统一的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">q</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">w</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">e</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">r</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">// 根据用户传入的不同英雄名，利用反射，直接得到该英雄实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Skill <span class="title">getHero</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Skill skill;</span><br><span class="line"><span class="comment">//        反射</span></span><br><span class="line"><span class="comment">//        元类,用来描述一个类的</span></span><br><span class="line"><span class="comment">//        类是对象的抽象</span></span><br><span class="line">        String classStr = <span class="string">"reflect.hero."</span> + name;</span><br><span class="line">        Class&lt;?&gt; cla = Class.forName(classStr);</span><br><span class="line">        Object object = cla.newInstance();</span><br><span class="line">        <span class="keyword">return</span> (Skill) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户的输入</span></span><br><span class="line">        String name = Main.getPlayerInput();</span><br><span class="line">        <span class="comment">// 隐藏new的细节，全部交给工厂对象的getHero方法来创建对象</span></span><br><span class="line">        Skill skill = HeroFactory.getHero(name);</span><br><span class="line">        skill.r();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取玩家输入</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getPlayerInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Enter a Hero's Name"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String name = scanner.nextLine();</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里直接贴上测试代码，工厂模式隐藏了对象的创建细节，不然的话，想想代码是多么的糟糕，我们在主函数里接收到用户输入的英雄名，用switch来判断，然后实例化英雄，在调用英雄的QWER方法。例如如下代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = Main.getPlayerInput();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Diana"</span>:</span><br><span class="line">                Diana diana = <span class="keyword">new</span> Diana();</span><br><span class="line">                diana.r();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Irelia"</span>:</span><br><span class="line">                Irelia irelia = <span class="keyword">new</span> Irelia();</span><br><span class="line">                irelia.r();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Camille"</span>:</span><br><span class="line">                Camille camille = <span class="keyword">new</span> Camille();</span><br><span class="line">                camille.r();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>如果有100个英雄呢？你是否需要这样判断100次，在创建100个英雄实例，在调用100次r()函数呢？<br>毫无疑问，这样的代码是糟糕的。</p><p>在回顾上面的代码，所以我们定义了skill接口，不同的对象实现统一的接口，可以实现方法的统一调用，不管你new的是哪个对象，我全部都用skill来调用，实现接口后，我们的mian中就可以这样写了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String name = Main.getPlayerInput();</span><br><span class="line">    Skill skill;</span><br><span class="line">    <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Daina"</span>:</span><br><span class="line">            skill = <span class="keyword">new</span> Diana();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Irelia"</span>:</span><br><span class="line">            skill = <span class="keyword">new</span> Irelia();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Camille"</span>:</span><br><span class="line">            skill = <span class="keyword">new</span> Camille();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过实现类来调用方法，不用关注你具体new的是谁了。</span></span><br><span class="line">    skill.r();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是，我们在想一想，这样代码还是很繁琐，我们还是需要去new不同的实现类，如何才能不new实现类，隐藏创建对象的细节呢？外部只管调用即可，及时出现别的需求，我们的main函数式不需要改变的，即实现OCP原则呢？引出了工厂模式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单工厂模式</span></span><br><span class="line"><span class="comment">// 创建一个工厂类，提供一个静态的方法来创建实例对象，方法返回一个实例对象供外部使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Skill <span class="title">getHero</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Skill skill;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Daina"</span>:</span><br><span class="line">                skill = <span class="keyword">new</span> Diana();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Irelia"</span>:</span><br><span class="line">                skill = <span class="keyword">new</span> Irelia();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Camille"</span>:</span><br><span class="line">                skill = <span class="keyword">new</span> Camille();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在看我们的主函数，直接通过HeroFactory类的静态方法getHero，即可得到一个实例对象，隐藏了对象创建的过程。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = Main.getPlayerInput();</span><br><span class="line">        Skill skill = HeroFactory.getHero(name);</span><br><span class="line">        skill.r();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>这就是简单工厂模式！实现了OCP原则，以后无论你需要增加多少个英雄，你只需要在工厂方法内部去增加就可以了，main函数你无需关心，只要你工厂类能给我创建对象，main函数中就可以实现业务功能！但是，我们想一想，其实只是实现了main函数的OCP原则，但是工厂内部创建对象还是很麻烦，对吧，如果要增加英雄，你还是得根据用户的输入，再去判断，再去new，从而供外部调用获得新的英雄对象，如何解决这个问题呢？需要用到反射，也就是说，原本是需要用户输入字符串，我们根据字符串去判断，帮玩家new出来这个英雄，用了反射后，用户输入的不再是一个字符串，而是直接给你一个英雄对象，你帮我利用反射创建出来即可。最终代码，如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Skill <span class="title">getHero</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Skill skill;</span><br><span class="line"><span class="comment">//        反射</span></span><br><span class="line"><span class="comment">//        元类,用来描述一个类的</span></span><br><span class="line"><span class="comment">//        类是对象的抽象</span></span><br><span class="line">        String classStr = <span class="string">"reflect.hero."</span> + name;   <span class="comment">//用户输入Daina，相当于输入的是reflect.hero.Daina这个类</span></span><br><span class="line">        Class&lt;?&gt; cla = Class.forName(classStr); <span class="comment">//根据包路径，获得元类</span></span><br><span class="line">        Object object = cla.newInstance(); <span class="comment">//通过元类，实例化对象</span></span><br><span class="line">        <span class="keyword">return</span> (Skill) object;<span class="comment">//在强转成Skill接口类型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>写了这么多，其实就是一个慢慢演变的过程，在spring框架中，ioc的概念，底层其实也就是工厂+反射，你不需要new对象，你只需要告诉spring容器，你需要什么对象，spring容器就会自动帮你创建对象。当然spring框架中比这个复杂的多。但是原理大概是这样子的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java中的设计模式&quot;&gt;&lt;a href=&quot;#Java中的设计模式&quot; class=&quot;headerlink&quot; title=&quot;Java中的设计模式&quot;&gt;&lt;/a&gt;Java中的设计模式&lt;/h1&gt;&lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://courage-kevin.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂模式" scheme="https://courage-kevin.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架基础知识</title>
    <link href="https://courage-kevin.github.io/2018/03/12/Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2018/03/12/Spring%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2018-03-12T12:05:41.000Z</published>
    <updated>2020-02-07T12:23:33.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="Spring框架简述"><a href="#Spring框架简述" class="headerlink" title="Spring框架简述"></a>Spring框架简述</h2><blockquote><p>是企业级应用中的一个软件开发框架，是一个半成品。最大优势是更好的实现了资源的整合(整合mybatis，整合springmvc，整合Redis…)。Spring框架中最核心是:IOC控制反转、DI依赖注入、Bean工厂、SpringAOP面向切面、事物控制例如整合JDBC，MyBatis，Hibernate等框架资源以更好的简化应用软件开发，降低软件开发周期。  </p></blockquote><blockquote><p>Spring的目的：就是让对象与对象之间的关系没有通过代码来关联，都是通过配置类说明管理的。<br>Spring就是一个容器，凡是在容器里的对象才会有Spring所提供的这些服务和功能。<br>Spring里用的最经典的一个设计模式就是模板方法模式。</p></blockquote><h2 id="Spring核心架构："><a href="#Spring核心架构：" class="headerlink" title="Spring核心架构："></a>Spring核心架构：</h2><blockquote><ul><li>Spring Core：spring的核心容器，提供Spring框架的基本功能。核心容器的主要组件是BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC）模式，将应用程序的配置和依赖性规范与实际的应用程序代码分开  </li></ul></blockquote><blockquote><ul><li>Spring Context：Spring上下文，是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。  </li></ul></blockquote><blockquote><ul><li>Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能集成到了 Spring 框架中。可以很容易地使 Spring框架管理的任何对象支持AOP。Spring AOP模块为基于Spring 的应用程序中的对象提供了事务管理服务。通过使用Spring AOP，就可以将声明性事务管理集成到应用程序中。  </li></ul></blockquote><blockquote><ul><li>Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。  </li></ul></blockquote><blockquote><ul><li>Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括JDO、Hibernate和iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。  </li></ul></blockquote><blockquote><ul><li>Spring Web：Web上下文模块建立在应用程序上下文模块之上，为基于Web 的应用程序提供了上下文。所以Spring 框架支持与Jakarta Struts的集成。Web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。  </li></ul></blockquote><blockquote><ul><li>Spring MVC：    MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul></blockquote><h2 id="Spring-核心组件："><a href="#Spring-核心组件：" class="headerlink" title="Spring 核心组件："></a>Spring 核心组件：</h2><blockquote><ul><li>BeanFactory：Spring内部使用，创建bean的工厂。</li><li>ApplicationContext：外部应用程序调用，也成为spring容器的上下文。</li><li>IoC控制反转：开发者在无需自己new对象，无需关心对象的创建过程。</li><li>DI依赖注入：松耦合方式实现对象之间的依赖</li><li>AOP：面向切面编程,补充java面向对象的不足</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring框架&quot;&gt;&lt;a href=&quot;#Spring框架&quot; class=&quot;headerlink&quot; title=&quot;Spring框架&quot;&gt;&lt;/a&gt;Spring框架&lt;/h1&gt;&lt;h2 id=&quot;Spring框架简述&quot;&gt;&lt;a href=&quot;#Spring框架简述&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Spring框架" scheme="https://courage-kevin.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://courage-kevin.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Nginx扩展知识总结</title>
    <link href="https://courage-kevin.github.io/2018/03/09/Nginx%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://courage-kevin.github.io/2018/03/09/Nginx%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2018-03-09T12:37:05.000Z</published>
    <updated>2020-02-06T14:26:50.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><blockquote><p> Nginx同Apache一样都是一种WEB服务器。基于REST架构风格，以统一资源描述符URI或者统一资源定位符URL作为沟通依据，通过HTTP协议提供各种网络服务。当然每一种web服务器在设计之初手当时的环境局限,比如用户规模、网络宽带、产品特点等,并且各自的定位和发展都不尽相同。这也使得各个WEB服务器有着各自鲜明的特点</p></blockquote><blockquote><p> Apache发展时间长，优点是稳定、开源、跨平台，但是缺点就是因为出现的时间太久了，他兴起的年代、互联网产业远远比不是现在，所以他被设计为重量级，并不支持高并发，在Apache上运行数以万计的访问，会导致服务器小号大量内存，操作系统对其进行进程或线程间的切换也会消耗大量的cpu资源，导致http请求的平均响应水平变低，Apache是以进程为基础的结构，进程要比线程消耗更多的系统开支，不太适合于多处理器环境，这些都决定Apache不可能成为高性能的WEB服务器，所以轻量级高并发服务器Nginx就应运而生了。</p></blockquote><h2 id="什么是正向代理"><a href="#什么是正向代理" class="headerlink" title="什么是正向代理"></a>什么是正向代理</h2><blockquote><p> 正向代理也是大家最常接触的到的代理模式，像我们平时需要访问外国的某些网站，可能会用一个操作FQ进行访问，FQ的方式主要就是找到一个可以访问外国网站的代理服务器，我们讲请求发送给代理服务器去访问国外的网站，然后将访问到的数据传递给我们，这种模式成为正向代理，正向代理最大的特点及时客户端非常明确要访问的服务器地址，服务器只清楚请求来自哪个代理服务，而不清楚来自哪个具体的客户端，正向代理模式屏蔽或隐藏了真是客户端信息。</p></blockquote><blockquote><p>总结来讲，正向代理，它代理的是客户端，是一个位于客户源和原始服务器之间的服务器，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p></blockquote><h2 id="Nginx反向代理服务器"><a href="#Nginx反向代理服务器" class="headerlink" title="Nginx反向代理服务器"></a>Nginx反向代理服务器</h2><blockquote><p>反向代理：”它代理的是服务端”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。也就是说在多个客户端给服务器发送请求，在Nginx服务器接收到之后，会按照一定的规则分发给后端的阢处理服务器进行处理，此时客户端发起的请求的来源是明确的，但是请求具体由哪台服务器处理的并不明确，Nginx扮演的就是一个反向代理的角色，客户端是感知不到代理存在的，反向代理对外都是透明的。访问者可能根本都不知道访问的是代理，因为客户端不需要任何配置就可以访问。</p></blockquote><h2 id="Nginx负载均衡调度算法："><a href="#Nginx负载均衡调度算法：" class="headerlink" title="Nginx负载均衡调度算法："></a>Nginx负载均衡调度算法：</h2><blockquote><ol><li>weight轮询(默认)：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li><li>ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li><li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li><li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li></ol></blockquote><h2 id="几种web服务器比较："><a href="#几种web服务器比较：" class="headerlink" title="几种web服务器比较："></a>几种web服务器比较：</h2><p><img src="/images/webservice.png" alt="avatar"></p><p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p><blockquote><ol><li>继承Nginx-1.15.9的所有特性，兼容Nginx的配置；</li><li>支持HTTP的CONNECT方法，可用于正向代理场景；</li><li>支持异步OpenSSL，可使用硬件如:QAT进行HTTPS的加速与卸载；</li><li>更加强大的负载均衡能力，包括一致性hash模块、会话保持模块，还可以对后端的服务器进行主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名；</li><li>输入过滤器机制支持。通过使用这种机制Web应用防火墙的编写更为方便；</li><li>支持设置proxy、memcached、fastcgi、scgi、uwsgi在后端失败时的重试次数</li><li>动态脚本语言Lua支持。扩展功能非常高效简单；</li><li>支持按指定关键字(域名，url等)收集Tengine运行状态；</li><li>组合多个CSS、JavaScript文件的访问请求变成一个请求；</li><li>自动去除空白字符和注释从而减小页面的体积</li><li>自动根据CPU数目设置进程个数和绑定CPU亲缘性；</li><li>监控系统的负载和资源占用从而对系统进行保护；</li><li>显示对运维人员更友好的出错信息，便于定位出错机器；</li><li>更强大的防攻击（访问速度限制）模块；</li><li>更方便的命令行参数，如列出编译的模块列表、支持的指令等；</li><li>可以根据访问文件类型设置过期时间；</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; Nginx同Apache一样都是一种WEB服务器。基于REST架构风格，以统一资源描述符
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://courage-kevin.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://courage-kevin.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC基础知识</title>
    <link href="https://courage-kevin.github.io/2018/03/09/SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2018/03/09/SpringMVC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2018-03-09T11:13:46.000Z</published>
    <updated>2020-02-07T12:08:57.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet:"></a>Servlet:</h2><blockquote><p>在认识SpringMVC前先回顾Servlet<br>Servlet本质上一段java程序<br>Servlet程序无法独立运行，必须放在服务器中，由服务器调用才可以执行！<br>Servlet的作用是：接受请求、处理请求、将结果响应给浏览器。  </p></blockquote><h2 id="Servlet的缺点"><a href="#Servlet的缺点" class="headerlink" title="Servlet的缺点"></a>Servlet的缺点</h2><p>每个Servlet声明时需要在web.xml中配置8行代码，配置繁琐，内容多，web.xml结构不清晰，不易维护。团队开发冲突不断。一般来说，每个Servlet只处理一个请求，如果要实现数据库表的CRUD操作，需要写4个Servlet。获取参数繁琐只能强制转类型，复杂的还需特殊处理。如日期类型转换，代码繁多重复手工劳动，非业务代码。  </p><h2 id="Web-MVC架构及分析"><a href="#Web-MVC架构及分析" class="headerlink" title="Web MVC架构及分析"></a>Web MVC架构及分析</h2><p>基于servlet，jsp，javabean技术实现的MVC架构,具体架构图如下：<br><img src="/images/mvc.png" alt="avatar">  </p><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式:"></a>MVC设计模式:</h2><blockquote><p>用来进行分层的结构，这样代码分离结构清晰，各层代码，各司其职，易于开发大型项目。MVC(Model模型层、View视图层、Control控制层(servlet层))，将软件进行分层达到松耦合的效果。<br>优势：提高代码的可读性，实现程序间的松耦合、提高代码复用性。<br><img src="/images/mvc2.png" alt="avatar">  </p></blockquote><h2 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h2><blockquote><p>SpringMVC他不是一个框架，而是Spring框架中的WEB应用模块<br>SpringMVC属于SpringFrameWork的后续产品。<br>SpringMVC就是基于MVC设计模式来实现的。<br>我们的POJO就是Model层，我们的JSP就是视图层，我们的Controller就是控制层。  </p></blockquote><h2 id="SpringMVC的工作原理："><a href="#SpringMVC的工作原理：" class="headerlink" title="SpringMVC的工作原理："></a>SpringMVC的工作原理：</h2><blockquote><p>SpringMVC底层就是一个servlet<br><img src="/images/springmvc.png" alt="avatar"></p><ol><li>当浏览器发起一个请求，访问我们的程序，就会被前端控制器拦截，（DispatcherServlet，SpringMVC的第一个组件）。</li><li>DispatcherServlet只负责接受请求和响应请求，它会解析URL调用处理器映射器（HandlerMapping）找到对应能处理这段业务的Controller，把Controller的名字返回给前端控制器，这时候DispatcherServlet就知道那个类可以处理业务。</li><li>拿到能处理业务的类名后，会调用（处理器适配器）HandlerAdaptor开始处理业务，一层一层的调用，从controller到service到dao层操作数据库，操作完数据库之后把所有的数据封装给ModelAndView对象，返回给DispatcherServlet，前段控制器就有了可以展示的视图和数据。</li><li>拿到ModelAndView对象之后，因为既有页面信息又有数据，所以会找到视图解析器（ViewReslover）解析完后会将View页面先发给前端控制器，前端控制器就可以准备页面演示了。</li><li>页面有了之后前端控制器就会将model也给到view。之后将model和view的内容一整合，就可以做最后响应的这一步了。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;h2 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Spring框架" scheme="https://courage-kevin.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://courage-kevin.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis基础知识</title>
    <link href="https://courage-kevin.github.io/2018/03/02/Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2018/03/02/Mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2018-03-02T11:13:46.000Z</published>
    <updated>2020-02-07T11:42:34.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="JDBC回顾"><a href="#JDBC回顾" class="headerlink" title="JDBC回顾"></a>JDBC回顾</h2><blockquote><p>再讲Mybatis之前，先回顾一下JDBC开发步骤：</p><ol><li>注册驱动Class.forName(“  “);</li><li>获取数据库连接DriverManager.getConnection();</li><li>获取传输器conn.preparedStatement();</li><li>执行SQL   ps.executeQuery(), 返回结果集对象ResultSet</li><li>遍历结果集</li><li>释放资源</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">//定义 sql 语句 ?表示占位符</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">            <span class="comment">//获取预处理 statement</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的参数值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);</span><br><span class="line">            <span class="comment">//向数据库发出 sql 执行查询，查询出结果集</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">"id"</span>) + resultSet.getString(<span class="string">" username"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  上边使用 jdbc 的原始方法（未经封装）实现了查询数据库表记录的操作。</span></span><br></pre></td></tr></table></figure></div><h3 id="使用JDBC的劣势"><a href="#使用JDBC的劣势" class="headerlink" title="使用JDBC的劣势"></a>使用JDBC的劣势</h3><blockquote><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li><li>Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。</li><li>使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。</li><li>对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便。</li></ol></blockquote><h2 id="MyBatis框架概述"><a href="#MyBatis框架概述" class="headerlink" title="MyBatis框架概述"></a>MyBatis框架概述</h2><blockquote><p>mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，就可以完成对数据库的持久化操作。</p></blockquote><h3 id="简单记重点"><a href="#简单记重点" class="headerlink" title="简单记重点"></a>简单记重点</h3><blockquote><p>Mybatis是支持普通SQL查询，存储过程和高级映射的优秀持久层框架,也是用来操作是数据库的。<br>优点：底层封装JDBC，可以简化JDBC的开发，并且可以更好的完成ORM（对象关系映射）</p></blockquote><h3 id="Mybatis开发环境搭建"><a href="#Mybatis开发环境搭建" class="headerlink" title="Mybatis开发环境搭建"></a>Mybatis开发环境搭建</h3><blockquote><ol><li>创建 maven 工程</li><li>添加 Mybatis的坐标</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><ol start="3"><li>编写 User 实体类</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> username; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123; <span class="keyword">this</span>.username = username; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123; <span class="keyword">this</span>.birthday = birthday; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123; <span class="keyword">this</span>.sex = sex; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123; <span class="keyword">this</span>.address = address; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", birthday="</span> + birthday</span><br><span class="line">        + <span class="string">", sex="</span> + sex + <span class="string">", address="</span></span><br><span class="line">        + address + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="4"><li>编写持久层接口 Dao</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询所有用户</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="4"><li>编写持久层接口的映射文件</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><ol start="5"><li>编写 SqlMapConfig.xml 配置文件</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 mybatis 的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 mysql 的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/数据库名"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/itheima/dao/UserDao.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><ol start="6"><li>编写测试类</li></ol></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.读取配置文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//2.创建 SqlSessionFactory 的构建者对象</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    <span class="comment">//3.使用构建者创建工厂对象 SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory factory = builder.build(in);</span><br><span class="line">    <span class="comment">//4.使用 SqlSessionFactory 生产 SqlSession 对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line">    <span class="comment">//5.使用 SqlSession 创建 dao 接口的代理对象</span></span><br><span class="line">    IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//6.使用代理对象执行查询所有方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    in.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这简单的几行代码中，使用了三种设计模式，</span></span><br><span class="line"><span class="comment">// 1. 创建工厂的时候，mybatis使用了构建者模式。     优势：吧对象的创建细节隐藏起来，使用者直接调用build即可拿到对象。</span></span><br><span class="line"><span class="comment">// 2. 生产sqlSession使用了工厂模式。               优势：解耦（降低类之间的依赖关系）。</span></span><br><span class="line">    <span class="comment">// 3. 创建Dao接口实现类使用了代理模式。             优势：不修改源码的基础上对已有的方法增强。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>通过快速入门示例，我们发现使用 mybatis 是非常容易的一件事情，因为只需要编写 Dao 接口并且按照mybatis 要求编写两个配置文件，就可以实现功能。远比我们之前的 jdbc 方便多了。（我们使用注解之后，将变得更为简单，只需要编写一个 mybatis 配置文件就够了。）但是，这里面包含了许多细节，比如为什么会有工厂对象（SqlSessionFactory）,为什么有了工厂之后还要有构建者对象（SqlSessionFactoryBuilder），为什么 IUserDao.xml 在创建时有位置和文件名的要求等等。这些问题我们在自定义 mybatis 框架的章节，通过层层剥离的方式，给大家讲解。请注意：我们讲解自定义 Mybatis 框架，不是让大家回去自己去写个 mybatis，而是让我们能更好了了解mybatis 内部是怎么执行的，在以后的开发中能更好的使用 mybatis 框架，同时对它的设计理念（设计模式）有一个认识。</p></blockquote><h2 id="Mybatis图解"><a href="#Mybatis图解" class="headerlink" title="Mybatis图解"></a>Mybatis图解</h2><p><img src="/images/mybatis.PNG" alt="avatar"></p><blockquote><ol><li>SqlMapConfig.xml：此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</li><li>xxxMapper.xml：sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</li><li>SqlSessionFactory：通过mybatis环境等配置信息构造会话工厂对象。</li><li>SqlSession：由会话工厂对象创建会话对象，操作数据库需要通过Session进行。</li><li>User：Executor把执行sql后的内容输出映射到java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程  </li></ol></blockquote><h2 id="Mybatis工作原理解析简述"><a href="#Mybatis工作原理解析简述" class="headerlink" title="Mybatis工作原理解析简述"></a>Mybatis工作原理解析简述</h2><blockquote><ol><li>mybatis应用程序通过SqlSessionFactoryBuilder核心配置文件中构建出会话工厂对象，</li><li>通过会话工厂的实例开启一个会话，</li><li>通过会话对象获得一个mapper对象并运行mapper映射的SQL语句，</li><li>完成对数据库的增删改查（CRUD）和事物提交，之后关闭sqlSession</li></ol></blockquote><h2 id="MyBatis中的重要对象"><a href="#MyBatis中的重要对象" class="headerlink" title="MyBatis中的重要对象"></a>MyBatis中的重要对象</h2><blockquote><p>分别是SqlSessionFactory和SqlSession。  </p></blockquote><blockquote><ul><li>SqlSessionFactory：可以理解为会话工厂，在整个项目中共享，是线程安全的。通过openSession方法创建SqlSession对象，该方法存在很多重载方式可以有参数可以无参数。</li><li>SqlSession：可以通过会话工厂产生，线程不安全。用来执行SQL，提供了丰富的方法来完成数据库的操作。返回结果集. 框架底层直接将查询到的数据封装为实体对象  </li></ul></blockquote><blockquote><p>Mybatis不会自动提交事物，需要手动提交。提交方式有两种：openSession（true）或者session.commit（）；</p></blockquote><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="取值和-取值的区别"><a href="#取值和-取值的区别" class="headerlink" title="#{}取值和${}取值的区别"></a>#{}取值和${}取值的区别</h3><blockquote><ol><li>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</li><li>Mybatis在处理${}时，就是把${}替换成变量的值。</li><li>使用#{}可以有效的防止SQL注入，提高系统安全性。</li></ol></blockquote><h3 id="resultType-和-resultMap的区别？"><a href="#resultType-和-resultMap的区别？" class="headerlink" title="#resultType 和 resultMap的区别？"></a>#resultType 和 resultMap的区别？</h3><blockquote><ol><li>resultType：类的名字和数据库相同时，可以直接设置resultType参数为Pojo类。</li><li>resultMap：类的名若不同，需要设置resultMap将结果名字和Pojo名字进行转换。</li><li>ResultMap用于映射不规范字段自动匹配规范驼峰规则，数据库字段与pojo对象的属性名不符合的时候可以使用此规则，属性名首字母小写，第二个单词首字母大写</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;h2 id=&quot;JDBC回顾&quot;&gt;&lt;a href=&quot;#JDBC回顾&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Mybatis框架" scheme="https://courage-kevin.github.io/categories/Mybatis%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="https://courage-kevin.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mycat配置文件</title>
    <link href="https://courage-kevin.github.io/2018/03/01/Mycat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://courage-kevin.github.io/2018/03/01/Mycat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2018-03-01T12:11:26.000Z</published>
    <updated>2020-02-06T12:20:28.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mycat配置文件介绍"><a href="#Mycat配置文件介绍" class="headerlink" title="Mycat配置文件介绍"></a>Mycat配置文件介绍</h1><h2 id="schema-xml文件配置"><a href="#schema-xml文件配置" class="headerlink" title="schema.xml文件配置"></a>schema.xml文件配置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"schema.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--name属性是自定义的  dataNode表示数据库的节点信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"jtdb"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span> <span class="attr">dataNode</span>=<span class="string">"jtdb"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义节点名称/节点主机/数据名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"jtdb"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"jtdb"</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参数介绍--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--balance 0表示所有的读操作都会发往writeHost主机 --&gt;</span>  </span><br><span class="line">                <span class="comment">&lt;!--1表示所有的读操作发往readHost和闲置的主节点中--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--writeType=0 所有的写操作都发往第一个writeHost主机--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--writeType=1 所有的写操作随机发往writeHost中--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--dbType 表示数据库类型 mysql/oracle--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--dbDriver="native"  固定参数 不变--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--switchType=-1 表示不自动切换, 主机宕机后不会自动切换从节点--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--switchType=1  表示会自动切换(默认值)如果第一个主节点宕机后,Mycat会进行3次心跳检测,如果3次都没有响应,则会自动切换到第二个主节点--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--并且会更新/conf/dnindex.properties文件的主节点信息 localhost1=0 表示第一个节点.该文件不要随意修改否则会出现大问题--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span>  <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select 1<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置第一台主机主要进行写库操作,在默认的条件下Mycat主要操作第一台主机在第一台主机中已经实现了读写分离.因为默认写操作会发往137的数据库.读的操作默认发往141.如果从节点比较忙,则主节点分担部分压力.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.65.128:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--读数据库--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.65.130:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义第二台主机 由于数据库内部已经实现了双机热备.--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mycat实现高可用.当第一个主机137宕机后.mycat会自动发出心跳检测.检测3次.--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果主机137没有给Mycat响应则判断主机死亡.则回启东第二台主机继续为用户提供服务.--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果137主机恢复之后则处于等待状态.如果141宕机则137再次持续为用户提供服务.--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前提:实现双机热备.--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM2"</span> <span class="attr">url</span>=<span class="string">"192.168.65.128:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.65.130:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="server-xml文件配置"><a href="#server-xml文件配置" class="headerlink" title="server.xml文件配置"></a>server.xml文件配置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the "License"); </span></span><br><span class="line"><span class="comment">        - you may not use this file except in compliance with the License. - You </span></span><br><span class="line"><span class="comment">        may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment">        - - Unless required by applicable law or agreed to in writing, software - </span></span><br><span class="line"><span class="comment">        distributed under the License is distributed on an "AS IS" BASIS, - WITHOUT </span></span><br><span class="line"><span class="comment">        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span></span><br><span class="line"><span class="comment">        License for the specific language governing permissions and - limitations </span></span><br><span class="line"><span class="comment">        under the License. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:server <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"server.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nonePasswordLogin"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useHandshakeV10"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useSqlStat"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useGlobleTableCheck"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  &lt;property name="useCompression"&gt;1&lt;/property&gt;--&gt;</span> <span class="comment">&lt;!--1为开启mysql压缩协议--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  &lt;property name="fakeMySQLVersion"&gt;5.6.20&lt;/property&gt;--&gt;</span> <span class="comment">&lt;!--设置模拟的MySQL版本号--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="processorBufferChunk"&gt;40960&lt;/property&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="processors"&gt;1&lt;/property&gt; </span></span><br><span class="line"><span class="comment">        &lt;property name="processorExecutor"&gt;32&lt;/property&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena | type 2 NettyBufferPool --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processorBufferPoolType"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="maxStringLiteralLength"&gt;65535&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="sequnceHandlerType"&gt;0&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="backSocketNoDelay"&gt;1&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="frontSocketNoDelay"&gt;1&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="processorExecutor"&gt;16&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                &lt;property name="serverPort"&gt;8066&lt;/property&gt; &lt;property name="managerPort"&gt;9066&lt;/property&gt; </span></span><br><span class="line"><span class="comment">                &lt;property name="idleTimeout"&gt;300000&lt;/property&gt; &lt;property name="bindIp"&gt;0.0.0.0&lt;/property&gt; </span></span><br><span class="line"><span class="comment">                &lt;property name="frontWriteQueueSize"&gt;4096&lt;/property&gt; &lt;property name="processors"&gt;32&lt;/property&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handleDistributedTransactions"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--off heap for merge/order/group/limit      1开启   0关闭--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useOffHeapForMerge"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单位为m--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryPageSize"</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单位为k--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spillsFileBufferSize"</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useStreamOutput"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单位为m--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemReserveMemorySize"</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--是否采用zookeeper协调切换  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useZKSwitch"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- XA Recovery Log日志路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="XARecoveryLogBaseDir"&gt;./&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- XA Recovery Log日志名称 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="XARecoveryLogBaseName"&gt;tmlog&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--白名单可以使用通配符%或着*--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--例如&lt;host host="127.0.0.*" user="root"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--例如&lt;host host="127.0.*" user="root"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--例如&lt;host host="127.*" user="root"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--例如&lt;host host="1*7.*" user="root"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这些配置情况下对于127.0.0.1都能以root账户登录--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;firewall&gt;</span></span><br><span class="line"><span class="comment">           &lt;whitehost&gt;</span></span><br><span class="line"><span class="comment">              &lt;host host="1*7.0.0.*" user="root"/&gt;</span></span><br><span class="line"><span class="comment">           &lt;/whitehost&gt;</span></span><br><span class="line"><span class="comment">       &lt;blacklist check="false"&gt;</span></span><br><span class="line"><span class="comment">       &lt;/blacklist&gt;</span></span><br><span class="line"><span class="comment">        &lt;/firewall&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--与schema.xml中的配置相同 注意数据库的大小写--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>jtdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>user<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>jtdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mycat配置文件介绍&quot;&gt;&lt;a href=&quot;#Mycat配置文件介绍&quot; class=&quot;headerlink&quot; title=&quot;Mycat配置文件介绍&quot;&gt;&lt;/a&gt;Mycat配置文件介绍&lt;/h1&gt;&lt;h2 id=&quot;schema-xml文件配置&quot;&gt;&lt;a href=&quot;#sch
      
    
    </summary>
    
    
      <category term="mycat配置" scheme="https://courage-kevin.github.io/categories/mycat%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="常用配置文件" scheme="https://courage-kevin.github.io/tags/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Servlet基础知识</title>
    <link href="https://courage-kevin.github.io/2018/02/15/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://courage-kevin.github.io/2018/02/15/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2018-02-15T12:55:43.000Z</published>
    <updated>2020-02-06T09:15:57.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h2><blockquote><ol><li>Servlet本质上一段java程序</li><li>Servlet程序无法独立运行，必须放在服务器中，由服务器调用才可以执行！</li><li>Servlet的作用是：接受请求、处理请求、将结果响应给浏览器。</li></ol></blockquote><h2 id="Servlet的作用"><a href="#Servlet的作用" class="headerlink" title="Servlet的作用"></a>Servlet的作用</h2><blockquote><p>Servlet的作用就是处理请求，服务器会将接受到的请求交给Servlet处理。这个过程为：</p><ol><li>客户端发送请求至服务器端；</li><li>服务器将请求信息交给 Servlet 处理；</li><li>最终处理的结果交给服务器；</li><li>服务器将结果响应给客户端。</li></ol></blockquote><h2 id="Servlet调用过程"><a href="#Servlet调用过程" class="headerlink" title="Servlet调用过程"></a>Servlet调用过程</h2><blockquote><p><img src="/images/servlet%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="avatar"></p><ol><li>浏览器向服务器发起请求</li><li>首先会根据请求头信息获知浏览器访问的是那个虚拟主机</li><li>然后根据请求行中的路径资源获知浏览器访问的是哪一个web应用</li><li>根据请求行中的资源路径获知访问的是哪一个资源</li><li>根据获取到的资源路径到web.项目文件中去匹配真实路径，创建servlet实例并调用service方法</li><li>调用service方法前，底层会创建两个对象，Requset、response，通过request获取请求相关信息</li><li>通过response想浏览器发送响应数据，然后按照Http协议规定的格式，组织成相应消息，最后发送给浏览器</li></ol></blockquote><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><blockquote><p>&emsp;Servlet在第一次被访问时创建Servlet实例, 创建之后服务器会立即调用init方法进行初始化的操作, 创建之后, Servlet实例会一直驻留在服务器的内存中, 为后续的请求服务. 只要有请求来访问这个Servlet, 服务器就会调用service方法来处理请求, 直到服务器关闭, 或者WEB应用被移出容器, 随着WEB应用的销毁, Servlet实例也会跟着销毁, 在销毁之前服务器会调用destroy方法进行善后的处理。</p></blockquote><h2 id="请求、转发、域对象"><a href="#请求、转发、域对象" class="headerlink" title="请求、转发、域对象"></a>请求、转发、域对象</h2><blockquote><ol><li>域对象：<br>&emsp;能够在指定的范围内, 利用自身的map实现数据的共享  </li></ol></blockquote><blockquote><ol start="2"><li>请求转发：<br>&emsp;是指定服务器中的某一个资源（Servlet或JSP）在处理请求的过程中，将请求转发给一个其他的资源，让其他资源来处理请求转发只能在同一个Web应用内部的两个资源之间进行跳转, 不可以是不同的Web应用或者不同的服务器中进行跳转,请求转发是一次请求，一次响应，转发前后地址栏地址不会发生变化  </li></ol></blockquote><blockquote><ol start="3"><li>重定向：<br>&emsp;是指当用户浏览某个网址时，将其导向到另一个网址的技术。重定向和定时刷新都是两次请求两次响应，重定向和定时刷新前后，地址栏地址都会发生变化</li></ol></blockquote><blockquote><ol start="4"><li>总结:<br>定时刷新和重定向都是两次请求, 两次响应<br>定时刷新和重定向跳转前后, 地址栏地址都会发生变化。<br>定时刷新和重定向在跳转时没有限制, 既可以在同一个Web应用内部的资源之间进行跳转, 也可以在不同的Web应用或者不同的主机之间进行跳转<br>定时刷新和重定向不同的是, 重定向是立即跳转, 中间没有时间间隔, 而定时刷新可以指定多少秒之后再进行跳转, 在跳转之前, 可以输出内容到浏览器, 提示用户。</li></ol></blockquote><h3 id="EL表达式的作用"><a href="#EL表达式的作用" class="headerlink" title="EL表达式的作用:"></a>EL表达式的作用:</h3><blockquote><p>&emsp;在Web开发中, 实现很多功能的时候, 都是由Servlet接收请求、处理请求，但是处理的结果应该交给JSP显示，此时我们可以在Servlet中将请求处理的结果存入request域中，再通过转发将Request域带到JSP中，再通过EL表达式将request域中的数据取出来, 显示在网页上.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;Servlet概述&quot;&gt;&lt;a href=&quot;#Servlet概述&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Servlet基础知识" scheme="https://courage-kevin.github.io/categories/Servlet%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="基础知识" scheme="https://courage-kevin.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
